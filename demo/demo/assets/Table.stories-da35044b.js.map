{"version":3,"file":"Table.stories-da35044b.js","sources":["../../node_modules/@material-ui/core/esm/Table/TableContext.js","../../node_modules/@material-ui/core/esm/Table/Table.js","../../node_modules/@material-ui/core/esm/Table/Tablelvl2Context.js","../../node_modules/@material-ui/core/esm/TableBody/TableBody.js","../../node_modules/@material-ui/core/esm/TableCell/TableCell.js","../../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","../../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../../node_modules/@material-ui/core/esm/TableRow/TableRow.js","../../node_modules/@tanstack/react-table/build/esm/index.js","../../src/UI/Table/components/BottomReached.tsx","../../src/UI/Table/components/HeaderCell/icons/sortAsc.svg","../../src/UI/Table/components/HeaderCell/icons/sortDesc.svg","../../src/UI/Table/components/HeaderCell/styles.ts","../../src/UI/Table/components/HeaderCell/index.tsx","../../src/UI/Table/components/GroupRow/styles.ts","../../src/UI/Table/components/GroupRow/index.tsx","../../src/UI/Table/components/TableRow/styles.ts","../../src/UI/Table/components/TableRow/index.tsx","../../src/UI/Table/components/GroupBlock/index.tsx","../../src/UI/Table/components/Groups/index.tsx","../../src/UI/Table/styles.ts","../../src/UI/Table/index.tsx","../../src/UI/Table/components/DefaultGroupContent/styles.ts","../../src/UI/Table/components/DefaultGroupContent/index.tsx","../../src/UI/Table/components/cells/Wrapper/styles.ts","../../src/UI/Table/components/cells/Wrapper/index.tsx","../../src/UI/Table/__examples__/mock.tsx","../../src/UI/Table/__examples__/index.tsx","../../src/UI/Table/Table.stories.mdx"],"sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar TableContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  TableContext.displayName = 'TableContext';\n}\n\nexport default TableContext;","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport TableContext from './TableContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'table',\n      width: '100%',\n      borderCollapse: 'collapse',\n      borderSpacing: 0,\n      '& caption': _extends({}, theme.typography.body2, {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        textAlign: 'left',\n        captionSide: 'bottom'\n      })\n    },\n\n    /* Styles applied to the root element if `stickyHeader={true}`. */\n    stickyHeader: {\n      borderCollapse: 'separate'\n    }\n  };\n};\nvar defaultComponent = 'table';\nvar Table = /*#__PURE__*/React.forwardRef(function Table(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      _props$padding = props.padding,\n      padding = _props$padding === void 0 ? 'normal' : _props$padding,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$stickyHeader = props.stickyHeader,\n      stickyHeader = _props$stickyHeader === void 0 ? false : _props$stickyHeader,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"padding\", \"size\", \"stickyHeader\"]);\n\n  var table = React.useMemo(function () {\n    return {\n      padding: padding,\n      size: size,\n      stickyHeader: stickyHeader\n    };\n  }, [padding, size, stickyHeader]);\n  return /*#__PURE__*/React.createElement(TableContext.Provider, {\n    value: table\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    role: Component === defaultComponent ? null : 'table',\n    ref: ref,\n    className: clsx(classes.root, className, stickyHeader && classes.stickyHeader)\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes = {\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * `default` is deprecated, use `normal` instead.\n   */\n  padding: chainPropTypes(PropTypes.oneOf(['normal', 'checkbox', 'none', 'default']), function (props) {\n    if (props.padding === 'default') {\n      return new Error('Material-UI: padding=\"default\" was renamed to padding=\"normal\" for consistency.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Allows TableCells to inherit size of the Table.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE 11.\n   */\n  stickyHeader: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTable'\n})(Table);","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar Tablelvl2Context = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  Tablelvl2Context.displayName = 'Tablelvl2Context';\n}\n\nexport default Tablelvl2Context;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-row-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'body'\n};\nvar defaultComponent = 'tbody';\nvar TableBody = /*#__PURE__*/React.forwardRef(function TableBody(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableBody.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableBody'\n})(TableBody);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport { darken, alpha, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      display: 'table-cell',\n      verticalAlign: 'inherit',\n      // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n      borderBottom: \"1px solid\\n    \".concat(theme.palette.type === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)),\n      textAlign: 'left',\n      padding: 16\n    }),\n\n    /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n    head: {\n      color: theme.palette.text.primary,\n      lineHeight: theme.typography.pxToRem(24),\n      fontWeight: theme.typography.fontWeightMedium\n    },\n\n    /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n    body: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n    footer: {\n      color: theme.palette.text.secondary,\n      lineHeight: theme.typography.pxToRem(21),\n      fontSize: theme.typography.pxToRem(12)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: '6px 24px 6px 16px',\n      '&:last-child': {\n        paddingRight: 16\n      },\n      '&$paddingCheckbox': {\n        width: 24,\n        // prevent the checkbox column from growing\n        padding: '0 12px 0 16px',\n        '&:last-child': {\n          paddingLeft: 12,\n          paddingRight: 16\n        },\n        '& > *': {\n          padding: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"checkbox\"`. */\n    paddingCheckbox: {\n      width: 48,\n      // prevent the checkbox column from growing\n      padding: '0 0 0 4px',\n      '&:last-child': {\n        paddingLeft: 0,\n        paddingRight: 4\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"none\"`. */\n    paddingNone: {\n      padding: 0,\n      '&:last-child': {\n        padding: 0\n      }\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right',\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `context.table.stickyHeader={true}`. */\n    stickyHeader: {\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      backgroundColor: theme.palette.background.default\n    }\n  };\n};\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n */\n\nvar TableCell = /*#__PURE__*/React.forwardRef(function TableCell(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      component = props.component,\n      paddingProp = props.padding,\n      scopeProp = props.scope,\n      sizeProp = props.size,\n      sortDirection = props.sortDirection,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"component\", \"padding\", \"scope\", \"size\", \"sortDirection\", \"variant\"]);\n\n  var table = React.useContext(TableContext);\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  var isHeadCell = tablelvl2 && tablelvl2.variant === 'head';\n  var role;\n  var Component;\n\n  if (component) {\n    Component = component;\n    role = isHeadCell ? 'columnheader' : 'cell';\n  } else {\n    Component = isHeadCell ? 'th' : 'td';\n  }\n\n  var scope = scopeProp;\n\n  if (!scope && isHeadCell) {\n    scope = 'col';\n  }\n\n  var padding = paddingProp || (table && table.padding ? table.padding : 'normal');\n  var size = sizeProp || (table && table.size ? table.size : 'medium');\n  var variant = variantProp || tablelvl2 && tablelvl2.variant;\n  var ariaSort = null;\n\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], padding !== 'normal' && classes[\"padding\".concat(capitalize(padding))], size !== 'medium' && classes[\"size\".concat(capitalize(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),\n    \"aria-sort\": ariaSort,\n    role: role,\n    scope: scope\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes = {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The table cell contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Sets the padding applied to the cell.\n   * By default, the Table parent component set the value (`normal`).\n   * `default` is deprecated, use `normal` instead.\n   */\n  padding: chainPropTypes(PropTypes.oneOf(['normal', 'checkbox', 'none', 'default']), function (props) {\n    if (props.padding === 'default') {\n      return new Error('Material-UI: padding=\"default\" was renamed to padding=\"normal\" for consistency.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n\n  /**\n   * Specify the size of the cell.\n   * By default, the Table parent component set the value (`medium`).\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n\n  /**\n   * Specify the cell type.\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\n   */\n  variant: PropTypes.oneOf(['body', 'footer', 'head'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableCell'\n})(TableCell);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar defaultComponent = 'thead';\nvar TableHead = /*#__PURE__*/React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: Component === defaultComponent ? null : 'rowgroup'\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { alpha } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: 'inherit',\n      display: 'table-row',\n      verticalAlign: 'middle',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      '&$hover:hover': {\n        backgroundColor: theme.palette.action.hover\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Pseudo-class applied to the root element if `hover={true}`. */\n    hover: {},\n\n    /* Styles applied to the root element if table variant=\"head\". */\n    head: {},\n\n    /* Styles applied to the root element if table variant=\"footer\". */\n    footer: {}\n  };\n};\nvar defaultComponent = 'tr';\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\n\nvar TableRow = /*#__PURE__*/React.forwardRef(function TableRow(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      _props$hover = props.hover,\n      hover = _props$hover === void 0 ? false : _props$hover,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"hover\", \"selected\"]);\n\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, tablelvl2 && {\n      'head': classes.head,\n      'footer': classes.footer\n    }[tablelvl2.variant], hover && classes.hover, selected && classes.selected),\n    role: Component === defaultComponent ? null : 'row'\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes = {\n  /**\n   * Should be valid <tr> children such as `TableCell`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the table row will shade on hover.\n   */\n  hover: PropTypes.bool,\n\n  /**\n   * If `true`, the table row will have the selected shading.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableRow'\n})(TableRow);","/**\n * react-table\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\n\n/**\n * table-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction noop() {//\n}\nfunction makeStateUpdater(key, instance) {\n  return updater => {\n    instance.setState(old => {\n      return { ...old,\n        [key]: functionalUpdate(updater, old[key])\n      };\n    });\n  };\n}\nfunction isFunction(d) {\n  return d instanceof Function;\n}\nfunction flattenBy(arr, getChildren) {\n  const flat = [];\n\n  const recurse = subArr => {\n    subArr.forEach(item => {\n      flat.push(item);\n      const children = getChildren(item);\n\n      if (children != null && children.length) {\n        recurse(children);\n      }\n    });\n  };\n\n  recurse(arr);\n  return flat;\n}\nfunction memo(getDeps, fn, opts) {\n  let deps = [];\n  let result;\n  return () => {\n    let depTime;\n    if (opts.key && opts.debug) depTime = Date.now();\n    const newDeps = getDeps();\n    const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index) => deps[index] !== dep);\n\n    if (!depsChanged) {\n      return result;\n    }\n\n    deps = newDeps;\n    let resultTime;\n    if (opts.key && opts.debug) resultTime = Date.now();\n    result = fn(...newDeps);\n    opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result);\n\n    if (opts.key && opts.debug) {\n      if (opts != null && opts.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n        const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n        const resultFpsPercentage = resultEndTime / 16;\n\n        const pad = (str, num) => {\n          str = String(str);\n\n          while (str.length < num) {\n            str = ' ' + str;\n          }\n\n          return str;\n        };\n\n        console.info(\"%c\\u23F1 \" + pad(resultEndTime, 5) + \" /\" + pad(depEndTime, 5) + \" ms\", \"\\n            font-size: .6rem;\\n            font-weight: bold;\\n            color: hsl(\" + Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)) + \"deg 100% 31%);\", opts == null ? void 0 : opts.key);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction createColumn(table, columnDef, depth, parent) {\n  var _ref, _resolvedColumnDef$id;\n\n  const defaultColumn = table._getDefaultColumnDef();\n\n  const resolvedColumnDef = { ...defaultColumn,\n    ...columnDef\n  };\n  let id = (_ref = (_resolvedColumnDef$id = resolvedColumnDef.id) != null ? _resolvedColumnDef$id : resolvedColumnDef.accessorKey) != null ? _ref : typeof resolvedColumnDef.header === 'string' ? resolvedColumnDef.header : undefined;\n  let accessorFn;\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn;\n  } else if (resolvedColumnDef.accessorKey) {\n    accessorFn = originalRow => originalRow[resolvedColumnDef.accessorKey];\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(resolvedColumnDef.accessorFn ? \"Columns require an id when using an accessorFn\" : \"Columns require an id when using a non-string header\");\n    }\n\n    throw new Error();\n  }\n\n  let column = {\n    id: \"\" + String(id),\n    accessorFn,\n    parent: parent,\n    depth,\n    columnDef: resolvedColumnDef,\n    columns: [],\n    getFlatColumns: memo(() => [true], () => {\n      var _column$columns;\n\n      return [column, ...((_column$columns = column.columns) == null ? void 0 : _column$columns.flatMap(d => d.getFlatColumns()))];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      }\n    }),\n    getLeafColumns: memo(() => [table._getOrderColumnsFn()], orderColumns => {\n      var _column$columns2;\n\n      if ((_column$columns2 = column.columns) != null && _column$columns2.length) {\n        let leafColumns = column.columns.flatMap(column => column.getLeafColumns());\n        return orderColumns(leafColumns);\n      }\n\n      return [column];\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    })\n  };\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn == null ? void 0 : feature.createColumn(column, table));\n  }, column); // Yes, we have to convert table to uknown, because we know more than the compiler here.\n\n  return column;\n}\n\n//\nfunction createHeader(table, column, options) {\n  var _options$id;\n\n  const id = (_options$id = options.id) != null ? _options$id : column.id;\n  let header = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null,\n    getLeafHeaders: () => {\n      const leafHeaders = [];\n\n      const recurseHeader = h => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader);\n        }\n\n        leafHeaders.push(h);\n      };\n\n      recurseHeader(header);\n      return leafHeaders;\n    },\n    getContext: () => ({\n      table,\n      header: header,\n      column\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader == null ? void 0 : feature.createHeader(header, table));\n  });\n\n  return header;\n}\n\nconst Headers = {\n  createTable: table => {\n    return {\n      // Header Groups\n      getHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        var _left$map$filter, _right$map$filter;\n\n        const leftColumns = (_left$map$filter = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter : [];\n        const rightColumns = (_right$map$filter = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter : [];\n        const centerColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        const headerGroups = buildHeaderGroups(allColumns, [...leftColumns, ...centerColumns, ...rightColumns], table);\n        return headerGroups;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugHeaders;\n        }\n      }),\n      getCenterHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(column => !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id)));\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugHeaders;\n        }\n      }),\n      getLeftHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.left], (allColumns, leafColumns, left) => {\n        var _left$map$filter2;\n\n        const orderedLeafColumns = (_left$map$filter2 = left == null ? void 0 : left.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _left$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugHeaders;\n        }\n      }),\n      getRightHeaderGroups: memo(() => [table.getAllColumns(), table.getVisibleLeafColumns(), table.getState().columnPinning.right], (allColumns, leafColumns, right) => {\n        var _right$map$filter2;\n\n        const orderedLeafColumns = (_right$map$filter2 = right == null ? void 0 : right.map(columnId => leafColumns.find(d => d.id === columnId)).filter(Boolean)) != null ? _right$map$filter2 : [];\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right');\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n        debug: () => {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugHeaders;\n        }\n      }),\n      // Footer Groups\n      getFooterGroups: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n        debug: () => {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFooterGroups: memo(() => [table.getLeftHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n        debug: () => {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFooterGroups: memo(() => [table.getCenterHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n        debug: () => {\n          var _table$options$debugA7;\n\n          return (_table$options$debugA7 = table.options.debugAll) != null ? _table$options$debugA7 : table.options.debugHeaders;\n        }\n      }),\n      getRightFooterGroups: memo(() => [table.getRightHeaderGroups()], headerGroups => {\n        return [...headerGroups].reverse();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n        debug: () => {\n          var _table$options$debugA8;\n\n          return (_table$options$debugA8 = table.options.debugAll) != null ? _table$options$debugA8 : table.options.debugHeaders;\n        }\n      }),\n      // Flat Headers\n      getFlatHeaders: memo(() => [table.getHeaderGroups()], headerGroups => {\n        return headerGroups.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n        debug: () => {\n          var _table$options$debugA9;\n\n          return (_table$options$debugA9 = table.options.debugAll) != null ? _table$options$debugA9 : table.options.debugHeaders;\n        }\n      }),\n      getLeftFlatHeaders: memo(() => [table.getLeftHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n        debug: () => {\n          var _table$options$debugA10;\n\n          return (_table$options$debugA10 = table.options.debugAll) != null ? _table$options$debugA10 : table.options.debugHeaders;\n        }\n      }),\n      getCenterFlatHeaders: memo(() => [table.getCenterHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n        debug: () => {\n          var _table$options$debugA11;\n\n          return (_table$options$debugA11 = table.options.debugAll) != null ? _table$options$debugA11 : table.options.debugHeaders;\n        }\n      }),\n      getRightFlatHeaders: memo(() => [table.getRightHeaderGroups()], left => {\n        return left.map(headerGroup => {\n          return headerGroup.headers;\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n        debug: () => {\n          var _table$options$debugA12;\n\n          return (_table$options$debugA12 = table.options.debugAll) != null ? _table$options$debugA12 : table.options.debugHeaders;\n        }\n      }),\n      // Leaf Headers\n      getCenterLeafHeaders: memo(() => [table.getCenterFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders;\n\n          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n        debug: () => {\n          var _table$options$debugA13;\n\n          return (_table$options$debugA13 = table.options.debugAll) != null ? _table$options$debugA13 : table.options.debugHeaders;\n        }\n      }),\n      getLeftLeafHeaders: memo(() => [table.getLeftFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders2;\n\n          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n        debug: () => {\n          var _table$options$debugA14;\n\n          return (_table$options$debugA14 = table.options.debugAll) != null ? _table$options$debugA14 : table.options.debugHeaders;\n        }\n      }),\n      getRightLeafHeaders: memo(() => [table.getRightFlatHeaders()], flatHeaders => {\n        return flatHeaders.filter(header => {\n          var _header$subHeaders3;\n\n          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);\n        });\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n        debug: () => {\n          var _table$options$debugA15;\n\n          return (_table$options$debugA15 = table.options.debugAll) != null ? _table$options$debugA15 : table.options.debugHeaders;\n        }\n      }),\n      getLeafHeaders: memo(() => [table.getLeftHeaderGroups(), table.getCenterHeaderGroups(), table.getRightHeaderGroups()], (left, center, right) => {\n        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;\n\n        return [...((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : []), ...((_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : []), ...((_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : [])].map(header => {\n          return header.getLeafHeaders();\n        }).flat();\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n        debug: () => {\n          var _table$options$debugA16;\n\n          return (_table$options$debugA16 = table.options.debugAll) != null ? _table$options$debugA16 : table.options.debugHeaders;\n        }\n      })\n    };\n  }\n};\nfunction buildHeaderGroups(allColumns, columnsToGroup, table, headerFamily) {\n  var _headerGroups$0$heade, _headerGroups$;\n\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n  let maxDepth = 0;\n\n  const findMaxDepth = function (columns, depth) {\n    if (depth === void 0) {\n      depth = 1;\n    }\n\n    maxDepth = Math.max(maxDepth, depth);\n    columns.filter(column => column.getIsVisible()).forEach(column => {\n      var _column$columns;\n\n      if ((_column$columns = column.columns) != null && _column$columns.length) {\n        findMaxDepth(column.columns, depth + 1);\n      }\n    }, 0);\n  };\n\n  findMaxDepth(allColumns);\n  let headerGroups = [];\n\n  const createHeaderGroup = (headersToGroup, depth) => {\n    // The header group we are creating\n    const headerGroup = {\n      depth,\n      id: [headerFamily, \"\" + depth].filter(Boolean).join('_'),\n      headers: []\n    }; // The parent columns we're going to scan next\n\n    const pendingParentHeaders = []; // Scan each column for parents\n\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0];\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth;\n      let column;\n      let isPlaceholder = false;\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent;\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column;\n        isPlaceholder = true;\n      }\n\n      if (latestPendingParentHeader && (latestPendingParentHeader == null ? void 0 : latestPendingParentHeader.column) === column) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup);\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder ? \"\" + pendingParentHeaders.filter(d => d.column === column).length : undefined,\n          depth,\n          index: pendingParentHeaders.length\n        }); // Add the headerToGroup as a subHeader of the new header\n\n        header.subHeaders.push(headerToGroup); // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n\n        pendingParentHeaders.push(header);\n      }\n\n      headerGroup.headers.push(headerToGroup);\n      headerToGroup.headerGroup = headerGroup;\n    });\n    headerGroups.push(headerGroup);\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1);\n    }\n  };\n\n  const bottomHeaders = columnsToGroup.map((column, index) => createHeader(table, column, {\n    depth: maxDepth,\n    index\n  }));\n  createHeaderGroup(bottomHeaders, maxDepth - 1);\n  headerGroups.reverse(); // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = headers => {\n    const filteredHeaders = headers.filter(header => header.column.getIsVisible());\n    return filteredHeaders.map(header => {\n      let colSpan = 0;\n      let rowSpan = 0;\n      let childRowSpans = [0];\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = [];\n        recurseHeadersForSpans(header.subHeaders).forEach(_ref => {\n          let {\n            colSpan: childColSpan,\n            rowSpan: childRowSpan\n          } = _ref;\n          colSpan += childColSpan;\n          childRowSpans.push(childRowSpan);\n        });\n      } else {\n        colSpan = 1;\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans);\n      rowSpan = rowSpan + minChildRowSpan;\n      header.colSpan = colSpan;\n      header.rowSpan = rowSpan;\n      return {\n        colSpan,\n        rowSpan\n      };\n    });\n  };\n\n  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);\n  return headerGroups;\n}\n\n//\nconst defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER\n};\n\nconst getDefaultColumnSizingInfoState = () => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: []\n});\n\nconst ColumnSizing = {\n  getDefaultColumnDef: () => {\n    return defaultColumnSizing;\n  },\n  getInitialState: state => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getSize: () => {\n        var _column$columnDef$min, _ref, _column$columnDef$max;\n\n        const columnSize = table.getState().columnSizing[column.id];\n        return Math.min(Math.max((_column$columnDef$min = column.columnDef.minSize) != null ? _column$columnDef$min : defaultColumnSizing.minSize, (_ref = columnSize != null ? columnSize : column.columnDef.size) != null ? _ref : defaultColumnSizing.size), (_column$columnDef$max = column.columnDef.maxSize) != null ? _column$columnDef$max : defaultColumnSizing.maxSize);\n      },\n      getStart: position => {\n        const columns = !position ? table.getVisibleLeafColumns() : position === 'left' ? table.getLeftVisibleLeafColumns() : table.getRightVisibleLeafColumns();\n        const index = columns.findIndex(d => d.id === column.id);\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1];\n          return prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize();\n        }\n\n        return 0;\n      },\n      resetSize: () => {\n        table.setColumnSizing(_ref2 => {\n          let {\n            [column.id]: _,\n            ...rest\n          } = _ref2;\n          return rest;\n        });\n      },\n      getCanResize: () => {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableResizing) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnResizing) != null ? _table$options$enable : true);\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id;\n      }\n    };\n  },\n  createHeader: (header, table) => {\n    return {\n      getSize: () => {\n        let sum = 0;\n\n        const recurse = header => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse);\n          } else {\n            var _header$column$getSiz;\n\n            sum += (_header$column$getSiz = header.column.getSize()) != null ? _header$column$getSiz : 0;\n          }\n        };\n\n        recurse(header);\n        return sum;\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader = header.headerGroup.headers[header.index - 1];\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize();\n        }\n\n        return 0;\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id);\n        const canResize = column.getCanResize();\n        return e => {\n          if (!canResize) {\n            return;\n          }\n          e.persist == null ? void 0 : e.persist();\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return;\n            }\n          }\n\n          const startSize = header.getSize();\n          const columnSizingStart = header ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()]) : [[column.id, column.getSize()]];\n          const clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;\n\n          const updateOffset = (eventType, clientXPos) => {\n            if (typeof clientXPos !== 'number') {\n              return;\n            }\n\n            let newColumnSizing = {};\n            table.setColumnSizingInfo(old => {\n              var _old$startOffset, _old$startSize;\n\n              const deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);\n              const deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);\n              old.columnSizingStart.forEach(_ref3 => {\n                let [columnId, headerSize] = _ref3;\n                newColumnSizing[columnId] = Math.round(Math.max(headerSize + headerSize * deltaPercentage, 0) * 100) / 100;\n              });\n              return { ...old,\n                deltaOffset,\n                deltaPercentage\n              };\n            });\n\n            if (table.options.columnResizeMode === 'onChange' || eventType === 'end') {\n              table.setColumnSizing(old => ({ ...old,\n                ...newColumnSizing\n              }));\n            }\n          };\n\n          const onMove = clientXPos => updateOffset('move', clientXPos);\n\n          const onEnd = clientXPos => {\n            updateOffset('end', clientXPos);\n            table.setColumnSizingInfo(old => ({ ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: []\n            }));\n          };\n\n          const mouseEvents = {\n            moveHandler: e => onMove(e.clientX),\n            upHandler: e => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler);\n              document.removeEventListener('mouseup', mouseEvents.upHandler);\n              onEnd(e.clientX);\n            }\n          };\n          const passiveIfSupported = passiveEventSupported() ? {\n            passive: false\n          } : false;\n\n          if (isTouchStartEvent(e)) ; else {\n            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);\n            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);\n          }\n\n          table.setColumnSizingInfo(old => ({ ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id\n          }));\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange == null ? void 0 : table.options.onColumnSizingChange(updater),\n      setColumnSizingInfo: updater => table.options.onColumnSizingInfoChange == null ? void 0 : table.options.onColumnSizingInfoChange(updater),\n      resetColumnSizing: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnSizing(defaultState ? {} : (_table$initialState$c = table.initialState.columnSizing) != null ? _table$initialState$c : {});\n      },\n      resetHeaderSizeInfo: defaultState => {\n        var _table$initialState$c2;\n\n        table.setColumnSizingInfo(defaultState ? getDefaultColumnSizingInfoState() : (_table$initialState$c2 = table.initialState.columnSizingInfo) != null ? _table$initialState$c2 : getDefaultColumnSizingInfoState());\n      },\n      getTotalSize: () => {\n        var _table$getHeaderGroup, _table$getHeaderGroup2;\n\n        return (_table$getHeaderGroup = (_table$getHeaderGroup2 = table.getHeaderGroups()[0]) == null ? void 0 : _table$getHeaderGroup2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getHeaderGroup : 0;\n      },\n      getLeftTotalSize: () => {\n        var _table$getLeftHeaderG, _table$getLeftHeaderG2;\n\n        return (_table$getLeftHeaderG = (_table$getLeftHeaderG2 = table.getLeftHeaderGroups()[0]) == null ? void 0 : _table$getLeftHeaderG2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getLeftHeaderG : 0;\n      },\n      getCenterTotalSize: () => {\n        var _table$getCenterHeade, _table$getCenterHeade2;\n\n        return (_table$getCenterHeade = (_table$getCenterHeade2 = table.getCenterHeaderGroups()[0]) == null ? void 0 : _table$getCenterHeade2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getCenterHeade : 0;\n      },\n      getRightTotalSize: () => {\n        var _table$getRightHeader, _table$getRightHeader2;\n\n        return (_table$getRightHeader = (_table$getRightHeader2 = table.getRightHeaderGroups()[0]) == null ? void 0 : _table$getRightHeader2.headers.reduce((sum, header) => {\n          return sum + header.getSize();\n        }, 0)) != null ? _table$getRightHeader : 0;\n      }\n    };\n  }\n};\nlet passiveSupported = null;\nfunction passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported;\n  let supported = false;\n\n  try {\n    const options = {\n      get passive() {\n        supported = true;\n        return false;\n      }\n\n    };\n\n    const noop = () => {};\n\n    window.addEventListener('test', noop, options);\n    window.removeEventListener('test', noop);\n  } catch (err) {\n    supported = false;\n  }\n\n  passiveSupported = supported;\n  return passiveSupported;\n}\n\nfunction isTouchStartEvent(e) {\n  return e.type === 'touchstart';\n}\n\n//\nconst Expanding = {\n  getInitialState: state => {\n    return {\n      expanded: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetExpanded: () => {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetExpanded) != null ? _ref : !table.options.manualExpanding) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetExpanded();\n            queued = false;\n          });\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange == null ? void 0 : table.options.onExpandedChange(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded != null ? expanded : !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true);\n        } else {\n          table.setExpanded({});\n        }\n      },\n      resetExpanded: defaultState => {\n        var _table$initialState$e, _table$initialState;\n\n        table.setExpanded(defaultState ? {} : (_table$initialState$e = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.expanded) != null ? _table$initialState$e : {});\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand());\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return e => {\n          e.persist == null ? void 0 : e.persist();\n          table.toggleAllRowsExpanded();\n        };\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded;\n        return expanded === true || Object.values(expanded).some(Boolean);\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded; // If expanded is true, save some cycles and return true\n\n        if (typeof expanded === 'boolean') {\n          return expanded === true;\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false;\n        } // If any row is not expanded, return false\n\n\n        if (table.getRowModel().flatRows.some(row => row.getIsExpanded())) {\n          return false;\n        } // They must all be expanded :shrug:\n\n\n        return true;\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0;\n        const rowIds = table.getState().expanded === true ? Object.keys(table.getRowModel().rowsById) : Object.keys(table.getState().expanded);\n        rowIds.forEach(id => {\n          const splitId = id.split('.');\n          maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table);\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel();\n        }\n\n        return table._getExpandedRowModel();\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          var _expanded;\n\n          const exists = old === true ? true : !!(old != null && old[row.id]);\n          let oldExpanded = {};\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true;\n            });\n          } else {\n            oldExpanded = old;\n          }\n\n          expanded = (_expanded = expanded) != null ? _expanded : !exists;\n\n          if (!exists && expanded) {\n            return { ...oldExpanded,\n              [row.id]: true\n            };\n          }\n\n          if (exists && !expanded) {\n            const {\n              [row.id]: _,\n              ...rest\n            } = oldExpanded;\n            return rest;\n          }\n\n          return old;\n        });\n      },\n      getIsExpanded: () => {\n        var _table$options$getIsR;\n\n        const expanded = table.getState().expanded;\n        return !!((_table$options$getIsR = table.options.getIsRowExpanded == null ? void 0 : table.options.getIsRowExpanded(row)) != null ? _table$options$getIsR : expanded === true || (expanded == null ? void 0 : expanded[row.id]));\n      },\n      getCanExpand: () => {\n        var _table$options$getRow, _table$options$enable, _row$subRows;\n\n        return ((_table$options$getRow = table.options.getRowCanExpand == null ? void 0 : table.options.getRowCanExpand(row)) != null ? _table$options$getRow : true) && ((_table$options$enable = table.options.enableExpanding) != null ? _table$options$enable : true) && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand();\n        return () => {\n          if (!canExpand) return;\n          row.toggleExpanded();\n        };\n      }\n    };\n  }\n};\n\nconst includesString = (row, columnId, filterValue) => {\n  var _row$getValue;\n\n  const search = filterValue.toLowerCase();\n  return (_row$getValue = row.getValue(columnId)) == null ? void 0 : _row$getValue.toLowerCase().includes(search);\n};\n\nincludesString.autoRemove = val => testFalsey(val);\n\nconst includesStringSensitive = (row, columnId, filterValue) => {\n  var _row$getValue2;\n\n  return (_row$getValue2 = row.getValue(columnId)) == null ? void 0 : _row$getValue2.includes(filterValue);\n};\n\nincludesStringSensitive.autoRemove = val => testFalsey(val);\n\nconst equalsString = (row, columnId, filterValue) => {\n  var _row$getValue3;\n\n  return ((_row$getValue3 = row.getValue(columnId)) == null ? void 0 : _row$getValue3.toLowerCase()) === filterValue.toLowerCase();\n};\n\nequalsString.autoRemove = val => testFalsey(val);\n\nconst arrIncludes = (row, columnId, filterValue) => {\n  var _row$getValue4;\n\n  return (_row$getValue4 = row.getValue(columnId)) == null ? void 0 : _row$getValue4.includes(filterValue);\n};\n\narrIncludes.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesAll = (row, columnId, filterValue) => {\n  return !filterValue.some(val => {\n    var _row$getValue5;\n\n    return !((_row$getValue5 = row.getValue(columnId)) != null && _row$getValue5.includes(val));\n  });\n};\n\narrIncludesAll.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst arrIncludesSome = (row, columnId, filterValue) => {\n  return filterValue.some(val => {\n    var _row$getValue6;\n\n    return (_row$getValue6 = row.getValue(columnId)) == null ? void 0 : _row$getValue6.includes(val);\n  });\n};\n\narrIncludesSome.autoRemove = val => testFalsey(val) || !(val != null && val.length);\n\nconst equals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) === filterValue;\n};\n\nequals.autoRemove = val => testFalsey(val);\n\nconst weakEquals = (row, columnId, filterValue) => {\n  return row.getValue(columnId) == filterValue;\n};\n\nweakEquals.autoRemove = val => testFalsey(val);\n\nconst inNumberRange = (row, columnId, filterValue) => {\n  let [min, max] = filterValue;\n  const rowValue = row.getValue(columnId);\n  return rowValue >= min && rowValue <= max;\n};\n\ninNumberRange.resolveFilterValue = val => {\n  let [unsafeMin, unsafeMax] = val;\n  let parsedMin = typeof unsafeMin !== 'number' ? parseFloat(unsafeMin) : unsafeMin;\n  let parsedMax = typeof unsafeMax !== 'number' ? parseFloat(unsafeMax) : unsafeMax;\n  let min = unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin;\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax;\n\n  if (min > max) {\n    const temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return [min, max];\n};\n\ninNumberRange.autoRemove = val => testFalsey(val) || testFalsey(val[0]) && testFalsey(val[1]); // Export\n\n\nconst filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange\n};\n\n// Utils\nfunction testFalsey(val) {\n  return val === undefined || val === null || val === '';\n}\n\n//\nconst Filters = {\n  getDefaultColumnDef: () => {\n    return {\n      filterFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        var _table$getCoreRowMode, _table$getCoreRowMode2;\n\n        const value = (_table$getCoreRowMode = table.getCoreRowModel().flatRows[0]) == null ? void 0 : (_table$getCoreRowMode2 = _table$getCoreRowMode._getAllCellsByColumnId()[column.id]) == null ? void 0 : _table$getCoreRowMode2.getValue();\n        return typeof value === 'string';\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return filterFns.includesString;\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange;\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals;\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals;\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes;\n        }\n\n        return filterFns.weakEquals;\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn() : filterFns[column.columnDef.filterFn];\n      },\n      getCanFilter: () => {\n        var _column$columnDef$ena, _table$options$enable, _table$options$enable2;\n\n        return ((_column$columnDef$ena = column.columnDef.enableColumnFilter) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableColumnFilters) != null ? _table$options$enable : true) && ((_table$options$enable2 = table.options.enableFilters) != null ? _table$options$enable2 : true) && !!column.accessorFn;\n      },\n      getCanGlobalFilter: () => {\n        var _column$columnDef$ena2, _table$options$enable3, _table$options$enable4, _table$options$getCol;\n\n        return ((_column$columnDef$ena2 = column.columnDef.enableGlobalFilter) != null ? _column$columnDef$ena2 : true) && ((_table$options$enable3 = table.options.enableGlobalFilter) != null ? _table$options$enable3 : true) && ((_table$options$enable4 = table.options.enableFilters) != null ? _table$options$enable4 : true) && ((_table$options$getCol = table.options.getColumnCanGlobalFilter == null ? void 0 : table.options.getColumnCanGlobalFilter(column)) != null ? _table$options$getCol : true) && !!column.accessorFn;\n      },\n      getIsFiltered: () => column.getFilterIndex() > -1,\n      getFilterValue: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = table.getState().columnFilters) == null ? void 0 : (_table$getState$colum2 = _table$getState$colum.find(d => d.id === column.id)) == null ? void 0 : _table$getState$colum2.value;\n      },\n      getFilterIndex: () => {\n        var _table$getState$colum3, _table$getState$colum4;\n\n        return (_table$getState$colum3 = (_table$getState$colum4 = table.getState().columnFilters) == null ? void 0 : _table$getState$colum4.findIndex(d => d.id === column.id)) != null ? _table$getState$colum3 : -1;\n      },\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn();\n          const previousfilter = old == null ? void 0 : old.find(d => d.id === column.id);\n          const newFilter = functionalUpdate(value, previousfilter ? previousfilter.value : undefined); //\n\n          if (shouldAutoRemoveFilter(filterFn, newFilter, column)) {\n            var _old$filter;\n\n            return (_old$filter = old == null ? void 0 : old.filter(d => d.id !== column.id)) != null ? _old$filter : [];\n          }\n\n          const newFilterObj = {\n            id: column.id,\n            value: newFilter\n          };\n\n          if (previousfilter) {\n            var _old$map;\n\n            return (_old$map = old == null ? void 0 : old.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj;\n              }\n\n              return d;\n            })) != null ? _old$map : [];\n          }\n\n          if (old != null && old.length) {\n            return [...old, newFilterObj];\n          }\n\n          return [newFilterObj];\n        });\n      },\n      _getFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return column._getFacetedRowModel();\n      },\n      _getFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return column._getFacetedUniqueValues();\n      },\n      _getFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined;\n        }\n\n        return column._getFacetedMinMaxValues();\n      } // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {}\n    };\n  },\n  createTable: table => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString;\n      },\n      getGlobalFilterFn: () => {\n        const {\n          globalFilterFn: globalFilterFn\n        } = table.options;\n        return isFunction(globalFilterFn) ? globalFilterFn : globalFilterFn === 'auto' ? table.getGlobalAutoFilterFn() : filterFns[globalFilterFn];\n      },\n      setColumnFilters: updater => {\n        const leafColumns = table.getAllLeafColumns();\n\n        const updateFn = old => {\n          var _functionalUpdate;\n\n          return (_functionalUpdate = functionalUpdate(updater, old)) == null ? void 0 : _functionalUpdate.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id);\n\n            if (column) {\n              const filterFn = column.getFilterFn();\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false;\n              }\n            }\n\n            return true;\n          });\n        };\n\n        table.options.onColumnFiltersChange == null ? void 0 : table.options.onColumnFiltersChange(updateFn);\n      },\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange == null ? void 0 : table.options.onGlobalFilterChange(updater);\n      },\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(defaultState ? undefined : table.initialState.globalFilter);\n      },\n      resetColumnFilters: defaultState => {\n        var _table$initialState$c, _table$initialState;\n\n        table.setColumnFilters(defaultState ? [] : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnFilters) != null ? _table$initialState$c : []);\n      },\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      _getFilteredRowModel: table.options.getFilteredRowModel && table.options.getFilteredRowModel(table),\n      getFilteredRowModel: () => {\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getFilteredRowModel();\n      },\n      _getGlobalFacetedRowModel: table.options.getFacetedRowModel && table.options.getFacetedRowModel(table, '__global__'),\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel();\n        }\n\n        return table._getGlobalFacetedRowModel();\n      },\n      _getGlobalFacetedUniqueValues: table.options.getFacetedUniqueValues && table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map();\n        }\n\n        return table._getGlobalFacetedUniqueValues();\n      },\n      _getGlobalFacetedMinMaxValues: table.options.getFacetedMinMaxValues && table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return;\n        }\n\n        return table._getGlobalFacetedMinMaxValues();\n      }\n    };\n  }\n};\nfunction shouldAutoRemoveFilter(filterFn, value, column) {\n  return (filterFn && filterFn.autoRemove ? filterFn.autoRemove(value, column) : false) || typeof value === 'undefined' || typeof value === 'string' && !value;\n}\n\nconst sum = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId);\n    return sum + (typeof nextValue === 'number' ? nextValue : 0);\n  }, 0);\n};\n\nconst min = (columnId, _leafRows, childRows) => {\n  let min;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (min > value || min === undefined && value >= value)) {\n      min = value;\n    }\n  });\n  return min;\n};\n\nconst max = (columnId, _leafRows, childRows) => {\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null && (max < value || max === undefined && value >= value)) {\n      max = value;\n    }\n  });\n  return max;\n};\n\nconst extent = (columnId, _leafRows, childRows) => {\n  let min;\n  let max;\n  childRows.forEach(row => {\n    const value = row.getValue(columnId);\n\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value;\n      } else {\n        if (min > value) min = value;\n        if (max < value) max = value;\n      }\n    }\n  });\n  return [min, max];\n};\n\nconst mean = (columnId, leafRows) => {\n  let count = 0;\n  let sum = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (value != null && (value = +value) >= value) {\n      ++count, sum += value;\n    }\n  });\n  if (count) return sum / count;\n  return;\n};\n\nconst median = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return;\n  }\n\n  let min = 0;\n  let max = 0;\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId);\n\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n};\n\nconst unique = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values());\n};\n\nconst uniqueCount = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size;\n};\n\nconst count = (_columnId, leafRows) => {\n  return leafRows.length;\n};\n\nconst aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count\n};\n\n//\nconst Grouping = {\n  getDefaultColumnDef: () => {\n    return {\n      aggregatedCell: props => {\n        var _toString, _props$getValue;\n\n        return (_toString = (_props$getValue = props.getValue()) == null ? void 0 : _props$getValue.toString == null ? void 0 : _props$getValue.toString()) != null ? _toString : null;\n      },\n      aggregationFn: 'auto'\n    };\n  },\n  getInitialState: state => {\n    return {\n      grouping: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder'\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old != null && old.includes(column.id)) {\n            return old.filter(d => d !== column.id);\n          }\n\n          return [...(old != null ? old : []), column.id];\n        });\n      },\n      getCanGroup: () => {\n        var _ref, _ref2, _ref3, _column$columnDef$ena;\n\n        return (_ref = (_ref2 = (_ref3 = (_column$columnDef$ena = column.columnDef.enableGrouping) != null ? _column$columnDef$ena : true) != null ? _ref3 : table.options.enableGrouping) != null ? _ref2 : true) != null ? _ref : !!column.accessorFn;\n      },\n      getIsGrouped: () => {\n        var _table$getState$group;\n\n        return (_table$getState$group = table.getState().grouping) == null ? void 0 : _table$getState$group.includes(column.id);\n      },\n      getGroupedIndex: () => {\n        var _table$getState$group2;\n\n        return (_table$getState$group2 = table.getState().grouping) == null ? void 0 : _table$getState$group2.indexOf(column.id);\n      },\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup();\n        return () => {\n          if (!canGroup) return;\n          column.toggleGrouping();\n        };\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum;\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent;\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.aggregationFn) ? column.columnDef.aggregationFn : column.columnDef.aggregationFn === 'auto' ? column.getAutoAggregationFn() : aggregationFns[column.columnDef.aggregationFn];\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange == null ? void 0 : table.options.onGroupingChange(updater),\n      resetGrouping: defaultState => {\n        var _table$initialState$g, _table$initialState;\n\n        table.setGrouping(defaultState ? [] : (_table$initialState$g = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.grouping) != null ? _table$initialState$g : []);\n      },\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table);\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel();\n        }\n\n        return table._getGroupedRowModel();\n      }\n    };\n  },\n  createRow: row => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {}\n    };\n  },\n  createCell: (cell, column, row, table) => {\n\n    return {\n      getIsGrouped: () => column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () => {\n        var _row$subRows;\n\n        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!((_row$subRows = row.subRows) != null && _row$subRows.length);\n      }\n    };\n  }\n};\nfunction orderColumns(leafColumns, grouping, groupedColumnMode) {\n  if (!(grouping != null && grouping.length) || !groupedColumnMode) {\n    return leafColumns;\n  }\n\n  const nonGroupingColumns = leafColumns.filter(col => !grouping.includes(col.id));\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns;\n  }\n\n  const groupingColumns = grouping.map(g => leafColumns.find(col => col.id === g)).filter(Boolean);\n  return [...groupingColumns, ...nonGroupingColumns];\n}\n\n//\nconst Ordering = {\n  getInitialState: state => {\n    return {\n      columnOrder: [],\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table)\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange == null ? void 0 : table.options.onColumnOrderChange(updater),\n      resetColumnOrder: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnOrder(defaultState ? [] : (_table$initialState$c = table.initialState.columnOrder) != null ? _table$initialState$c : []);\n      },\n      _getOrderColumnsFn: memo(() => [table.getState().columnOrder, table.getState().grouping, table.options.groupedColumnMode], (columnOrder, grouping, groupedColumnMode) => columns => {\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        let orderedColumns = []; // If there is no order, return the normal columns\n\n        if (!(columnOrder != null && columnOrder.length)) {\n          orderedColumns = columns;\n        } else {\n          const columnOrderCopy = [...columnOrder]; // If there is an order, make a copy of the columns\n\n          const columnsCopy = [...columns]; // And make a new ordered array of the columns\n          // Loop over the columns and place them in order into the new array\n\n          while (columnsCopy.length && columnOrderCopy.length) {\n            const targetColumnId = columnOrderCopy.shift();\n            const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId);\n\n            if (foundIndex > -1) {\n              orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]);\n            }\n          } // If there are any columns left, add them to the end\n\n\n          orderedColumns = [...orderedColumns, ...columnsCopy];\n        }\n\n        return orderColumns(orderedColumns, grouping, groupedColumnMode);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn' // debug: () => table.options.debugAll ?? table.options.debugTable,\n\n      })\n    };\n  }\n};\n\n//\nconst defaultPageIndex = 0;\nconst defaultPageSize = 10;\n\nconst getDefaultPaginationState = () => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize\n});\n\nconst Pagination = {\n  getInitialState: state => {\n    return { ...state,\n      pagination: { ...getDefaultPaginationState(),\n        ...(state == null ? void 0 : state.pagination)\n      }\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table)\n    };\n  },\n  createTable: table => {\n    let registered = false;\n    let queued = false;\n    return {\n      _autoResetPageIndex: () => {\n        var _ref, _table$options$autoRe;\n\n        if (!registered) {\n          table._queue(() => {\n            registered = true;\n          });\n\n          return;\n        }\n\n        if ((_ref = (_table$options$autoRe = table.options.autoResetAll) != null ? _table$options$autoRe : table.options.autoResetPageIndex) != null ? _ref : !table.options.manualPagination) {\n          if (queued) return;\n          queued = true;\n\n          table._queue(() => {\n            table.resetPageIndex();\n            queued = false;\n          });\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater = old => {\n          let newState = functionalUpdate(updater, old);\n          return newState;\n        };\n\n        return table.options.onPaginationChange == null ? void 0 : table.options.onPaginationChange(safeUpdater);\n      },\n      resetPagination: defaultState => {\n        var _table$initialState$p;\n\n        table.setPagination(defaultState ? getDefaultPaginationState() : (_table$initialState$p = table.initialState.pagination) != null ? _table$initialState$p : getDefaultPaginationState());\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex);\n          const maxPageIndex = typeof table.options.pageCount === 'undefined' || table.options.pageCount === -1 ? Number.MAX_SAFE_INTEGER : table.options.pageCount - 1;\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex);\n          return { ...old,\n            pageIndex\n          };\n        });\n      },\n      resetPageIndex: defaultState => {\n        var _table$initialState$p2, _table$initialState, _table$initialState$p3;\n\n        table.setPageIndex(defaultState ? defaultPageIndex : (_table$initialState$p2 = (_table$initialState = table.initialState) == null ? void 0 : (_table$initialState$p3 = _table$initialState.pagination) == null ? void 0 : _table$initialState$p3.pageIndex) != null ? _table$initialState$p2 : defaultPageIndex);\n      },\n      resetPageSize: defaultState => {\n        var _table$initialState$p4, _table$initialState2, _table$initialState2$;\n\n        table.setPageSize(defaultState ? defaultPageSize : (_table$initialState$p4 = (_table$initialState2 = table.initialState) == null ? void 0 : (_table$initialState2$ = _table$initialState2.pagination) == null ? void 0 : _table$initialState2$.pageSize) != null ? _table$initialState$p4 : defaultPageSize);\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize));\n          const topRowIndex = old.pageSize * old.pageIndex;\n          const pageIndex = Math.floor(topRowIndex / pageSize);\n          return { ...old,\n            pageIndex,\n            pageSize\n          };\n        });\n      },\n      setPageCount: updater => table.setPagination(old => {\n        var _table$options$pageCo;\n\n        let newPageCount = functionalUpdate(updater, (_table$options$pageCo = table.options.pageCount) != null ? _table$options$pageCo : -1);\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount);\n        }\n\n        return { ...old,\n          pageCount: newPageCount\n        };\n      }),\n      getPageOptions: memo(() => [table.getPageCount()], pageCount => {\n        let pageOptions = [];\n\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i);\n        }\n\n        return pageOptions;\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n      getCanNextPage: () => {\n        const {\n          pageIndex\n        } = table.getState().pagination;\n        const pageCount = table.getPageCount();\n\n        if (pageCount === -1) {\n          return true;\n        }\n\n        if (pageCount === 0) {\n          return false;\n        }\n\n        return pageIndex < pageCount - 1;\n      },\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1);\n      },\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1;\n        });\n      },\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (!table._getPaginationRowModel && table.options.getPaginationRowModel) {\n          table._getPaginationRowModel = table.options.getPaginationRowModel(table);\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel();\n        }\n\n        return table._getPaginationRowModel();\n      },\n      getPageCount: () => {\n        var _table$options$pageCo2;\n\n        return (_table$options$pageCo2 = table.options.pageCount) != null ? _table$options$pageCo2 : Math.ceil(table.getPrePaginationRowModel().rows.length / table.getState().pagination.pageSize);\n      }\n    };\n  }\n};\n\n//\nconst getDefaultPinningState = () => ({\n  left: [],\n  right: []\n});\n\nconst Pinning = {\n  getInitialState: state => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      pin: position => {\n        const columnIds = column.getLeafColumns().map(d => d.id).filter(Boolean);\n        table.setColumnPinning(old => {\n          var _old$left3, _old$right3;\n\n          if (position === 'right') {\n            var _old$left, _old$right;\n\n            return {\n              left: ((_old$left = old == null ? void 0 : old.left) != null ? _old$left : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n              right: [...((_old$right = old == null ? void 0 : old.right) != null ? _old$right : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds]\n            };\n          }\n\n          if (position === 'left') {\n            var _old$left2, _old$right2;\n\n            return {\n              left: [...((_old$left2 = old == null ? void 0 : old.left) != null ? _old$left2 : []).filter(d => !(columnIds != null && columnIds.includes(d))), ...columnIds],\n              right: ((_old$right2 = old == null ? void 0 : old.right) != null ? _old$right2 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n            };\n          }\n\n          return {\n            left: ((_old$left3 = old == null ? void 0 : old.left) != null ? _old$left3 : []).filter(d => !(columnIds != null && columnIds.includes(d))),\n            right: ((_old$right3 = old == null ? void 0 : old.right) != null ? _old$right3 : []).filter(d => !(columnIds != null && columnIds.includes(d)))\n          };\n        });\n      },\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns();\n        return leafColumns.some(d => {\n          var _d$columnDef$enablePi, _table$options$enable;\n\n          return ((_d$columnDef$enablePi = d.columnDef.enablePinning) != null ? _d$columnDef$enablePi : true) && ((_table$options$enable = table.options.enablePinning) != null ? _table$options$enable : true);\n        });\n      },\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id);\n        const {\n          left,\n          right\n        } = table.getState().columnPinning;\n        const isLeft = leafColumnIds.some(d => left == null ? void 0 : left.includes(d));\n        const isRight = leafColumnIds.some(d => right == null ? void 0 : right.includes(d));\n        return isLeft ? 'left' : isRight ? 'right' : false;\n      },\n      getPinnedIndex: () => {\n        var _table$getState$colum, _table$getState$colum2, _table$getState$colum3;\n\n        const position = column.getIsPinned();\n        return position ? (_table$getState$colum = (_table$getState$colum2 = table.getState().columnPinning) == null ? void 0 : (_table$getState$colum3 = _table$getState$colum2[position]) == null ? void 0 : _table$getState$colum3.indexOf(column.id)) != null ? _table$getState$colum : -1 : 0;\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      getCenterVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allCells, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allCells.filter(d => !leftAndRight.includes(d.column.id));\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getCenterVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getLeftVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.left,,], (allCells, left) => {\n        const cells = (left != null ? left : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      }),\n      getRightVisibleCells: memo(() => [row._getAllVisibleCells(), table.getState().columnPinning.right], (allCells, right) => {\n        const cells = (right != null ? right : []).map(columnId => allCells.find(cell => cell.column.id === columnId)).filter(Boolean).map(d => ({ ...d,\n          position: 'left'\n        }));\n        return cells;\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    return {\n      setColumnPinning: updater => table.options.onColumnPinningChange == null ? void 0 : table.options.onColumnPinningChange(updater),\n      resetColumnPinning: defaultState => {\n        var _table$initialState$c, _table$initialState;\n\n        return table.setColumnPinning(defaultState ? getDefaultPinningState() : (_table$initialState$c = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.columnPinning) != null ? _table$initialState$c : getDefaultPinningState());\n      },\n      getIsSomeColumnsPinned: position => {\n        var _pinningState$positio;\n\n        const pinningState = table.getState().columnPinning;\n\n        if (!position) {\n          var _pinningState$left, _pinningState$right;\n\n          return Boolean(((_pinningState$left = pinningState.left) == null ? void 0 : _pinningState$left.length) || ((_pinningState$right = pinningState.right) == null ? void 0 : _pinningState$right.length));\n        }\n\n        return Boolean((_pinningState$positio = pinningState[position]) == null ? void 0 : _pinningState$positio.length);\n      },\n      getLeftLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left], (allColumns, left) => {\n        return (left != null ? left : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n        debug: () => {\n          var _table$options$debugA4;\n\n          return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n        }\n      }),\n      getRightLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.right], (allColumns, right) => {\n        return (right != null ? right : []).map(columnId => allColumns.find(column => column.id === columnId)).filter(Boolean);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n        debug: () => {\n          var _table$options$debugA5;\n\n          return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n        }\n      }),\n      getCenterLeafColumns: memo(() => [table.getAllLeafColumns(), table.getState().columnPinning.left, table.getState().columnPinning.right], (allColumns, left, right) => {\n        const leftAndRight = [...(left != null ? left : []), ...(right != null ? right : [])];\n        return allColumns.filter(d => !leftAndRight.includes(d.id));\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n        debug: () => {\n          var _table$options$debugA6;\n\n          return (_table$options$debugA6 = table.options.debugAll) != null ? _table$options$debugA6 : table.options.debugColumns;\n        }\n      })\n    };\n  }\n};\n\n//\nconst RowSelection = {\n  getInitialState: state => {\n    return {\n      rowSelection: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n\n    };\n  },\n  createTable: table => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange == null ? void 0 : table.options.onRowSelectionChange(updater),\n      resetRowSelection: defaultState => {\n        var _table$initialState$r;\n\n        return table.setRowSelection(defaultState ? {} : (_table$initialState$r = table.initialState.rowSelection) != null ? _table$initialState$r : {});\n      },\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected();\n          const rowSelection = { ...old\n          };\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows; // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return;\n              }\n\n              rowSelection[row.id] = true;\n            });\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id];\n            });\n          }\n\n          return rowSelection;\n        });\n      },\n      toggleAllPageRowsSelected: value => table.setRowSelection(old => {\n        const resolvedValue = typeof value !== 'undefined' ? value : !table.getIsAllPageRowsSelected();\n        const rowSelection = { ...old\n        };\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, table);\n        });\n        return rowSelection;\n      }),\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n      //   let include = false\n      //   const selectedRowIds = {}\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(() => [table.getState().rowSelection, table.getCoreRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n        }\n      }),\n      getFilteredSelectedRowModel: memo(() => [table.getState().rowSelection, table.getFilteredRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getFilteredSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugTable;\n        }\n      }),\n      getGroupedSelectedRowModel: memo(() => [table.getState().rowSelection, table.getSortedRowModel()], (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {}\n          };\n        }\n\n        return selectRowsFn(table, rowModel);\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'getGroupedSelectedRowModel',\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugTable;\n        }\n      }),\n      ///\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows = table.getPreFilteredRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllRowsSelected = Boolean(preFilteredFlatRows.length && Object.keys(rowSelection).length);\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false;\n          }\n        }\n\n        return isAllRowsSelected;\n      },\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        const {\n          rowSelection\n        } = table.getState();\n        let isAllPageRowsSelected = !!paginationFlatRows.length;\n\n        if (isAllPageRowsSelected && paginationFlatRows.some(row => !rowSelection[row.id])) {\n          isAllPageRowsSelected = false;\n        }\n\n        return isAllPageRowsSelected;\n      },\n      getIsSomeRowsSelected: () => {\n        var _table$getState$rowSe;\n\n        return !table.getIsAllRowsSelected() && !!Object.keys((_table$getState$rowSe = table.getState().rowSelection) != null ? _table$getState$rowSe : {}).length;\n      },\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows;\n        return table.getIsAllPageRowsSelected() ? false : paginationFlatRows.some(d => d.getIsSelected() || d.getIsSomeSelected());\n      },\n      getToggleAllRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllRowsSelected(e.target.checked);\n        };\n      },\n      getToggleAllPageRowsSelectedHandler: () => {\n        return e => {\n          table.toggleAllPageRowsSelected(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected();\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected;\n\n          if (isSelected === value) {\n            return old;\n          }\n\n          const selectedRowIds = { ...old\n          };\n          mutateRowIsSelected(selectedRowIds, row.id, value, table);\n          return selectedRowIds;\n        });\n      },\n      getIsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isRowSelected(row, rowSelection);\n      },\n      getIsSomeSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'some';\n      },\n      getIsAllSubRowsSelected: () => {\n        const {\n          rowSelection\n        } = table.getState();\n        return isSubRowSelected(row, rowSelection) === 'all';\n      },\n      getCanSelect: () => {\n        var _table$options$enable;\n\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row);\n        }\n\n        return (_table$options$enable = table.options.enableRowSelection) != null ? _table$options$enable : true;\n      },\n      getCanSelectSubRows: () => {\n        var _table$options$enable2;\n\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row);\n        }\n\n        return (_table$options$enable2 = table.options.enableSubRowSelection) != null ? _table$options$enable2 : true;\n      },\n      getCanMultiSelect: () => {\n        var _table$options$enable3;\n\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row);\n        }\n\n        return (_table$options$enable3 = table.options.enableMultiRowSelection) != null ? _table$options$enable3 : true;\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect();\n        return e => {\n          var _target;\n\n          if (!canSelect) return;\n          row.toggleSelected((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst mutateRowIsSelected = (selectedRowIds, id, value, table) => {\n  var _row$subRows;\n\n  const row = table.getRow(id);\n  row.getIsGrouped(); // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key]);\n    }\n\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true;\n    }\n  } else {\n    delete selectedRowIds[id];\n  } // }\n\n\n  if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row => mutateRowIsSelected(selectedRowIds, row.id, value, table));\n  }\n};\n\nfunction selectRowsFn(table, rowModel) {\n  const rowSelection = table.getState().rowSelection;\n  const newSelectedFlatRows = [];\n  const newSelectedRowsById = {}; // Filters top level and nested rows\n\n  const recurseRows = function (rows, depth) {\n\n    return rows.map(row => {\n      var _row$subRows2;\n\n      const isSelected = isRowSelected(row, rowSelection);\n\n      if (isSelected) {\n        newSelectedFlatRows.push(row);\n        newSelectedRowsById[row.id] = row;\n      }\n\n      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n        row = { ...row,\n          subRows: recurseRows(row.subRows)\n        };\n      }\n\n      if (isSelected) {\n        return row;\n      }\n    }).filter(Boolean);\n  };\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById\n  };\n}\nfunction isRowSelected(row, selection) {\n  var _selection$row$id;\n\n  return (_selection$row$id = selection[row.id]) != null ? _selection$row$id : false;\n}\nfunction isSubRowSelected(row, selection, table) {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true;\n    let someSelected = false;\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false;\n  }\n\n  return false;\n}\n\nconst reSplitAlphaNumeric = /([0-9]+)/gm;\n\nconst alphanumeric = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n};\n\nconst alphanumericCaseSensitive = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst text = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)).toLowerCase(), toString(rowB.getValue(columnId)).toLowerCase());\n}; // The text filter is more basic (less numeric support)\n// but is much faster\n\n\nconst textCaseSensitive = (rowA, rowB, columnId) => {\n  return compareBasic(toString(rowA.getValue(columnId)), toString(rowB.getValue(columnId)));\n};\n\nconst datetime = (rowA, rowB, columnId) => {\n  const a = rowA.getValue(columnId);\n  const b = rowB.getValue(columnId); // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\nconst basic = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId));\n}; // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n} // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\n\nfunction compareAlphanumeric(aStr, bStr) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean);\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    const aa = a.shift();\n    const bb = b.shift();\n    const an = parseInt(aa, 10);\n    const bn = parseInt(bb, 10);\n    const combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n} // Exports\n\n\nconst sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic\n};\n\n//\nconst Sorting = {\n  getInitialState: state => {\n    return {\n      sorting: [],\n      ...state\n    };\n  },\n  getDefaultColumnDef: () => {\n    return {\n      sortingFn: 'auto'\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: e => {\n        return e.shiftKey;\n      }\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10);\n        let isString = false;\n\n        for (const row of firstRows) {\n          const value = row == null ? void 0 : row.getValue(column.id);\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime;\n          }\n\n          if (typeof value === 'string') {\n            isString = true;\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric;\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text;\n        }\n\n        return sortingFns.basic;\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0];\n        const value = firstRow == null ? void 0 : firstRow.getValue(column.id);\n\n        if (typeof value === 'string') {\n          return 'asc';\n        }\n\n        return 'desc';\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error();\n        }\n\n        return isFunction(column.columnDef.sortingFn) ? column.columnDef.sortingFn : column.columnDef.sortingFn === 'auto' ? column.getAutoSortingFn() : sortingFns[column.columnDef.sortingFn];\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder();\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null;\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old == null ? void 0 : old.find(d => d.id === column.id);\n          const existingIndex = old == null ? void 0 : old.findIndex(d => d.id === column.id);\n          let newSorting = []; // What should we do with this sort action?\n\n          let sortAction;\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'; // Multi-mode\n\n          if (old != null && old.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'add';\n            }\n          } else {\n            // Normal mode\n            if (old != null && old.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace';\n            } else if (existingSorting) {\n              sortAction = 'toggle';\n            } else {\n              sortAction = 'replace';\n            }\n          } // Handle toggle states that will remove the sorting\n\n\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove';\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            var _table$options$maxMul;\n\n            newSorting = [...old, {\n              id: column.id,\n              desc: nextDesc\n            }]; // Take latest n columns\n\n            newSorting.splice(0, newSorting.length - ((_table$options$maxMul = table.options.maxMultiSortColCount) != null ? _table$options$maxMul : Number.MAX_SAFE_INTEGER));\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return { ...d,\n                  desc: nextDesc\n                };\n              }\n\n              return d;\n            });\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id);\n          } else {\n            newSorting = [{\n              id: column.id,\n              desc: nextDesc\n            }];\n          }\n\n          return newSorting;\n        });\n      },\n      getFirstSortDir: () => {\n        var _ref, _column$columnDef$sor;\n\n        const sortDescFirst = (_ref = (_column$columnDef$sor = column.columnDef.sortDescFirst) != null ? _column$columnDef$sor : table.options.sortDescFirst) != null ? _ref : column.getAutoSortDir() === 'desc';\n        return sortDescFirst ? 'desc' : 'asc';\n      },\n      getNextSortingOrder: multi => {\n        var _table$options$enable, _table$options$enable2;\n\n        const firstSortDirection = column.getFirstSortDir();\n        const isSorted = column.getIsSorted();\n\n        if (!isSorted) {\n          return firstSortDirection;\n        }\n\n        if (isSorted !== firstSortDirection && ((_table$options$enable = table.options.enableSortingRemoval) != null ? _table$options$enable : true) && ( // If enableSortRemove, enable in general\n        multi ? (_table$options$enable2 = table.options.enableMultiRemove) != null ? _table$options$enable2 : true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false;\n        }\n\n        return isSorted === 'desc' ? 'asc' : 'desc';\n      },\n      getCanSort: () => {\n        var _column$columnDef$ena, _table$options$enable3;\n\n        return ((_column$columnDef$ena = column.columnDef.enableSorting) != null ? _column$columnDef$ena : true) && ((_table$options$enable3 = table.options.enableSorting) != null ? _table$options$enable3 : true) && !!column.accessorFn;\n      },\n      getCanMultiSort: () => {\n        var _ref2, _column$columnDef$ena2;\n\n        return (_ref2 = (_column$columnDef$ena2 = column.columnDef.enableMultiSort) != null ? _column$columnDef$ena2 : table.options.enableMultiSort) != null ? _ref2 : !!column.accessorFn;\n      },\n      getIsSorted: () => {\n        var _table$getState$sorti;\n\n        const columnSort = (_table$getState$sorti = table.getState().sorting) == null ? void 0 : _table$getState$sorti.find(d => d.id === column.id);\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc';\n      },\n      getSortIndex: () => {\n        var _table$getState$sorti2, _table$getState$sorti3;\n\n        return (_table$getState$sorti2 = (_table$getState$sorti3 = table.getState().sorting) == null ? void 0 : _table$getState$sorti3.findIndex(d => d.id === column.id)) != null ? _table$getState$sorti2 : -1;\n      },\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old => old != null && old.length ? old.filter(d => d.id !== column.id) : []);\n      },\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort();\n        return e => {\n          if (!canSort) return;\n          e.persist == null ? void 0 : e.persist();\n          column.toggleSorting == null ? void 0 : column.toggleSorting(undefined, column.getCanMultiSort() ? table.options.isMultiSortEvent == null ? void 0 : table.options.isMultiSortEvent(e) : false);\n        };\n      }\n    };\n  },\n  createTable: table => {\n    return {\n      setSorting: updater => table.options.onSortingChange == null ? void 0 : table.options.onSortingChange(updater),\n      resetSorting: defaultState => {\n        var _table$initialState$s, _table$initialState;\n\n        table.setSorting(defaultState ? [] : (_table$initialState$s = (_table$initialState = table.initialState) == null ? void 0 : _table$initialState.sorting) != null ? _table$initialState$s : []);\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table);\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel();\n        }\n\n        return table._getSortedRowModel();\n      }\n    };\n  }\n};\n\n//\nconst Visibility = {\n  getInitialState: state => {\n    return {\n      columnVisibility: {},\n      ...state\n    };\n  },\n  getDefaultOptions: table => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table)\n    };\n  },\n  createColumn: (column, table) => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({ ...old,\n            [column.id]: value != null ? value : !column.getIsVisible()\n          }));\n        }\n      },\n      getIsVisible: () => {\n        var _table$getState$colum, _table$getState$colum2;\n\n        return (_table$getState$colum = (_table$getState$colum2 = table.getState().columnVisibility) == null ? void 0 : _table$getState$colum2[column.id]) != null ? _table$getState$colum : true;\n      },\n      getCanHide: () => {\n        var _column$columnDef$ena, _table$options$enable;\n\n        return ((_column$columnDef$ena = column.columnDef.enableHiding) != null ? _column$columnDef$ena : true) && ((_table$options$enable = table.options.enableHiding) != null ? _table$options$enable : true);\n      },\n      getToggleVisibilityHandler: () => {\n        return e => {\n          column.toggleVisibility == null ? void 0 : column.toggleVisibility(e.target.checked);\n        };\n      }\n    };\n  },\n  createRow: (row, table) => {\n    return {\n      _getAllVisibleCells: memo(() => [row.getAllCells(), table.getState().columnVisibility], cells => {\n        return cells.filter(cell => cell.column.getIsVisible());\n      }, {\n        key: process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n        debug: () => {\n          var _table$options$debugA;\n\n          return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n        }\n      }),\n      getVisibleCells: memo(() => [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()], (left, center, right) => [...left, ...center, ...right], {\n        key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n        debug: () => {\n          var _table$options$debugA2;\n\n          return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n        }\n      })\n    };\n  },\n  createTable: table => {\n    const makeVisibleColumnsMethod = (key, getColumns) => {\n      return memo(() => [getColumns(), getColumns().filter(d => d.getIsVisible()).map(d => d.id).join('_')], columns => {\n        return columns.filter(d => d.getIsVisible == null ? void 0 : d.getIsVisible());\n      }, {\n        key,\n        debug: () => {\n          var _table$options$debugA3;\n\n          return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n        }\n      });\n    };\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod('getVisibleFlatColumns', () => table.getAllFlatColumns()),\n      getVisibleLeafColumns: makeVisibleColumnsMethod('getVisibleLeafColumns', () => table.getAllLeafColumns()),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod('getLeftVisibleLeafColumns', () => table.getLeftLeafColumns()),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod('getRightVisibleLeafColumns', () => table.getRightLeafColumns()),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod('getCenterVisibleLeafColumns', () => table.getCenterLeafColumns()),\n      setColumnVisibility: updater => table.options.onColumnVisibilityChange == null ? void 0 : table.options.onColumnVisibilityChange(updater),\n      resetColumnVisibility: defaultState => {\n        var _table$initialState$c;\n\n        table.setColumnVisibility(defaultState ? {} : (_table$initialState$c = table.initialState.columnVisibility) != null ? _table$initialState$c : {});\n      },\n      toggleAllColumnsVisible: value => {\n        var _value;\n\n        value = (_value = value) != null ? _value : !table.getIsAllColumnsVisible();\n        table.setColumnVisibility(table.getAllLeafColumns().reduce((obj, column) => ({ ...obj,\n          [column.id]: !value ? !(column.getCanHide != null && column.getCanHide()) : value\n        }), {}));\n      },\n      getIsAllColumnsVisible: () => !table.getAllLeafColumns().some(column => !(column.getIsVisible != null && column.getIsVisible())),\n      getIsSomeColumnsVisible: () => table.getAllLeafColumns().some(column => column.getIsVisible == null ? void 0 : column.getIsVisible()),\n      getToggleAllColumnsVisibilityHandler: () => {\n        return e => {\n          var _target;\n\n          table.toggleAllColumnsVisible((_target = e.target) == null ? void 0 : _target.checked);\n        };\n      }\n    };\n  }\n};\n\nconst features = [Headers, Visibility, Ordering, Pinning, Filters, Sorting, Grouping, Expanding, Pagination, RowSelection, ColumnSizing]; //\n\nfunction createTable(options) {\n  var _options$initialState;\n\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...');\n  }\n\n  let table = {\n    _features: features\n  };\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));\n  }, {});\n\n  const mergeOptions = options => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options);\n    }\n\n    return { ...defaultOptions,\n      ...options\n    };\n  };\n\n  const coreInitialState = {};\n  let initialState = { ...coreInitialState,\n    ...((_options$initialState = options.initialState) != null ? _options$initialState : {})\n  };\n\n  table._features.forEach(feature => {\n    var _feature$getInitialSt;\n\n    initialState = (_feature$getInitialSt = feature.getInitialState == null ? void 0 : feature.getInitialState(initialState)) != null ? _feature$getInitialSt : initialState;\n  });\n\n  const queued = [];\n  let queuedTimeout = false;\n  const coreInstance = {\n    _features: features,\n    options: { ...defaultOptions,\n      ...options\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb);\n\n      if (!queuedTimeout) {\n        queuedTimeout = true; // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n\n        Promise.resolve().then(() => {\n          while (queued.length) {\n            queued.shift()();\n          }\n\n          queuedTimeout = false;\n        }).catch(error => setTimeout(() => {\n          throw error;\n        }));\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState);\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options);\n      table.options = mergeOptions(newOptions);\n    },\n    getState: () => {\n      return table.options.state;\n    },\n    setState: updater => {\n      table.options.onStateChange == null ? void 0 : table.options.onStateChange(updater);\n    },\n    _getRowId: (row, index, parent) => {\n      var _table$options$getRow;\n\n      return (_table$options$getRow = table.options.getRowId == null ? void 0 : table.options.getRowId(row, index, parent)) != null ? _table$options$getRow : \"\" + (parent ? [parent.id, index].join('.') : index);\n    },\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table);\n      }\n\n      return table._getCoreRowModel();\n    },\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n    getRowModel: () => {\n      return table.getPaginationRowModel();\n    },\n    getRow: id => {\n      const row = table.getRowModel().rowsById[id];\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"getRow expected an ID, but got \" + id);\n        }\n\n        throw new Error();\n      }\n\n      return row;\n    },\n    _getDefaultColumnDef: memo(() => [table.options.defaultColumn], defaultColumn => {\n      var _defaultColumn;\n\n      defaultColumn = (_defaultColumn = defaultColumn) != null ? _defaultColumn : {};\n      return {\n        header: props => props.header.column.id,\n        footer: props => props.header.column.id,\n        cell: props => {\n          var _props$renderValue$to, _props$renderValue;\n\n          return (_props$renderValue$to = (_props$renderValue = props.renderValue()) == null ? void 0 : _props$renderValue.toString == null ? void 0 : _props$renderValue.toString()) != null ? _props$renderValue$to : null;\n        },\n        ...table._features.reduce((obj, feature) => {\n          return Object.assign(obj, feature.getDefaultColumnDef == null ? void 0 : feature.getDefaultColumnDef());\n        }, {}),\n        ...defaultColumn\n      };\n    }, {\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugColumns;\n      },\n      key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef'\n    }),\n    _getColumnDefs: () => table.options.columns,\n    getAllColumns: memo(() => [table._getColumnDefs()], columnDefs => {\n      const recurseColumns = function (columnDefs, parent, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        return columnDefs.map(columnDef => {\n          const column = createColumn(table, columnDef, depth, parent);\n          column.columns = columnDef.columns ? recurseColumns(columnDef.columns, column, depth + 1) : [];\n          return column;\n        });\n      };\n\n      return recurseColumns(columnDefs);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugColumns;\n      }\n    }),\n    getAllFlatColumns: memo(() => [table.getAllColumns()], allColumns => {\n      return allColumns.flatMap(column => {\n        return column.getFlatColumns();\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n      debug: () => {\n        var _table$options$debugA3;\n\n        return (_table$options$debugA3 = table.options.debugAll) != null ? _table$options$debugA3 : table.options.debugColumns;\n      }\n    }),\n    _getAllFlatColumnsById: memo(() => [table.getAllFlatColumns()], flatColumns => {\n      return flatColumns.reduce((acc, column) => {\n        acc[column.id] = column;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n      debug: () => {\n        var _table$options$debugA4;\n\n        return (_table$options$debugA4 = table.options.debugAll) != null ? _table$options$debugA4 : table.options.debugColumns;\n      }\n    }),\n    getAllLeafColumns: memo(() => [table.getAllColumns(), table._getOrderColumnsFn()], (allColumns, orderColumns) => {\n      let leafColumns = allColumns.flatMap(column => column.getLeafColumns());\n      return orderColumns(leafColumns);\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n      debug: () => {\n        var _table$options$debugA5;\n\n        return (_table$options$debugA5 = table.options.debugAll) != null ? _table$options$debugA5 : table.options.debugColumns;\n      }\n    }),\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId];\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"[Table] Column with id \" + columnId + \" does not exist.\");\n        }\n\n        throw new Error();\n      }\n\n      return column;\n    }\n  };\n  Object.assign(table, coreInstance);\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable == null ? void 0 : feature.createTable(table));\n  });\n\n  return table;\n}\n\nfunction createCell(table, row, column, columnId) {\n  const getRenderValue = () => {\n    var _cell$getValue;\n\n    return (_cell$getValue = cell.getValue()) != null ? _cell$getValue : table.options.renderFallbackValue;\n  };\n\n  const cell = {\n    id: row.id + \"_\" + column.id,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: () => ({\n      table,\n      column,\n      row,\n      cell: cell,\n      getValue: cell.getValue,\n      renderValue: cell.renderValue\n    })\n  };\n\n  table._features.forEach(feature => {\n    Object.assign(cell, feature.createCell == null ? void 0 : feature.createCell(cell, column, row, table));\n  }, {});\n\n  return cell;\n}\n\nconst createRow = (table, id, original, rowIndex, depth, subRows) => {\n  let row = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId];\n      }\n\n      const column = table.getColumn(columnId);\n\n      if (!column.accessorFn) {\n        return undefined;\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(row.original, rowIndex);\n      return row._valuesCache[columnId];\n    },\n    renderValue: columnId => {\n      var _row$getValue;\n\n      return (_row$getValue = row.getValue(columnId)) != null ? _row$getValue : table.options.renderFallbackValue;\n    },\n    subRows: subRows != null ? subRows : [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(() => [table.getAllLeafColumns()], leafColumns => {\n      return leafColumns.map(column => {\n        return createCell(table, row, column, column.id);\n      });\n    }, {\n      key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n      debug: () => {\n        var _table$options$debugA;\n\n        return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugRows;\n      }\n    }),\n    _getAllCellsByColumnId: memo(() => [row.getAllCells()], allCells => {\n      return allCells.reduce((acc, cell) => {\n        acc[cell.column.id] = cell;\n        return acc;\n      }, {});\n    }, {\n      key: process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n      debug: () => {\n        var _table$options$debugA2;\n\n        return (_table$options$debugA2 = table.options.debugAll) != null ? _table$options$debugA2 : table.options.debugRows;\n      }\n    })\n  };\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i];\n    Object.assign(row, feature == null ? void 0 : feature.createRow == null ? void 0 : feature.createRow(row, table));\n  }\n\n  return row;\n};\n\nfunction getCoreRowModel() {\n  return table => memo(() => [table.options.data], data => {\n    const rowModel = {\n      rows: [],\n      flatRows: [],\n      rowsById: {}\n    };\n\n    const accessRows = function (originalRows, depth, parent) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      const rows = [];\n\n      for (let i = 0; i < originalRows.length; i++) {\n        // This could be an expensive check at scale, so we should move it somewhere else, but where?\n        // if (!id) {\n        //   if (process.env.NODE_ENV !== 'production') {\n        //     throw new Error(`getRowId expected an ID, but got ${id}`)\n        //   }\n        // }\n        // Make the row\n        const row = createRow(table, table._getRowId(originalRows[i], i, parent), originalRows[i], i, depth); // Keep track of every row in a flat array\n\n        rowModel.flatRows.push(row); // Also keep track of every row by its ID\n\n        rowModel.rowsById[row.id] = row; // Push table row into parent\n\n        rows.push(row); // Get the original subrows\n\n        if (table.options.getSubRows) {\n          var _row$originalSubRows;\n\n          row.originalSubRows = table.options.getSubRows(originalRows[i], i); // Then recursively access them\n\n          if ((_row$originalSubRows = row.originalSubRows) != null && _row$originalSubRows.length) {\n            row.subRows = accessRows(row.originalSubRows, depth + 1, row);\n          }\n        }\n      }\n\n      return rows;\n    };\n\n    rowModel.rows = accessRows(data);\n    return rowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction filterRows(rows, filterRowImpl, table) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table);\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table);\n}\nfunction filterRowModelFromLeafs(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {};\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    const rows = []; // Filter from children up first\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      var _row$subRows;\n\n      let row = rowsToFilter[i];\n\n      if ((_row$subRows = row.subRows) != null && _row$subRows.length) {\n        const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n        newRow.columnFilters = row.columnFilters;\n        newRow.subRows = recurseFilterRows(row.subRows);\n\n        if (!newRow.subRows.length) {\n          continue;\n        }\n\n        row = newRow;\n      }\n\n      if (filterRow(row)) {\n        rows.push(row);\n        newFilteredRowsById[row.id] = row;\n        newFilteredRowsById[i] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\nfunction filterRowModelFromRoot(rowsToFilter, filterRow, table) {\n  const newFilteredFlatRows = [];\n  const newFilteredRowsById = {}; // Filters top level and nested rows\n\n  const recurseFilterRows = function (rowsToFilter, depth) {\n\n    // Filter from parents downward first\n    const rows = []; // Apply the filter to any subRows\n\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i];\n      const pass = filterRow(row);\n\n      if (pass) {\n        var _row$subRows2;\n\n        if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {\n          const newRow = createRow(table, row.id, row.original, row.index, row.depth);\n          newRow.subRows = recurseFilterRows(row.subRows);\n          row = newRow;\n        }\n\n        rows.push(row);\n        newFilteredFlatRows.push(row);\n        newFilteredRowsById[row.id] = row;\n      }\n    }\n\n    return rows;\n  };\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById\n  };\n}\n\nfunction getFilteredRowModel() {\n  return table => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter], (rowModel, columnFilters, globalFilter) => {\n    if (!rowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      for (let i = 0; i < rowModel.flatRows.length; i++) {\n        rowModel.flatRows[i].columnFilters = {};\n        rowModel.flatRows[i].columnFiltersMeta = {};\n      }\n\n      return rowModel;\n    }\n\n    const resolvedColumnFilters = [];\n    const resolvedGlobalFilters = [];\n    (columnFilters != null ? columnFilters : []).forEach(d => {\n      var _filterFn$resolveFilt;\n\n      const column = table.getColumn(d.id);\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"Table: Could not find a column to filter with columnId: \" + d.id);\n        }\n      }\n\n      const filterFn = column.getFilterFn();\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"Could not find a valid 'column.filterFn' for column with the ID: \" + column.id + \".\");\n        }\n\n        return;\n      }\n\n      resolvedColumnFilters.push({\n        id: d.id,\n        filterFn,\n        resolvedValue: (_filterFn$resolveFilt = filterFn.resolveFilterValue == null ? void 0 : filterFn.resolveFilterValue(d.value)) != null ? _filterFn$resolveFilt : d.value\n      });\n    });\n    const filterableIds = columnFilters.map(d => d.id);\n    const globalFilterFn = table.getGlobalFilterFn();\n    const globallyFilterableColumns = table.getAllLeafColumns().filter(column => column.getCanGlobalFilter());\n\n    if (globalFilter && globalFilterFn && globallyFilterableColumns.length) {\n      filterableIds.push('__global__');\n      globallyFilterableColumns.forEach(column => {\n        var _globalFilterFn$resol;\n\n        resolvedGlobalFilters.push({\n          id: column.id,\n          filterFn: globalFilterFn,\n          resolvedValue: (_globalFilterFn$resol = globalFilterFn.resolveFilterValue == null ? void 0 : globalFilterFn.resolveFilterValue(globalFilter)) != null ? _globalFilterFn$resol : globalFilter\n        });\n      });\n    }\n\n    let currentColumnFilter;\n    let currentGlobalFilter; // Flag the prefiltered row model with each filter state\n\n    for (let j = 0; j < rowModel.flatRows.length; j++) {\n      const row = rowModel.flatRows[j];\n      row.columnFilters = {};\n\n      if (resolvedColumnFilters.length) {\n        for (let i = 0; i < resolvedColumnFilters.length; i++) {\n          currentColumnFilter = resolvedColumnFilters[i];\n          const id = currentColumnFilter.id; // Tag the row with the column filter state\n\n          row.columnFilters[id] = currentColumnFilter.filterFn(row, id, currentColumnFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          });\n        }\n      }\n\n      if (resolvedGlobalFilters.length) {\n        for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n          currentGlobalFilter = resolvedGlobalFilters[i];\n          const id = currentGlobalFilter.id; // Tag the row with the first truthy global filter state\n\n          if (currentGlobalFilter.filterFn(row, id, currentGlobalFilter.resolvedValue, filterMeta => {\n            row.columnFiltersMeta[id] = filterMeta;\n          })) {\n            row.columnFilters.__global__ = true;\n            break;\n          }\n        }\n\n        if (row.columnFilters.__global__ !== true) {\n          row.columnFilters.__global__ = false;\n        }\n      }\n    }\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }; // Filter final rows using all of the active filters\n\n\n    return filterRows(rowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getFacetedRowModel() {\n  return (table, columnId) => memo(() => [table.getPreFilteredRowModel(), table.getState().columnFilters, table.getState().globalFilter, table.getFilteredRowModel()], (preRowModel, columnFilters, globalFilter) => {\n    if (!preRowModel.rows.length || !(columnFilters != null && columnFilters.length) && !globalFilter) {\n      return preRowModel;\n    }\n\n    const filterableIds = [...columnFilters.map(d => d.id).filter(d => d !== columnId), globalFilter ? '__global__' : undefined].filter(Boolean);\n\n    const filterRowsImpl = row => {\n      // Horizontally filter rows through each column\n      for (let i = 0; i < filterableIds.length; i++) {\n        if (row.columnFilters[filterableIds[i]] === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    return filterRows(preRowModel.rows, filterRowsImpl, table);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedRowModel_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedUniqueValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    let facetedUniqueValues = new Map();\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      var _facetedRowModel$flat;\n\n      const value = (_facetedRowModel$flat = facetedRowModel.flatRows[i]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n      if (facetedUniqueValues.has(value)) {\n        var _facetedUniqueValues$;\n\n        facetedUniqueValues.set(value, ((_facetedUniqueValues$ = facetedUniqueValues.get(value)) != null ? _facetedUniqueValues$ : 0) + 1);\n      } else {\n        facetedUniqueValues.set(value, 1);\n      }\n    }\n\n    return facetedUniqueValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedUniqueValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getFacetedMinMaxValues() {\n  return (table, columnId) => memo(() => [table.getColumn(columnId).getFacetedRowModel()], facetedRowModel => {\n    var _facetedRowModel$flat;\n\n    const firstValue = (_facetedRowModel$flat = facetedRowModel.flatRows[0]) == null ? void 0 : _facetedRowModel$flat.getValue(columnId);\n\n    if (typeof firstValue === 'undefined') {\n      return undefined;\n    }\n\n    let facetedMinMaxValues = [firstValue, firstValue];\n\n    for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n      const value = facetedRowModel.flatRows[i].getValue(columnId);\n\n      if (value < facetedMinMaxValues[0]) {\n        facetedMinMaxValues[0] = value;\n      } else if (value > facetedMinMaxValues[1]) {\n        facetedMinMaxValues[1] = value;\n      }\n    }\n\n    return facetedMinMaxValues;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getFacetedMinMaxValues_' + columnId,\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {}\n  });\n}\n\nfunction getSortedRowModel() {\n  return table => memo(() => [table.getState().sorting, table.getPreSortedRowModel()], (sorting, rowModel) => {\n    if (!rowModel.rows.length || !(sorting != null && sorting.length)) {\n      return rowModel;\n    }\n\n    const sortingState = table.getState().sorting;\n    const sortedFlatRows = []; // Filter out sortings that correspond to non existing columns\n\n    const availableSorting = sortingState.filter(sort => table.getColumn(sort.id).getCanSort());\n    const columnInfoById = {};\n    availableSorting.forEach(sortEntry => {\n      const column = table.getColumn(sortEntry.id);\n      columnInfoById[sortEntry.id] = {\n        sortUndefined: column.columnDef.sortUndefined,\n        invertSorting: column.columnDef.invertSorting,\n        sortingFn: column.getSortingFn()\n      };\n    });\n\n    const sortData = rows => {\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = rows.slice();\n      sortedData.sort((rowA, rowB) => {\n        for (let i = 0; i < availableSorting.length; i += 1) {\n          var _sortEntry$desc;\n\n          const sortEntry = availableSorting[i];\n          const columnInfo = columnInfoById[sortEntry.id];\n          const isDesc = (_sortEntry$desc = sortEntry == null ? void 0 : sortEntry.desc) != null ? _sortEntry$desc : false;\n\n          if (columnInfo.sortUndefined) {\n            const aValue = rowA.getValue(sortEntry.id);\n            const bValue = rowB.getValue(sortEntry.id);\n            const aUndefined = typeof aValue === 'undefined';\n            const bUndefined = typeof bValue === 'undefined';\n\n            if (aUndefined || bUndefined) {\n              return aUndefined && bUndefined ? 0 : aUndefined ? columnInfo.sortUndefined : -columnInfo.sortUndefined;\n            }\n          } // This function should always return in ascending order\n\n\n          let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id);\n\n          if (sortInt !== 0) {\n            if (isDesc) {\n              sortInt *= -1;\n            }\n\n            if (columnInfo.invertSorting) {\n              sortInt *= -1;\n            }\n\n            return sortInt;\n          }\n        }\n\n        return rowA.index - rowB.index;\n      }); // If there are sub-rows, sort them\n\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row);\n\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return {\n      rows: sortData(rowModel.rows),\n      flatRows: sortedFlatRows,\n      rowsById: rowModel.rowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._autoResetPageIndex();\n    }\n  });\n}\n\nfunction getGroupedRowModel() {\n  return table => memo(() => [table.getState().grouping, table.getPreGroupedRowModel()], (grouping, rowModel) => {\n    if (!rowModel.rows.length || !grouping.length) {\n      return rowModel;\n    } // Filter the grouping list down to columns that exist\n\n\n    const existingGrouping = grouping.filter(columnId => table.getColumn(columnId));\n    const groupedFlatRows = [];\n    const groupedRowsById = {}; // const onlyGroupedFlatRows: Row[] = [];\n    // const onlyGroupedRowsById: Record<RowId, Row> = {};\n    // const nonGroupedFlatRows: Row[] = [];\n    // const nonGroupedRowsById: Record<RowId, Row> = {};\n    // Recursively group the data\n\n    const groupUpRecursively = function (rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      // This is the last level, just return the rows\n      if (depth === existingGrouping.length) {\n        return rows;\n      }\n\n      const columnId = existingGrouping[depth]; // Group the rows together for this level\n\n      const rowGroupsMap = groupBy(rows, columnId); // Peform aggregations for each group\n\n      const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map((_ref, index) => {\n        let [groupingValue, groupedRows] = _ref;\n        let id = columnId + \":\" + groupingValue;\n        id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n        const leafRows = depth ? flattenBy(groupedRows, row => row.subRows) : groupedRows;\n        const row = createRow(table, id, leafRows[0].original, index, depth);\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n          getValue: columnId => {\n            // Don't aggregate columns that are in the grouping\n            if (existingGrouping.includes(columnId)) {\n              if (row._valuesCache.hasOwnProperty(columnId)) {\n                return row._valuesCache[columnId];\n              }\n\n              if (groupedRows[0]) {\n                var _groupedRows$0$getVal;\n\n                row._valuesCache[columnId] = (_groupedRows$0$getVal = groupedRows[0].getValue(columnId)) != null ? _groupedRows$0$getVal : undefined;\n              }\n\n              return row._valuesCache[columnId];\n            }\n\n            if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n              return row._groupingValuesCache[columnId];\n            } // Aggregate the values\n\n\n            const column = table.getColumn(columnId);\n            const aggregateFn = column.getAggregationFn();\n\n            if (aggregateFn) {\n              row._groupingValuesCache[columnId] = aggregateFn(columnId, leafRows, groupedRows);\n              return row._groupingValuesCache[columnId];\n            }\n          }\n        });\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n\n    const groupedRows = groupUpRecursively(rowModel.rows, 0, '');\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow; // if (subRow.getIsGrouped?.()) {\n      //   onlyGroupedFlatRows.push(subRow);\n      //   onlyGroupedRowsById[subRow.id] = subRow;\n      // } else {\n      //   nonGroupedFlatRows.push(subRow);\n      //   nonGroupedRowsById[subRow.id] = subRow;\n      // }\n    });\n    return {\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById\n    };\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    },\n    onChange: () => {\n      table._queue(() => {\n        table._autoResetExpanded();\n\n        table._autoResetPageIndex();\n      });\n    }\n  });\n}\n\nfunction groupBy(rows, columnId) {\n  const groupMap = new Map();\n  return rows.reduce((map, row) => {\n    const resKey = \"\" + row.getValue(columnId);\n    const previous = map.get(resKey);\n\n    if (!previous) {\n      map.set(resKey, [row]);\n    } else {\n      map.set(resKey, [...previous, row]);\n    }\n\n    return map;\n  }, groupMap);\n}\n\nfunction getExpandedRowModel() {\n  return table => memo(() => [table.getState().expanded, table.getPreExpandedRowModel(), table.options.paginateExpandedRows], (expanded, rowModel, paginateExpandedRows) => {\n    if (!rowModel.rows.length || // Do not expand if rows are not included in pagination\n    !paginateExpandedRows || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {\n      return rowModel;\n    }\n\n    return expandRows(rowModel);\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\nfunction expandRows(rowModel, table) {\n  const expandedRows = [];\n\n  const handleRow = row => {\n    var _row$subRows;\n\n    expandedRows.push(row);\n\n    if ((_row$subRows = row.subRows) != null && _row$subRows.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rowModel.rows.forEach(handleRow);\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById\n  };\n}\n\nfunction getPaginationRowModel(opts) {\n  return table => memo(() => [table.getState().pagination, table.getPrePaginationRowModel()], (pagination, rowModel) => {\n    if (!rowModel.rows.length) {\n      return rowModel;\n    }\n\n    const {\n      pageSize,\n      pageIndex\n    } = pagination;\n    let {\n      rows,\n      flatRows,\n      rowsById\n    } = rowModel;\n    const pageStart = pageSize * pageIndex;\n    const pageEnd = pageStart + pageSize;\n    rows = rows.slice(pageStart, pageEnd);\n    let paginatedRowModel;\n\n    if (!table.options.paginateExpandedRows) {\n      paginatedRowModel = expandRows({\n        rows,\n        flatRows,\n        rowsById\n      });\n    } else {\n      paginatedRowModel = {\n        rows,\n        flatRows,\n        rowsById\n      };\n    }\n\n    paginatedRowModel.flatRows = [];\n\n    const handleRow = row => {\n      paginatedRowModel.flatRows.push(row);\n\n      if (row.subRows.length) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n\n    paginatedRowModel.rows.forEach(handleRow);\n    return paginatedRowModel;\n  }, {\n    key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n    debug: () => {\n      var _table$options$debugA;\n\n      return (_table$options$debugA = table.options.debugAll) != null ? _table$options$debugA : table.options.debugTable;\n    }\n  });\n}\n\n//\nfunction flexRender(Comp, props) {\n  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && (() => {\n    const proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  })();\n}\n\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\n\nfunction useReactTable(options) {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    state: {},\n    // Dummy state\n    onStateChange: () => {},\n    // noop\n    renderFallbackValue: null,\n    ...options\n  }; // Create a new table and store it in state\n\n  const [tableRef] = React.useState(() => ({\n    current: createTable(resolvedOptions)\n  })); // By default, manage table state here using the table's initial state\n\n  const [state, setState] = React.useState(() => tableRef.current.initialState); // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n\n  tableRef.current.setOptions(prev => ({ ...prev,\n    ...options,\n    state: { ...state,\n      ...options.state\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater);\n      options.onStateChange == null ? void 0 : options.onStateChange(updater);\n    }\n  }));\n  return tableRef.current;\n}\n\nexport { ColumnSizing, Expanding, Filters, Grouping, Headers, Ordering, Pagination, Pinning, RowSelection, Sorting, Visibility, aggregationFns, buildHeaderGroups, createColumn, createRow, createTable, defaultColumnSizing, expandRows, filterFns, flattenBy, flexRender, functionalUpdate, getCoreRowModel, getExpandedRowModel, getFacetedMinMaxValues, getFacetedRowModel, getFacetedUniqueValues, getFilteredRowModel, getGroupedRowModel, getPaginationRowModel, getSortedRowModel, isFunction, isRowSelected, isSubRowSelected, makeStateUpdater, memo, noop, orderColumns, passiveEventSupported, reSplitAlphaNumeric, selectRowsFn, shouldAutoRemoveFilter, sortingFns, useReactTable };\n//# sourceMappingURL=index.js.map\n","import type { FC } from 'react'\nimport { useLayoutEffect, useRef, useEffect } from 'react'\n\ninterface BottomReachedProps {\n  onBottomReached: () => Promise<void>\n}\n\nconst POSSIBLE_EVENTS_SLIPPAGE_FIX_DELAY = 200\n\nconst BottomReached: FC<BottomReachedProps> = ({ onBottomReached }) => {\n  const elRef = useRef<HTMLDivElement>(null)\n  const onBottomReachedRef = useRef<() => Promise<void>>(onBottomReached)\n  /**\n   * used to retry request when bottom reached but only after another scroll\n   */\n  const attemptsRef = useRef(0)\n  /**\n   * window.scrollY is subpixel precise\n   * Math.ceil fix case when scrollY isn't a whole number (e.g. when zoom)\n   */\n  const heightY = useRef(Math.ceil(window.innerHeight + window.scrollY))\n\n  useEffect(() => {\n    onBottomReachedRef.current = onBottomReached\n  }, [onBottomReached])\n\n  useLayoutEffect(() => {\n    if (elRef.current == null) {\n      return\n    }\n\n    const observer = new IntersectionObserver(function (entries) {\n      if (entries[0].isIntersecting) {\n        const h = Math.ceil(window.innerHeight + window.scrollY)\n        setTimeout(() => {\n          /**\n           * By checking total window height we make sure we do not send infinite\n           * requests when reached the bottom in the edge cases when render shifts\n           * and intersection is still triggered.\n           */\n          if (h > heightY.current || attemptsRef.current === 1) {\n            void onBottomReachedRef.current()\n            attemptsRef.current = 0\n          } else {\n            attemptsRef.current += 1\n          }\n\n          heightY.current = h\n        }, POSSIBLE_EVENTS_SLIPPAGE_FIX_DELAY)\n      }\n    })\n\n    observer.observe(elRef.current)\n\n    return () => observer.disconnect()\n  }, [])\n\n  return <div className='cf-bottom-reached-sentinel' ref={elRef} />\n}\n\nexport default BottomReached\n","export default \"__VITE_ASSET__298e41e4__\"","export default \"__VITE_ASSET__dbdc1461__\"","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  headerCell: {\n    padding: '16px',\n    fontSize: '16px',\n    fontWeight: 500,\n    lineHeight: '24px',\n    color: 'rgba(33, 33, 33, 0.5)',\n    userSelect: 'none'\n  },\n  headerActiveCell: {\n    color: '#000'\n  },\n  headerSortableCell: {\n    cursor: 'pointer'\n  },\n  headerTitle: {\n    width: '100%',\n    height: '100%',\n    padding: 0,\n    margin: 0,\n    display: 'flex',\n    alignItems: 'center'\n  },\n  sortIconWrapper: {\n    boxSizing: 'border-box',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: '11px',\n    opacity: 0.5\n  },\n  sortIconWrapperActive: {\n    opacity: 1\n  },\n  sortIcon: {\n    padding: 0,\n    margin: 0,\n    color: 'rgba(33, 33, 33, 0.5)'\n  }\n})\n\nexport default useStyles\n","import type { FC, ReactNode } from 'react'\nimport type { SortDirection } from '@tanstack/react-table'\nimport { TableCell } from '@material-ui/core'\n\n// AZ-TODO: add path resolvers for Jest and Docz, to remove relative paths\nimport { cn } from '../../../../utils/ui'\nimport sortAscIcon from './icons/sortAsc.svg'\nimport sortDescIcon from './icons/sortDesc.svg'\nimport useStyles from './styles'\n\nconst SORT_ICONS: Record<SortDirection, string> = {\n  asc: sortAscIcon,\n  desc: sortDescIcon\n}\n\nexport interface HeaderCellProps {\n  width: number\n  children: ReactNode | ReactNode[]\n  isPlaceholder?: boolean\n  sortable?: boolean\n  sorting: SortDirection | false | null\n  onClick?: (evt: unknown) => void\n  classes?: {\n    root?: string\n    active?: string\n    sortIcon?: string\n    title?: string\n  }\n}\n\nexport const HeaderCell: FC<HeaderCellProps> = (props) => {\n  const {\n    children,\n    classes,\n    isPlaceholder = false,\n    onClick,\n    sortable = true,\n    sorting,\n    width\n  } = props\n\n  const styles = useStyles()\n\n  const hasSorting = sorting !== null\n  const sortIcon = SORT_ICONS[sorting as SortDirection] ?? sortAscIcon\n  const sortingCLasses = cn({\n    [styles.headerSortableCell]: sortable,\n    [styles.headerActiveCell]: hasSorting,\n    [classes?.active ?? '']: hasSorting\n  })\n\n  return (\n    <TableCell\n      className={cn(styles.headerCell, classes?.root, sortingCLasses)}\n      onClick={sortable ? onClick : undefined}\n      style={{ width }}\n    >\n      {!isPlaceholder && (\n        <div className={cn(styles.headerTitle, classes?.title)}>\n          {children}\n          {sortable && (\n            <div className={cn(styles.sortIconWrapper, { [styles.sortIconWrapperActive]: hasSorting })}>\n              <img className={cn(styles.sortIcon, classes?.sortIcon)} src={sortIcon} />\n            </div>\n          )}\n        </div>\n      )}\n    </TableCell>\n  )\n}\n\nexport default HeaderCell\n","import { css } from '@emotion/css'\n\nexport default css(`\n  &.cf-table-row {\n    border-top: 8px solid #f3f3f3;\n    border-radius: 2px;\n    color: #000;\n    background: #FFF;\n    cursor: default;\n    padding: 0px;\n  }\n\n  .cf-table-cell {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 24px;\n    letter-spacing: 0.15px;\n    cursor: default;\n    padding: 0px;\n    padding-right: 0px;\n  }\n`)\n","import { FC, ReactNode, useMemo } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { TableRow, TableCell } from '@material-ui/core'\n\nimport { cn } from '@utils/ui' // AZ-TODO: configure absolute paths\nimport CLASS_NAME from './styles'\n\nexport interface GroupRowClasses {\n  cell?: string\n  groupCell?: string\n  groupRow?: string\n  row?: string\n}\n\nexport interface GroupRowsProps {\n  children: ReactNode | ReactNode[]\n  classes?: GroupRowClasses\n  colSpan: number\n}\n\nexport const GroupRow: FC<GroupRowsProps> = ({\n  children,\n  classes: _classes,\n  colSpan\n}) => {\n  const classes = useMemo(() => ({\n    row: cn(CLASS_NAME, 'cf-table-row', _classes?.row, _classes?.groupRow),\n    cell: cn('cf-table-cell', _classes?.cell, _classes?.groupCell)\n  }), [_classes])\n\n  return (\n    <TableRow className={classes.row}>\n      <TableCell\n        className={classes.cell}\n        colSpan={colSpan}\n      >\n        {children}\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default observer(GroupRow)\n","import { css } from '@emotion/css'\n\nexport const BASE_CLASS_NAME = css(`\n  &.cf-table-row {\n    border-top: 8px solid #f3f3f3;\n    border-radius: 2px;\n    color: #000;\n    background: #FFF;\n    cursor: pointer;\n    padding: 0px;\n  }\n\n  .cf-table-cell {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 24px;\n    letter-spacing: 0.15px;\n    padding: 0px;\n    padding-right: 0px;\n  }\n\n  .cf-table-cell:last-child {\n    padding-right: 0px;\n  }\n`)\n\nexport const HOVER_CLASS_NAME = css(`\n  &.cf-table-row-hover {\n    background-color: #FFF;\n  }\n\n  &.cf-table-row-hover > td > div {\n    background: #FAFAFA;\n  }\n\n  &.cf-table-row-hover:hover > td:first-child > div {\n    border-left: 4px solid #212121;\n    border-top-left-radius: 3.5px;\n    border-bottom-left-radius: 3.5px;\n  }\n`)\n","import { useMemo, memo } from 'react'\nimport type { FC, MouseEvent } from 'react'\nimport get from 'lodash-es/get'\nimport { TableRow as MuiTableRow, TableCell } from '@material-ui/core'\nimport { flexRender } from '@tanstack/react-table'\nimport type { Row } from '@tanstack/react-table'\n\nimport { cn } from '@utils/ui'\nimport { BASE_CLASS_NAME, HOVER_CLASS_NAME } from './styles'\n\nexport interface TableRowClasses {\n  cell?: string\n  row?: string\n}\n\nexport interface TableRowProps <V> {\n  classes?: TableRowClasses\n  onRowClick: (evt: MouseEvent<HTMLTableRowElement>) => void\n  row: Row<V>\n}\n\nexport function TableRow <V> ({\n  classes,\n  onRowClick,\n  row\n}: TableRowProps<V>): JSX.Element {\n  const tableRowClasses = useMemo(() => ({\n    root: cn(BASE_CLASS_NAME, 'cf-table-row', classes?.row),\n    hover: cn(HOVER_CLASS_NAME, 'cf-table-row-hover')\n  }), [classes?.row])\n\n  return (\n    <MuiTableRow\n      classes={tableRowClasses}\n      data-id={row.id}\n      hover\n      key={row.id}\n      onClick={onRowClick}\n    >\n      {row.getVisibleCells().map(cell => (\n        <TableCell width={cell.column.getSize()} key={cell.id} className={cn('cf-table-cell', classes?.cell)}>\n          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n        </TableCell>\n      ))}\n    </MuiTableRow>\n  )\n}\n\nexport const MemoizedByOriginal: FC<TableRowProps<any>> = memo(TableRow, (prev: TableRowProps<unknown>, next: TableRowProps<unknown>) => {\n  for (const key of Object.keys(prev.row.original as any)) {\n    if (get(prev.row.original, key) !== get(next.row.original, key)) {\n      return false\n    }\n  }\n\n  return true\n})\n","import type { FC, MouseEvent, ReactNode } from 'react'\nimport type { ColumnDef, Row } from '@tanstack/react-table'\n\nimport type { Group } from '../../types'\nimport GroupRow from '../GroupRow'\nimport { TableRow, MemoizedByOriginal } from '../TableRow'\nimport type { TableRowProps } from '../TableRow'\n\nexport interface GroupBlockClasses {\n  cell?: string\n  groupCell?: string\n  groupRow?: string\n  row?: string\n}\n\nexport interface GroupBlockProps <V, M> {\n  classes?: GroupBlockClasses\n  columns: Array<ColumnDef<V>>\n  group: Group<V, M>\n  isMemoizedByOriginal?: boolean\n  onRowClick: (evt: MouseEvent<HTMLTableRowElement>) => void\n  renderGroup?: (group: Group<V, M>) => ReactNode\n  RowComponent?: FC<TableRowProps<V>>\n}\n\nfunction GroupBlock <V, M> ({\n  classes,\n  columns,\n  group,\n  isMemoizedByOriginal = false,\n  onRowClick,\n  renderGroup,\n  RowComponent: _RowComponent\n}: GroupBlockProps<V, M>): JSX.Element {\n  const hasGroups = Boolean(renderGroup)\n  const RowComponent = _RowComponent != null\n    ? _RowComponent\n    : isMemoizedByOriginal ? MemoizedByOriginal : TableRow\n\n  return (\n    <>\n      {hasGroups && (\n        <GroupRow\n          classes={classes}\n          colSpan={columns.length}\n        >\n          {renderGroup?.(group)}\n        </GroupRow>\n      )}\n\n      {group.rows.map((row: Row<V>) => (\n        <RowComponent<V>\n          classes={classes}\n          data-id={row.id}\n          key={row.id}\n          onRowClick={onRowClick}\n          row={row}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default GroupBlock\n","import GroupBlock from '../GroupBlock'\nimport type { GroupBlockProps } from '../GroupBlock'\nimport type { Groups } from '../../types'\n\nexport interface GroupsBlockProps <V, M> extends Omit<GroupBlockProps<V, M>, 'group'> {\n  groups: Groups<V, M>\n}\n\nfunction GroupsBlock <V, M> ({\n  groups,\n  ...restProps\n}: GroupsBlockProps<V, M>): JSX.Element {\n  return (\n    <>\n      {groups?.map(group => <GroupBlock key={group.key} group={group} {...restProps} />)}\n    </>\n  )\n}\n\nexport default GroupsBlock\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  wrapper: {\n    boxShadow: 'none',\n    borderRadius: '12px 12px 0 0',\n    fontFamily: 'Roboto, sans-serif',\n    overflow: 'hidden'\n  },\n  table: {\n    tableLayout: 'fixed',\n    overflow: 'scroll',\n    background: '#FAFAFA'\n  },\n  tableHead: {\n  },\n  row: {\n    borderTop: '8px solid #f3f3f3',\n    borderRadius: '2px',\n    color: '#000',\n    background: '#FFF',\n    cursor: 'pointer',\n    padding: 0\n  },\n  rowHover: {\n    backgroundColor: '#FFF',\n    '&&:hover > td > div': {\n      background: '#FAFAFA'\n    },\n\n    '&&:hover > td:first-child > div': {\n      borderLeft: '4px solid #212121',\n      borderTopLeftRadius: '3.5px',\n      borderBottomLeftRadius: '3.5px'\n    }\n  },\n  cell: {\n    fontWeight: 500,\n    fontSize: '16px',\n    lineHeight: '24px',\n    letterSpacing: 0.15,\n    padding: 0,\n\n    '&&': {\n      paddingRight: '0'\n    }\n  }\n})\n\nexport default useStyles\n","import { useCallback, useMemo, MouseEvent } from 'react'\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table'\nimport { observer } from 'mobx-react-lite'\n\nimport {\n  Paper, TableContainer, Table as MUITable,\n  TableHead, TableBody, TableRow\n} from '@material-ui/core'\n\nimport { cn } from '@utils/ui'\nimport type { TableProps, Rows, SortDirection, Groups, ColumnDef } from './types'\nimport BottomReached from './components/BottomReached'\nimport HeaderCell from './components/HeaderCell'\nimport GroupsBlock from './components/Groups'\nimport useStyles from './styles'\n\nfunction Table <V, M> (props: TableProps<V, M>): JSX.Element {\n  const {\n    classes,\n    columns,\n    data,\n    sorting,\n    isMemoizedByOriginal,\n    isThreeModeSorting = false,\n    hideHeader = false,\n    headerDataTestId,\n    bodyDataTestId,\n    renderEmptyBlock,\n    renderEmbeddedActionButton,\n    renderLoader,\n    onBottomReached,\n    onSortingChange,\n    onRowClick: _onRowClick,\n    groupBy = defaultGroupBy,\n    renderGroup,\n    RowComponent\n  } = props\n\n  const {\n    getHeaderGroups,\n    getRowModel\n  } = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel()\n  })\n\n  const styles = useStyles()\n\n  const columnDefs = useMemo(() => columns.reduce((acc: Record<string, ColumnDef<V>>, col) => {\n    const key = col?.id ?? (col as any)?.accessorKey ?? (col as any)?.accessorFn?.()\n\n    if (typeof key === 'string') {\n      acc[key] = col\n    }\n\n    return acc\n  }, {}), [columns])\n\n  const groups = useMemo(() => {\n    return groupBy(getRowModel().rows)\n  }, [groupBy, data, getRowModel])\n\n  // ========================================== //\n  //                   HANDLERS                 //\n  // ========================================== //\n\n  const getSortingHandler = useCallback((columnId: string) => () => {\n    if (onSortingChange == null) {\n      return\n    }\n\n    onSortingChange({\n      id: columnId,\n      order: columnId !== sorting?.id ? 'asc' : getNextOrder(sorting?.order ?? false, isThreeModeSorting)\n    })\n  }, [sorting, onSortingChange])\n\n  const onRowClick = useCallback((evt: MouseEvent<HTMLTableRowElement>) => {\n    if (_onRowClick == null) {\n      return\n    }\n\n    const target = evt.currentTarget // points to <TableRow />\n    const rowId = target.dataset.id\n    const row = getRowModel().rows.find(item => item.id === rowId)\n\n    if (row != null) {\n      _onRowClick(row)\n    }\n  }, [getRowModel, _onRowClick])\n\n  // ========================================== //\n\n  return (\n    <TableContainer\n      className={cn(styles.wrapper, classes?.wrapper)}\n      component={Paper}\n    >\n      <MUITable className={cn(styles.table, classes?.table)} size='small'>\n        {!hideHeader && (\n          <TableHead className={cn(styles.tableHead, classes?.header)} data-test-id={headerDataTestId}>\n            {getHeaderGroups().map(headerGroup => (\n              <TableRow key={headerGroup.id} className={classes?.headerRow}>\n                {headerGroup.headers.map(header => {\n                  const sortable = columnDefs[header.id]?.sortable ?? true\n\n                  return (\n                    <HeaderCell\n                      key={header.id}\n                      classes={{\n                        root: classes?.headerCell,\n                        active: classes?.sortedActive,\n                        sortIcon: classes?.sortedIcon,\n                        title: classes?.headerTitle\n                      }}\n                      width={header.getSize()}\n                      isPlaceholder={header.isPlaceholder}\n                      sorting={sorting?.id === header.id ? sorting.order : null}\n                      sortable={sortable}\n                      onClick={getSortingHandler(header.id)}\n                    >\n                      {flexRender(header.column.columnDef.header, header.getContext())}\n                    </HeaderCell>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHead>\n        )}\n\n        <TableBody className={classes?.body} data-test-id={bodyDataTestId}>\n          <GroupsBlock<V, M>\n            classes={classes}\n            columns={columns}\n            groups={groups}\n            isMemoizedByOriginal={isMemoizedByOriginal}\n            onRowClick={onRowClick}\n            renderGroup={renderGroup}\n            RowComponent={RowComponent}\n          />\n        </TableBody>\n      </MUITable>\n\n      {renderEmptyBlock?.()}\n      {renderEmbeddedActionButton?.()}\n      {renderLoader?.()}\n      {onBottomReached != null && <BottomReached onBottomReached={onBottomReached} />}\n    </TableContainer>\n  )\n}\n\nexport default observer(Table)\n\n// ========================================== //\n\nconst getNextOrder = (order: SortDirection, isThreeModeSorting: boolean): SortDirection => {\n  const orders: SortDirection[] = isThreeModeSorting\n    ? [false, 'asc', 'desc']\n    : ['asc', 'desc']\n\n  const orderIdx = Math.max(orders.indexOf(order), 0)\n  const nextOrderIdx = (orderIdx + 1) % orders.length\n\n  return orders[nextOrderIdx]\n}\n\n/**\n * Returns all rows as a single group.\n */\nfunction defaultGroupBy<V, M> (rows: Rows<V>): Groups<V, M> {\n  return [{\n    key: rows.map(row => row.id).join(),\n    rows,\n    meta: undefined as unknown as M\n  }]\n}\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  groupContent: {\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    fontSize: '16px',\n    fontWeight: 500,\n    lineHeight: '24px'\n  },\n  groupTitle: {\n    padding: '0 8px',\n    minWidth: 'max-content'\n  },\n  dividerLeft: {\n    width: '24px',\n    height: '0',\n    border: '1px solid rgba(0, 0, 0, 0.12)'\n  },\n  dividerRight: {\n    width: '100%',\n    height: '0',\n    border: '1px solid rgba(0, 0, 0, 0.12)'\n  }\n})\n\nexport default useStyles\n","import { ReactNode } from 'react'\n\nimport type { Group } from '../../types'\nimport { cn } from '../../../../utils/ui' // AZ-TODO: remove relative path\nimport useStyles from './styles'\n\nexport interface GroupContentProps<V, M> {\n  classes?: {\n    dividerLeft?: string\n    dividerRight?: string\n    groupContent?: string\n    groupTitle?: string\n  }\n  group: Group<V, M>\n  renderContent: RenderCotnentFn<V, M>\n}\n\nexport type RenderCotnentFn<V, M> = (group: Group<V, M>) => ReactNode | ReactNode[]\n\nexport const GroupContent = <V, M> (props: GroupContentProps<V, M>): JSX.Element => {\n  const { classes, group, renderContent } = props\n  const styles = useStyles()\n\n  return (\n    <div className={cn(styles.groupContent, classes?.groupContent)}>\n      <div className={cn(styles.dividerLeft, classes?.dividerLeft)} />\n      <div className={cn(styles.groupTitle, classes?.groupTitle)}>{renderContent(group)}</div>\n      <div className={cn(styles.dividerRight, classes?.dividerRight)} />\n    </div>\n  )\n}\n\nconst GroupContentHOC = <V, M>(renderFn: RenderCotnentFn<V, M>) => {\n  return (group: Group<V, M>) => (\n    <GroupContent group={group} renderContent={renderFn} />\n  )\n}\n\nexport default GroupContentHOC\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  cellWrapper: {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '84px',\n    padding: '16px',\n    margin: '0',\n    verticalAlign: 'top',\n    overflowWrap: 'break-word'\n  }\n})\n\nexport default useStyles\n","import type { FC, ReactNode } from 'react'\nimport { observer } from 'mobx-react-lite'\n\nimport { cn } from '@utils/ui'\nimport useStyles from './styles'\n\nexport interface CellWrapperProps {\n  children: ReactNode | ReactNode[]\n  className?: string\n}\n\nexport const CellWrapper: FC<CellWrapperProps> = (props) => {\n  const { children, className } = props\n  const styles = useStyles()\n\n  return (\n    <div className={cn(styles.cellWrapper, className, 'cf-cell-wrapper')}>\n      {children}\n    </div>\n  )\n}\n\nexport default observer(CellWrapper)\n","import { makeStyles } from '@material-ui/core/styles'\nimport { faker } from '@faker-js/faker'\n\nimport { formatInteger } from '@utils/formatters/numbers2'\nimport type { ColumnDef, Rows, Groups, Group } from '../types'\nimport CellWrapper from '../components/cells/Wrapper'\nimport { ChangeEvent } from 'react'\n\nexport interface CarInfo {\n  checked: boolean\n  id: number\n  vin: string\n  year?: number\n  make?: string\n  model?: string\n  odometer?: number\n  stockNumber?: string\n  age?: number\n  salePrice?: number\n  imageUrl?: string\n  media?: number\n  tags?: string[]\n}\n\nexport const getData = (size: number): CarInfo[] => {\n  let res: CarInfo[] = []\n\n  for (let i = 0; i < size; i++) {\n    res.push({\n      checked: false,\n      id: i,\n      vin: faker.vehicle.vin(),\n      year: faker.date.past(50).getFullYear(),\n      make: faker.vehicle.manufacturer(),\n      model: faker.vehicle.model(),\n      odometer: faker.datatype.number({ min: 10000, max: 200000 }),\n      stockNumber: faker.finance.routingNumber(),\n      tags: [],\n      imageUrl: `https://picsum.photos/seed/${Math.random() + i}/111/61`,\n    })\n  }\n\n  return res\n}\n\nconst Cell = (info: any): JSX.Element => (\n  <CellWrapper>\n    <span>{info.getValue() ?? ''}</span>\n  </CellWrapper>\n)\n\nexport interface ColumnsConfig {\n  onToggle: (rowIdx: number, columnName: string, nextValue: boolean) => void\n}\n\nexport const getColumns = (conf: ColumnsConfig): Array<ColumnDef<CarInfo>> => ([\n  {\n    accessorKey: 'checked',\n    cell: (info) => {\n      const value: boolean = info.getValue()\n\n      return (\n        <CellWrapper>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <input\n              type='checkbox'\n              checked={value}\n              onChange={(evt: ChangeEvent<HTMLInputElement>) => {\n                evt.stopPropagation()\n                conf.onToggle(info.row.index, info.column.id, evt.target.checked)\n              }}\n            />\n          </div>\n        </CellWrapper>\n      )\n    },\n    footer: undefined,\n    sortable: false,\n    header: '',\n    size: 40\n  },\n  {\n    accessorKey: 'make',\n    cell: (info) => {\n      const row = info.row.original\n      return (\n        <CellWrapper>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <img src={row.imageUrl} style={{ paddingRight: '10px' }} />\n\n            <div>\n              <div>{row.year} {row.model}</div>\n              <div><b>{formatInteger(row.odometer)} miles</b></div>\n            </div>\n          </div>\n        </CellWrapper>\n      )\n    },\n    footer: undefined,\n    header: () => <span>Car</span>,\n    size: 400\n  },\n  {\n    accessorKey: 'stockNumber',\n    cell: Cell,\n    footer: undefined,\n    header: () => <span>Stock #</span>,\n    size: 160\n  },\n  {\n    accessorFn: (row: CarInfo) => row.vin,\n    cell: Cell,\n    footer: undefined,\n    header: () => <span>VIN</span>,\n    id: 'vin',\n    size: 196,\n    sortable: false\n  },\n  {\n    accessorKey: 'tags',\n    cell: Cell,\n    footer: undefined,\n    header: () => <span>Tags</span>,\n    size: 200,\n    sortable: true\n  }\n])\n\nexport const groupByMake = (rows: Rows<CarInfo>): Groups<CarInfo> => {\n  const groups = rows.reduce((acc: Map<string, Group<CarInfo, string>>, row) => {\n    const groupId = row.original.make\n    const group = acc.get(groupId ?? '') ?? { rows: [], key: '' }\n\n    acc.set(groupId ?? '', {\n      rows: [...group.rows, row],\n      key: faker.datatype.uuid(),\n      meta: groupId ?? ''\n    })\n\n    return acc\n  }, new Map()).values()\n\n  return [...groups]\n}\n\nexport const useStyles = makeStyles({\n  wrapper: {\n  },\n  table: {\n  },\n  groupRow: {\n    background: '#F3F3F3'\n  },\n  groupCell: {\n    background: '#F3F3F3',\n\n    '&:last-child': {\n      paddingLeft: '0',\n      paddingRight: '0'\n    }\n  }\n})\n","import { useState, useEffect, useMemo } from 'react'\n\nimport useRefUpdater from '@/hooks/useRefUpdater'\nimport Table from '../'\nimport GroupContentHOC from '../components/DefaultGroupContent'\nimport { getData, getColumns, groupByMake, useStyles, CarInfo } from './mock'\nimport { SortingInfo, TableProps } from '../types'\n\nexport { Table }\n\nexport const TableExampleHOC = <V, M>(hocProps: TableProps<V, M>) =>\n  (props: TableProps<V, M>) => (<Table {...hocProps} {...props} />)\n\nconst DEFAULT_SORTING: SortingInfo = { id: 'stockNumber', order: 'asc' }\n\nexport const TableExample = () => {\n  const styles = useStyles()\n  const [sorting, setSorting] = useState(DEFAULT_SORTING)\n  const [rows, setRows] = useState<CarInfo[]>([])\n  const [isMemoized, setIsMemoized] = useState(false)\n  const refRows = useRefUpdater(rows)\n  const groupBy = (sorting.id === 'make') ? groupByMake : undefined\n  const renderGroup = GroupContentHOC<CarInfo, unknown>((group) => <>{group.meta} ({group.rows.length})</>)\n\n  const columns = useMemo(() => {\n    const onToggle = (rowIdx: number, _: string, value: boolean) => {\n      const nextRows = refRows.current.slice(0)\n      nextRows[rowIdx] = { ...nextRows[rowIdx], checked: value }\n      setTimeout(() => { setRows(nextRows) }, 0)\n    }\n    return getColumns({ onToggle })\n  }, [])\n\n  useEffect(() => {\n    setRows(getData(1000))\n  }, [])\n\n  useEffect(() => {\n    if (sorting !== DEFAULT_SORTING) {\n      console.info('effect :: sorting :: ', sorting)\n      setRows([...refRows.current].reverse())\n    }\n  }, [sorting])\n\n  return (\n    <div>\n      <div style={{ marginBottom: 24 }}>\n        <label>\n          <input\n            type='checkbox'\n            checked={isMemoized}\n            onChange={(evt) => setIsMemoized(evt.target.checked)}\n          />\n          <span style={{ marginLeft: '4px' }}>Memoize by 'row.original'?</span>\n        </label>\n      </div>\n\n      <Table\n        classes={{\n          wrapper: styles.wrapper,\n          table: styles.table,\n          groupRow: styles.groupRow,\n          groupCell: styles.groupCell\n        }}\n        columns={columns}\n        data={rows}\n        isMemoizedByOriginal={isMemoized}\n        sorting={sorting}\n        onSortingChange={(arg) => {\n          setSorting(arg)\n          console.info('onSortingChange :: ', arg)\n        }}\n        onRowClick={(row) => { console.info('click on row :: ', row.original.stockNumber) }}\n        groupBy={groupBy}\n        renderGroup={groupBy ? renderGroup : undefined}\n      />\n    </div>\n  )\n}\n","import { Meta, Story } from '@storybook/addon-docs'\nimport { Table, TableExample } from './__examples__'\n\n<Meta title='Table' component={Table} />\n\n# Table\n\n<Story name='All features'>\n  <TableExample />\n</Story>\n"],"names":["TableContext","React.createContext","TableContext$1","styles","__name","theme","root","display","width","borderCollapse","borderSpacing","_extends","typography","body2","padding","spacing","color","palette","text","secondary","textAlign","captionSide","stickyHeader","defaultComponent","Table","React","props","ref","classes","className","_props$component","component","Component","_props$padding","_props$size","size","_props$stickyHeader","other","_objectWithoutProperties","table","_jsx","clsx","withStyles","name","Tablelvl2Context","Tablelvl2Context$1","tablelvl2","variant","TableBody","verticalAlign","borderBottom","concat","type","lighten","alpha","divider","darken","head","primary","lineHeight","pxToRem","fontWeight","fontWeightMedium","body","footer","fontSize","sizeSmall","paddingRight","paddingLeft","paddingCheckbox","paddingNone","alignLeft","alignCenter","alignRight","flexDirection","alignJustify","position","top","left","zIndex","backgroundColor","background","default","TableCell","_props$align","align","paddingProp","scopeProp","scope","sizeProp","sortDirection","variantProp","isHeadCell","role","ariaSort","capitalize","overflowX","TableContainer","TableHead","outline","action","hover","main","selectedOpacity","selected","TableRow","_props$hover","_props$selected","functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","id","accessorKey","header","undefined","accessorFn","originalRow","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","includes","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","updateOffset","eventType","clientXPos","newColumnSizing","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","split","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","_row$getValue3","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","value","Array","isArray","getFilterFn","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","_toString","_props$getValue","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","floor","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","original","rowIndex","_valuesCache","hasOwnProperty","getLeafRows","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","flexRender","Comp","isReactComponent","isClassComponent","isExoticComponent","proto","getPrototypeOf","$$typeof","description","useReactTable","resolvedOptions","tableRef","current","prev","POSSIBLE_EVENTS_SLIPPAGE_FIX_DELAY","BottomReached","onBottomReached","elRef","useRef","onBottomReachedRef","attemptsRef","heightY","useEffect","useLayoutEffect","observer","entries","sortAscIcon","sortDescIcon","useStyles","makeStyles","SORT_ICONS","HeaderCell","onClick","hasSorting","sortIcon","sortingCLasses","cn","sortable","_jsxs","CLASS_NAME","css","GroupRow","_classes","useMemo","GroupRow$1","BASE_CLASS_NAME","HOVER_CLASS_NAME","onRowClick","tableRowClasses","MuiTableRow","MemoizedByOriginal","get","GroupBlock","group","renderGroup","hasGroups","RowComponent","_RowComponent","isMemoizedByOriginal","_Fragment","GroupsBlock","groups","restProps","hideHeader","headerDataTestId","bodyDataTestId","renderEmptyBlock","renderEmbeddedActionButton","renderLoader","_onRowClick","defaultGroupBy","_a","groupBy","getSortingHandler","useCallback","evt","Paper","headerRow","headerCell","sortedActive","sortedIcon","headerTitle","Table$1","getNextOrder","order","isThreeModeSorting","orders","nextOrderIdx","GroupContent","renderContent","GroupContentHOC","renderFn","CellWrapper","CellWrapper$1","getData","res","faker","Cell","conf","imageUrl","formatInteger","vin","groupByMake","groupId","TableExampleHOC","hocProps","DEFAULT_SORTING","TableExample","useState","setRows","isMemoized","setIsMemoized","refRows","useRefUpdater","rowIdx","nextRows","onToggle","wrapper","groupRow","groupCell","arg","layoutProps","MDXLayout","MDXContent","components","mdx","Meta","Story","isMDXComponent","allFeatures","storyName","parameters","storySource","source","componentMeta","title","includeStories","mdxStoryNameToKey","docs","page","AddContext","__namedExportsOrder"],"mappings":"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"}