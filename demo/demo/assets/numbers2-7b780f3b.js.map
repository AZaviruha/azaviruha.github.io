{"version":3,"file":"numbers2-7b780f3b.js","sources":["../../src/utils/formatters/numbers2.ts"],"sourcesContent":["export const keys = <T extends Record<string, any>>(obj: T): [keyof T] => {\n  return Object.keys(obj) as [keyof T]\n}\n\nconst mergeObjectOrString = <K extends string>(\n  defaultValues: Record<K, string>,\n  objectOrString?: string | Partial<Record<K, string>>\n): Record<K, string> => {\n  if (objectOrString == null) {\n    return { ...defaultValues }\n  }\n\n  if (typeof objectOrString === 'object') {\n    return { ...defaultValues, ...objectOrString }\n  }\n\n  const result = { ...defaultValues }\n  for (const key of keys(result)) {\n    result[key] = objectOrString\n  }\n\n  return result\n}\n\nexport interface FormatterConfig {\n  allowNegative?: boolean\n  allowZero?: boolean\n  emptyValues?: string | Partial<EmptyValuesConfig>\n  mantissa?: number\n  postfix?: string | Partial<Postfixes>\n  prefix?: string | Partial<Prefixes>\n}\n\nexport type CompleteFormatterConfig = Omit<FormatterConfig, 'emptyValues' | 'postfix' | 'prefix'> & {\n  emptyValues: EmptyValuesConfig\n  postfix: Postfixes\n  prefix: Prefixes\n}\n\nexport interface EmptyValuesConfig {\n  emptyString: string\n  negativeValue: string\n  nullValue: string\n  zeroValue: string\n  invalidValue: string\n}\n\nexport interface Prefixes {\n  negative: string\n  positive: string\n}\n\nexport type Postfixes = Prefixes\n\nexport const DEFAULT_LOCALE = 'en-US'\n\nexport const DEFAULT_FORMATTER_CONFIG: CompleteFormatterConfig = {\n  allowNegative: true,\n  allowZero: true,\n  emptyValues: {\n    emptyString: '',\n    negativeValue: '',\n    nullValue: '',\n    zeroValue: '',\n    invalidValue: '-'\n  },\n  mantissa: 2,\n  postfix: { negative: '', positive: '' },\n  prefix: { negative: '', positive: '' }\n}\n\nconst mergeFormatterConfig = (\n  defaultValues: CompleteFormatterConfig,\n  config: Partial<FormatterConfig>\n): CompleteFormatterConfig => {\n  if (defaultValues === config) {\n    return { ...defaultValues }\n  }\n\n  const emptyValues = mergeObjectOrString(defaultValues.emptyValues, config.emptyValues)\n  const prefix = mergeObjectOrString(defaultValues.prefix, config.prefix)\n  const postfix = mergeObjectOrString(defaultValues.postfix, config.postfix)\n  const allowNegative = config.allowNegative ?? defaultValues.allowNegative\n  const allowZero = config.allowZero ?? defaultValues.allowZero\n  const mantissa = config.mantissa ?? defaultValues.mantissa\n\n  return {\n    allowNegative,\n    allowZero,\n    emptyValues,\n    mantissa,\n    postfix,\n    prefix\n  }\n}\n\nexport const formatNumber = (\n  x: number | string | null | undefined,\n  _config: Partial<FormatterConfig> = DEFAULT_FORMATTER_CONFIG\n): string => {\n  const config = mergeFormatterConfig(DEFAULT_FORMATTER_CONFIG, _config)\n  const { emptyValues, postfix, prefix } = config\n  const allowNegative = config.allowNegative ?? true\n  const allowZero = config.allowZero ?? true\n  const mantissa = config.mantissa ?? 2\n\n  if (x == null) {\n    return emptyValues.nullValue\n  }\n\n  if (x === '') {\n    return emptyValues.emptyString\n  }\n\n  const num = Number(x)\n\n  if (Number.isNaN(num)) {\n    return emptyValues.invalidValue\n  }\n\n  const isZero = num === 0\n  const isNegative = num < 0\n\n  if (isZero && !allowZero) {\n    return emptyValues.zeroValue\n  }\n\n  if (isNegative && !allowNegative) {\n    return emptyValues.negativeValue\n  }\n\n  const numberFormatterConfig = {\n    minimumFractionDigits: mantissa,\n    maximumFractionDigits: mantissa\n  }\n\n  const postfixStr = isNegative ? postfix.negative : postfix.positive\n  const prefixStr = isNegative ? prefix.negative : prefix.positive\n  const formattedValue = new Intl.NumberFormat(DEFAULT_LOCALE, numberFormatterConfig).format(Math.abs(num))\n\n  return `${prefixStr}${formattedValue}${postfixStr}`\n}\n\n// ========================================== //\n//                   INTEGER                  //\n// ========================================== //\n\nconst DEFAULT_INTEGER_CONFIG: Partial<FormatterConfig> = {\n  prefix: { positive: '', negative: '-' },\n  allowZero: false,\n  mantissa: 0,\n  emptyValues: {\n    zeroValue: '0',\n    invalidValue: ''\n  }\n}\n\n/**\n * Signed/unsigned integer number.\n *\n * Examples:\n * formatInteger(15) -> '15'\n * formatInteger(25.25) -> '25'\n */\nexport const formatInteger = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_INTEGER_CONFIG, ...partialConfig })\n}\n\n// ========================================== //\n//                   DECIMAL                  //\n// ========================================== //\n\nconst DEFAULT_DECIMAL_CONFIG: Partial<FormatterConfig> = {\n  prefix: { positive: '', negative: '-' },\n  allowZero: false,\n  emptyValues: {\n    zeroValue: '0.00',\n    invalidValue: ''\n  }\n}\n\n/**\n * Signed/unsigned decimal number.\n *\n * Examples:\n * formatDecimal(15) -> '15.00'\n * formatDecimal(-25.25) -> '-25.25'\n */\nexport const formatDecimal = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_DECIMAL_CONFIG, ...partialConfig })\n}\n\n// ========================================== //\n//                   PERCENTAGES              //\n// ========================================== //\n\nconst DEFAULT_PERCENTAGES_CONFIG: Partial<FormatterConfig> = {\n  postfix: { positive: '%', negative: '' },\n  emptyValues: '0%',\n  allowNegative: false,\n  mantissa: 0\n}\n\n/**\n * Signed/unsigned integer percentage.\n * Cannot be negative.\n *\n * Examples:\n * formatPercentages(15) -> '15%'\n * formatPercentages(25.25) -> '25%'\n */\nexport const formatPercentages = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_PERCENTAGES_CONFIG, ...partialConfig })\n}\n\nconst DEFAULT_PERCENTAGES_DECIMAL_CONFIG: Partial<FormatterConfig> = {\n  postfix: { positive: '%', negative: '' },\n  emptyValues: '0.00%',\n  allowNegative: false\n}\n\n/**\n * Signed/unsigned decimal percentage.\n * Cannot be negative.\n *\n * Examples:\n * formatPercentagesDecimal(15) -> '15.00%'\n * formatPercentagesDecimal(25.25) ->' 25.25'\n */\nexport const formatPercentagesDecimal = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_PERCENTAGES_DECIMAL_CONFIG, ...partialConfig })\n}\n\n// ========================================== //\n//                   CURRENCY                 //\n// ========================================== //\n\nconst DEFAULT_CURRENCY_CONFIG: Partial<FormatterConfig> = {\n  prefix: { positive: '$', negative: '-$' },\n  emptyValues: {\n    zeroValue: '$0'\n  },\n  allowNegative: false,\n  mantissa: 0\n}\n\n/**\n * Signed/unsigned integer currency.\n *\n * Examples:\n * formatCurrency(15) -> '$15'\n * formatCurrency(-25.25) -> '-$25'\n */\nexport const formatCurrency = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_CURRENCY_CONFIG, ...partialConfig })\n}\n\nconst DEFAULT_CURRENCY_DECIMAL_CONFIG: Partial<FormatterConfig> = {\n  prefix: { positive: '$', negative: '-$' },\n  emptyValues: {\n    zeroValue: '$0.00'\n  },\n  allowNegative: false\n}\n\n/**\n * Signed/unsigned decimal currency.\n *\n * Examples:\n * formatCurrencyDecimal(15) -> '$15.00'\n * formatCurrencyDecimal(-25.25) -> '-$25.25'\n */\nexport const formatCurrencyDecimal = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_CURRENCY_DECIMAL_CONFIG, ...partialConfig })\n}\n\nconst DEFAULT_CURRENCY_ACCOUNTING_CONFIG: Partial<FormatterConfig> = {\n  prefix: { positive: '$', negative: '($' },\n  postfix: { positive: '', negative: ')' },\n  emptyValues: {\n    zeroValue: '$0.00'\n  },\n  allowNegative: false\n}\n\n/**\n * Signed/unsigned currency for accounting.\n * Always decimal.\n *\n * Examples:\n * formatCurrencyAccounting(15) -> '$15.00'\n * formatCurrencyAccounting(-25.25) -> '($25.25)'\n */\nexport const formatCurrencyAccounting = (\n  x: number | string | null | undefined,\n  partialConfig?: Partial<FormatterConfig>\n): string => {\n  return formatNumber(x, { ...DEFAULT_CURRENCY_ACCOUNTING_CONFIG, ...partialConfig })\n}\n"],"names":["keys","__name","obj","mergeObjectOrString","defaultValues","objectOrString","result","key","DEFAULT_LOCALE","DEFAULT_FORMATTER_CONFIG","mergeFormatterConfig","config","emptyValues","prefix","postfix","allowNegative","allowZero","mantissa","formatNumber","x","_config","num","isZero","isNegative","numberFormatterConfig","postfixStr","prefixStr","formattedValue","DEFAULT_INTEGER_CONFIG","formatInteger","partialConfig","DEFAULT_DECIMAL_CONFIG","formatDecimal"],"mappings":"+EAAa,MAAAA,EAAOC,EAAgCC,GAC3C,OAAO,KAAKA,CAAG,EADJ,QAIdC,EAAsBF,EAAA,CAC1BG,EACAC,IACsB,CACtB,GAAIA,GAAkB,KACb,MAAA,CAAE,GAAGD,GAGV,GAAA,OAAOC,GAAmB,SAC5B,MAAO,CAAE,GAAGD,EAAe,GAAGC,GAG1B,MAAAC,EAAS,CAAE,GAAGF,GACT,UAAAG,KAAOP,EAAKM,CAAM,EAC3BA,EAAOC,CAAG,EAAIF,EAGT,OAAAC,CACT,EAlB4B,uBAkDfE,EAAiB,QAEjBC,EAAoD,CAC/D,cAAe,GACf,UAAW,GACX,YAAa,CACX,YAAa,GACb,cAAe,GACf,UAAW,GACX,UAAW,GACX,aAAc,GAChB,EACA,SAAU,EACV,QAAS,CAAE,SAAU,GAAI,SAAU,EAAG,EACtC,OAAQ,CAAE,SAAU,GAAI,SAAU,EAAG,CACvC,EAEMC,EAAuBT,EAAA,CAC3BG,EACAO,IAC4B,CAC5B,GAAIP,IAAkBO,EACb,MAAA,CAAE,GAAGP,GAGd,MAAMQ,EAAcT,EAAoBC,EAAc,YAAaO,EAAO,WAAW,EAC/EE,EAASV,EAAoBC,EAAc,OAAQO,EAAO,MAAM,EAChEG,EAAUX,EAAoBC,EAAc,QAASO,EAAO,OAAO,EACnEI,EAAgBJ,EAAO,eAAiBP,EAAc,cACtDY,EAAYL,EAAO,WAAaP,EAAc,UAC9Ca,EAAWN,EAAO,UAAYP,EAAc,SAE3C,MAAA,CACL,cAAAW,EACA,UAAAC,EACA,YAAAJ,EACA,SAAAK,EACA,QAAAH,EACA,OAAAD,CAAA,CAEJ,EAvB6B,wBAyBhBK,EAAejB,EAAA,CAC1BkB,EACAC,EAAoCX,IACzB,CACL,MAAAE,EAASD,EAAqBD,EAA0BW,CAAO,EAC/D,CAAE,YAAAR,EAAa,QAAAE,EAAS,OAAAD,CAAA,EAAWF,EACnCI,EAAgBJ,EAAO,eAAiB,GACxCK,EAAYL,EAAO,WAAa,GAChCM,EAAWN,EAAO,UAAY,EAEpC,GAAIQ,GAAK,KACP,OAAOP,EAAY,UAGrB,GAAIO,IAAM,GACR,OAAOP,EAAY,YAGf,MAAAS,EAAM,OAAOF,CAAC,EAEhB,GAAA,OAAO,MAAME,CAAG,EAClB,OAAOT,EAAY,aAGrB,MAAMU,EAASD,IAAQ,EACjBE,EAAaF,EAAM,EAErB,GAAAC,GAAU,CAACN,EACb,OAAOJ,EAAY,UAGjB,GAAAW,GAAc,CAACR,EACjB,OAAOH,EAAY,cAGrB,MAAMY,EAAwB,CAC5B,sBAAuBP,EACvB,sBAAuBA,CAAA,EAGnBQ,EAAaF,EAAaT,EAAQ,SAAWA,EAAQ,SACrDY,EAAYH,EAAaV,EAAO,SAAWA,EAAO,SAClDc,EAAiB,IAAI,KAAK,aAAanB,EAAgBgB,CAAqB,EAAE,OAAO,KAAK,IAAIH,CAAG,CAAC,EAEjG,MAAA,GAAGK,IAAYC,IAAiBF,GACzC,EA7C4B,gBAmDtBG,EAAmD,CACvD,OAAQ,CAAE,SAAU,GAAI,SAAU,GAAI,EACtC,UAAW,GACX,SAAU,EACV,YAAa,CACX,UAAW,IACX,aAAc,EAChB,CACF,EASaC,EAAgB5B,EAAA,CAC3BkB,EACAW,IAEOZ,EAAaC,EAAG,CAAE,GAAGS,EAAwB,GAAGE,EAAe,EAJ3C,iBAWvBC,EAAmD,CACvD,OAAQ,CAAE,SAAU,GAAI,SAAU,GAAI,EACtC,UAAW,GACX,YAAa,CACX,UAAW,OACX,aAAc,EAChB,CACF,EASaC,EAAgB/B,EAAA,CAC3BkB,EACAW,IAEOZ,EAAaC,EAAG,CAAE,GAAGY,EAAwB,GAAGD,EAAe,EAJ3C"}