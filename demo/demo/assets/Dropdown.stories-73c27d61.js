var Gl=Object.defineProperty;var s=(e,n)=>Gl(e,"name",{value:n,configurable:!0});import{r as i}from"./index-13f3a07b.js";import{c as u,A as jl,M as $l,S as J}from"./Props-42e8e9cb.js";import{j as p,a as C}from"./jsx-runtime-d0e2239a.js";import"./es.promise.resolve-04d58763.js";import"./index-3e51028f.js";import{m as He}from"./mermaid-a98f434b-6ad3a326.js";import{r as Fn}from"./index-77fd1cfa.js";import{c as j,b as k}from"./ui-6e300fc6.js";import{i as Xn,a as Kl,I as Zn,F as Xl}from"./index-9c0e0d32.js";import{P as Zl}from"./index-1d92391b.js";import{c as De}from"./_commonjsHelpers-df0bf62c.js";import{L as qn}from"./index-79c39802.js";import{u as me}from"./useRefUpdater-9efdd89b.js";import{p as Yl}from"./index-6ef2171d.js";import{N as Bn}from"./index-39101f40.js";import"./iframe-1e31e50d.js";import"./preload-helper-d51aff73.js";import"./index-32ac9e7b.js";import"./index-a2fa05d1.js";import"./_commonjs-dynamic-modules-fefbfc1c.js";import"./index-681e4b07-43c39e59.js";import"./index-aa905caf.js";import"./string-d2fe5096.js";import"./memoize-a38ec700.js";import"./_MapCache-7e836c94.js";import"./isArray-6de4a062.js";import"./_getTag-9b3eabd6.js";import"./_arrayReduce-b962fc90.js";import"./toString-40b958f3.js";import"./isSymbol-3167caec.js";import"./index-d5fbfd5b.js";import"./useClickOutside-38d34b76.js";import"./signedNumbersAndDots-31962cac.js";const Jl="dark",Ql="default",et="dark",Fe="light",nt="data-theme";function lt(e,n){var a,o;let t=e.getAttribute(nt)??Fe;t===Fe||t===et||(t=Fe);const l=t===Fe?Ql:Jl;return((a=n==null?void 0:n.theme)==null?void 0:a[t])??((o=n==null?void 0:n.mermaid)==null?void 0:o.theme)??l}s(lt,"getTheme");const tt=s(({chart:e,config:n})=>{if(typeof window>"u")return p("div",{className:"mermaid","data-mermaid-src":e,children:e});const t=i.useMemo(()=>typeof n=="string"?JSON.parse(n):n,[n]),l=document.querySelector("html"),[a,o]=i.useState(!1),r=i.useMemo(()=>lt(l,t),[t,a]);return i.useEffect(()=>{const d=new MutationObserver(m=>{for(const g of m)if(!(g.type!=="attributes"||g.attributeName!=="data-theme")){o(y=>!y);break}});return d.observe(l,{attributes:!0}),()=>{try{d.disconnect()}catch{}}},[]),i.useEffect(()=>{t&&(t.mermaid?He.initialize({startOnLoad:!0,...t.mermaid,theme:r}):He.initialize({startOnLoad:!0,theme:r}),document.querySelectorAll('div.mermaid[data-processed="true"]').forEach(d=>{d.removeAttribute("data-processed"),d.innerHTML=d.getAttribute("data-mermaid-src")}),He.contentLoaded())},[t,r]),i.useEffect(()=>{setTimeout(He.contentLoaded,0)},[e]),p("div",{className:"mermaid","data-mermaid-src":e,children:e})},"Mermaid"),Ne=s(()=>C("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[p("g",{clipPath:"url(#clip0_50139_73772)",children:p("path",{d:"M17.25 6.75831C16.925 6.43331 16.4 6.43331 16.075 6.75831L12 10.825L7.92501 6.74998C7.60001 6.42498 7.07501 6.42498 6.75001 6.74998C6.42501 7.07498 6.42501 7.59998 6.75001 7.92498L10.825 12L6.75001 16.075C6.42501 16.4 6.42501 16.925 6.75001 17.25C7.07501 17.575 7.60001 17.575 7.92501 17.25L12 13.175L16.075 17.25C16.4 17.575 16.925 17.575 17.25 17.25C17.575 16.925 17.575 16.4 17.25 16.075L13.175 12L17.25 7.92498C17.5667 7.60831 17.5667 7.07498 17.25 6.75831Z",fill:"black"})}),p("defs",{children:p("clipPath",{id:"clip0_50139_73772",children:p("rect",{width:"20",height:"20",fill:"white",transform:"translate(2 2)"})})})]}),"CrossIcon");try{Ne.displayName="CrossIcon",Ne.__docgenInfo={description:"",displayName:"CrossIcon",props:{}}}catch{}const at=s(e=>typeof e=="function","isFunction");async function rt(e,n){return await new Promise(t=>{setTimeout(()=>t(at(n)?n():n),e)})}s(rt,"delay");const In="cf-listbox-item-container",Yn="cf-action-item-container";var Jn={},cn={},Qn={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.toUtf8=e.toUtf8_3=e.toUtf8_2=e.toUtf8_1=void 0;function n(a){const o=[],r=new Array(4),d=[0,192,224,240],m=[127,63,63,63],g=[0,128,128,128];for(const y of a){const f=r,h=y.codePointAt(0),V=0-(-(h&4294967168)>>31)-(-(h&4294965248)>>31)-(-(h&4294901760)>>31),v=m[V],D=g[V];f[3]=D|h&v,f[2]=D|h>>>6&v,f[1]=D|h>>>12&v,f[0]=D|h>>>18&v;const I=3-V;f[I]|=d[V],Array.prototype.push.apply(o,f.slice(I))}return new Uint8Array(o)}s(n,"toUtf8_1"),e.toUtf8_1=n;function t(a){const o=[];for(const r of a){const d=r.codePointAt(0);d<128?o.push(d):d<2048?o.push(192|d>>6&31,128|d&63):d<65536?o.push(224|d>>12&15,128|d>>6&63,128|d&63):o.push(240|d>>18&7,128|d>>12&63,128|d>>6&63,128|d&63)}return new Uint8Array(o)}s(t,"toUtf8_2"),e.toUtf8_2=t;function l(a){const o=[];for(let r=0,d=a.length;r<d;++r){const m=a.charCodeAt(r);if(m<128)o.push(m);else if(m<2048)o.push(192|m>>6,128|m&63);else if(m<55296||m>=57344)o.push(224|m>>12,128|m>>6&63,128|m&63);else{const g=65536+((m&1023)<<10|a.charCodeAt(++r)&1023);o.push(240|g>>18&7,128|g>>12&63,128|g>>6&63,128|g&63)}}return new Uint8Array(o)}s(l,"toUtf8_3"),e.toUtf8_3=l,e.toUtf8=l,e.default=e.toUtf8})(Qn);Object.defineProperty(cn,"__esModule",{value:!0});cn.xxHash32=void 0;const it=Qn,pe=2654435761,ce=2246822519,Me=3266489917,kn=668265263,Rn=374761393;function st(e,n=0){e=typeof e=="string"?(0,it.toUtf8)(e):e;const t=e;let l=n+Rn&4294967295,a=0;if(t.length>=16){const r=[n+pe+ce&4294967295,n+ce&4294967295,n+0&4294967295,n-pe&4294967295],d=e,m=d.length-16;let g=0;for(a=0;(a&4294967280)<=m;a+=4){const y=a,f=d[y+0]+(d[y+1]<<8),h=d[y+2]+(d[y+3]<<8),V=f*ce+(h*ce<<16);let v=r[g]+V&4294967295;v=v<<13|v>>>19;const D=v&65535,I=v>>>16;r[g]=D*pe+(I*pe<<16)&4294967295,g=g+1&3}l=(r[0]<<1|r[0]>>>31)+(r[1]<<7|r[1]>>>25)+(r[2]<<12|r[2]>>>20)+(r[3]<<18|r[3]>>>14)&4294967295}l=l+e.length&4294967295;const o=e.length-4;for(;a<=o;a+=4){const r=a,d=t[r+0]+(t[r+1]<<8),m=t[r+2]+(t[r+3]<<8),g=d*Me+(m*Me<<16);l=l+g&4294967295,l=l<<17|l>>>15,l=(l&65535)*kn+((l>>>16)*kn<<16)&4294967295}for(;a<t.length;++a){const r=t[a];l=l+r*Rn,l=l<<11|l>>>21,l=(l&65535)*pe+((l>>>16)*pe<<16)&4294967295}return l=l^l>>>15,l=((l&65535)*ce&4294967295)+((l>>>16)*ce<<16),l=l^l>>>13,l=((l&65535)*Me&4294967295)+((l>>>16)*Me<<16),l=l^l>>>16,l<0?l+4294967296:l}s(st,"xxHash32");cn.xxHash32=st;(function(e){var n=De&&De.__createBinding||(Object.create?function(l,a,o,r){r===void 0&&(r=o);var d=Object.getOwnPropertyDescriptor(a,o);(!d||("get"in d?!a.__esModule:d.writable||d.configurable))&&(d={enumerable:!0,get:function(){return a[o]}}),Object.defineProperty(l,r,d)}:function(l,a,o,r){r===void 0&&(r=o),l[r]=a[o]}),t=De&&De.__exportStar||function(l,a){for(var o in l)o!=="default"&&!Object.prototype.hasOwnProperty.call(a,o)&&n(a,l,o)};Object.defineProperty(e,"__esModule",{value:!0}),t(cn,e)})(Jn);const el=s(e=>`${Jn.xxHash32(JSON.stringify(e))}`,"getHash"),mn=s(e=>{var n;return(n=(e==null?void 0:e.name)??(e==null?void 0:e.label)??(e==null?void 0:e.title)??(e==null?void 0:e.id)??e??"")==null?void 0:n.toString()},"defaultFormatDisplayValue"),ot=s((e,n)=>e.filter(t=>mn(t).includes(n??"")),"defaultFilterOptions"),ut=s(e=>e.map(n=>n.value),"mapItemsToOptions"),re=s(e=>(e??[]).map(n=>({id:(n==null?void 0:n.id)??el(n),value:n})),"mapOptionsToItems"),bn=s(e=>{var n;return((n=e==null?void 0:e.id)==null?void 0:n.toString())??el(e)},"getOptionId");function We(e){return p("div",{className:"cf-dropdown-option",children:mn(e)})}s(We,"Option$1");try{We.displayName="Option",We.__docgenInfo={description:"",displayName:"Option",props:{}}}catch{}const dt=j(`
  background-color: #FFFFFF;
  margin: 0;
  padding: 12px 16px;
  user-select: none;

  font-family: Roboto, sans-serif;
  font-size: 16px;
  font-style: normal;
  font-weight: 400;
  line-height: 150%;
  letter-spacing: 0.15px;
`),En=s(({children:e})=>p("div",{className:k(dt,"cf-no-options-container"),children:e}),"NoOptions");try{En.displayName="NoOptions",En.__docgenInfo={description:"",displayName:"NoOptions",props:{}}}catch{}const pt=j(`
  & {
    height: 48px;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
`),ct=s(()=>p("div",{className:k(pt,"cf--dropdown-loader"),children:p(qn,{color:"dark"})}),"DropdownLoader");try{qn.displayName="Loader",qn.__docgenInfo={description:"",displayName:"Loader",props:{}}}catch{}const mt=48,ft=j(`
  min-width: 100px;
  max-height: ${mt*8}px;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: #FFFFFF;
  margin: 0;
  padding: 8px 0;

  ::-webkit-scrollbar {
    width: 6px;
    height: 6px; // for horizontal scrollbar 
  }

  ::-webkit-scrollbar-track {
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background: #f3f3f3;
    border-radius: 3px;
  }

  .cf-option-selected {
    .cf-dropdown-option {
      font-weight: 600;
      background: #F3F3F3;
      * { background: #F3F3F3; }
    }
  }

  .cf-dropdown-option {
    background-color: #FFFFFF;
    cursor: pointer;
    margin: 0;
    padding: 12px 16px;
    user-select: none;

    font-family: Roboto, sans-serif;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%;
    letter-spacing: 0.15px;

    &:hover {
      background: #FAFAFA;
      * { background: #FAFAFA; }
    }
  }
`),yt="cf-option-item";function xn({actions:e=[],id:n,isLoading:t=!1,isOptionSelected:l,onClickItem:a,onScroll:o,options:r=[],renderAction:d=We,renderNoOptions:m="No items",renderOption:g=We}){const y=e.length===0&&r.length===0;return C("div",{className:k(ft,"cf-dropdown-listbox"),id:n,onScroll:o,children:[y&&!t&&typeof m=="string"&&p(En,{children:m}),y&&!t&&typeof m!="string"&&m({}),e.map(f=>{var h;return p("div",{className:k(In,Yn),id:f.id,onClick:a,children:((h=f.renderFn)==null?void 0:h.call(f,f))??d(f)},f.id)}),r.map(f=>p("div",{className:k(In,yt,l(f)&&"cf-option-selected"),id:f.id,onClick:a,children:g(f.value)},f.id)),t&&p(ct,{})]})}s(xn,"Listbox");try{xn.displayName="Listbox",xn.__docgenInfo={description:"",displayName:"Listbox",props:{actions:{defaultValue:{value:"[]"},description:"",name:"actions",required:!1,type:{name:"Action[]"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isLoading:{defaultValue:{value:"false"},description:"",name:"isLoading",required:!1,type:{name:"boolean"}},isOptionSelected:{defaultValue:null,description:"",name:"isOptionSelected",required:!0,type:{name:"(option: Item<TOption>) => boolean"}},options:{defaultValue:{value:"[]"},description:"",name:"options",required:!1,type:{name:"Items<TOption>"}},onClickItem:{defaultValue:null,description:"",name:"onClickItem",required:!0,type:{name:"MouseEventHandler<HTMLDivElement>"}},onScroll:{defaultValue:null,description:"",name:"onScroll",required:!0,type:{name:"(evt: SyntheticEvent<HTMLDivElement, UIEvent>) => void"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderNoOptions:{defaultValue:{value:"No items"},description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: TOption) => Element)"}}}}}catch{}const wn=s(()=>p("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:p("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M16.59 8.29504L12 12.875L7.41 8.29504L6 9.70504L12 15.705L18 9.70504L16.59 8.29504Z",fill:"black"})}),"DropdownOpenIcon");try{wn.displayName="DropdownOpenIcon",wn.__docgenInfo={description:"",displayName:"DropdownOpenIcon",props:{}}}catch{}const Sn=s(()=>p("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:p("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M12 8L6 14L7.41 15.41L12 10.83L16.59 15.41L18 14L12 8Z",fill:"black"})}),"DropdownCloseIcon");try{Sn.displayName="DropdownCloseIcon",Sn.__docgenInfo={description:"",displayName:"DropdownCloseIcon",props:{}}}catch{}const ht=j(`
  display: flex;
  flex-wrap: nowrap;

  .cf-dropdown-clear-button {
    cursor: pointer;
  }

  .cf-dropdown-trigger-button {
    cursor: pointer;
  }
`),On=s(({isClearVisible:e,isOpen:n,onClickTrigger:t,onMouseDownClear:l})=>C("div",{className:k(ht,"cf-dropdown-trigger-root"),children:[p("div",{className:"cf-dropdown-clear-button",onMouseDown:l,children:e&&p(Ne,{})}),p("div",{className:"cf-dropdown-trigger-button",onClick:t,children:n?p(Sn,{}):p(wn,{})})]}),"Trigger");try{On.displayName="Trigger",On.__docgenInfo={description:"",displayName:"Trigger",props:{isClearVisible:{defaultValue:null,description:"",name:"isClearVisible",required:!0,type:{name:"boolean"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!0,type:{name:"boolean"}},onClickTrigger:{defaultValue:null,description:"",name:"onClickTrigger",required:!0,type:{name:"MouseEventHandler<HTMLDivElement>"}},onMouseDownClear:{defaultValue:null,description:"",name:"onMouseDownClear",required:!0,type:{name:"MouseEventHandler<HTMLDivElement>"}}}}}catch{}const Vt=j(`
  --cf-display-height: 56px;
  --cf-display-line-height: 24px;
  --cf-display-color: #101010;
  --cf-label-color: rgba(33, 33, 33, 0.80);
  --cf-display-border-color: #DDB3A0;
  --cf-display-border-focus-color: #C99B86;
  --cf-display-background-color: #FAFAFA;
  --cf-display-disabled-color: rgba(21, 21, 21, 0.4);
  --cf-display-label-error-color: rgba(176, 0, 32, 0.80);
  --cf-display-error-color: #B00020;
  --cf-display-border-radius: 12px;
  --cf-adornment-min-width: 10px;
  --cf-transition-speed: 0.3s;
  --cf-transition-func: cubic-bezier(0.2, 0.8, 0.25, 1);

  &.cf-select-display-container {
    height: var(--cf-display-height);
    background-color: var(--cf-display-background-color);
    position: relative;
    display: flex;
    align-items: flex-start;
    font-family: Roboto, sans-serif;
    padding: 0px 16px;
    width: 100%;
    border-radius: var(--cf-display-border-radius);
    box-sizing: border-box;
    border: 1px solid transparent;
    transition: border-color var(--cf-transition-speed) var(--cf-transition-func);
    cursor: pointer;
  }

  .cf-display {
    color: var(--cf-display-color);
    height: var(--cf-display-line-height);
    width: 100%;
    background-color: transparent;
    font-family: Roboto, sans-serif;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 150%
    letter-spacing: 0.15px;
    padding: 16px 0px;
    box-sizing: content-box;
    border: none;
    outline: none;
    resize: none;
  }

  &:hover {
    border-color: var(--cf-display-border-color);
  }

  &:focus {
    border-color: var(--cf-display-border-focus-color);
  }

  .cf-display-adornment {
    font-size: inherit;
    font-weight: inherit;
    color: inherit;
    padding: 16px 0px;
    line-height: 24px;
  }

  .cf-start-adornment {
    padding-right: 4px;
    position: relative;
    visibility: visible;
  }

  .cf-end-adornment {
    font-size: 12px;
    font-weight: 400;
    white-space: nowrap;
    padding-left: 8px;
  }

  .cf-display-label {
    position: absolute;
    z-index: 2;
    line-height: 24px;
    left: 16px;
    top: 16px;
    font-size: 16px;
    width: max-content;
    color: var(--cf-label-color);
    pointer-events: none;
    will-change: transform;
    transition: transform var(--cf-transition-speed) var(--cf-transition-func);
    user-select: none;
  }

  &.with-label {  
    .cf-display {
      padding: 24px 0px 0px;
    }

    .cf-start-adornment {
      padding: 24px 4px 0px 0px;
      visibility: hidden;
      position: absolute;
    }
  }

  &.with-value .cf-display-label,
  &.with-label-focused .cf-display-label {
    // 25% from starting size would shrink from both sides
    // 12.5% = 25% / 2 (to adjsut left side only)
    transform: translate3d(-12.5%, -16px, 0) scale(0.75);
  }

  &.with-error {
    border-color: var(--cf-display-error-color);

    .cf-display-label {
      color: var(--cf-display-label-error-color);
    }

    .cf-start-adornment {
      color: var(--cf-display-error-color);
    }
  }

  &.disabled {
    border-color: transparent;

    .cf-display-adornment,
    .cf-display-label,
    .cf-display {
      color: var(--cf-display-disabled-color);
    }

    .cf-dropdown-trigger-button {
      opacity: 0.5;
    }
  }
`);function Ln({endAdornment:e,error:n,disabled:t,label:l,onBlur:a,onClick:o,onFocus:r,containerRef:d,startAdornment:m,value:g}){const y=k(Vt,"cf-select-display-container",{"with-adornment":m!=null,"with-label":Xn(l),"with-value":Boolean(g),"with-error":Kl(n),disabled:t});return C("div",{className:y,onBlur:a,onClick:o,onFocus:r,ref:d,tabIndex:0,children:[m!=null&&p("div",{className:k("cf-start-adornment","cf-display-adornment"),children:m}),p("div",{className:"cf-display",children:g}),l!=null&&p("div",{className:"cf-display-label",children:l}),e!=null&&p("div",{className:k("cf-end-adornment","cf-display-adornment"),children:e})]})}s(Ln,"SelectDisplay");try{Ln.displayName="SelectDisplay",Ln.__docgenInfo={description:"",displayName:"SelectDisplay",props:{endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},containerRef:{defaultValue:null,description:"",name:"containerRef",required:!0,type:{name:"RefObject<HTMLDivElement>"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},selectedItems:{defaultValue:null,description:"",name:"selectedItems",required:!1,type:{name:"Items<TOption>"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"string | null"}}}}}catch{}const bt=j(`
  &.cf-popover-content {
    padding: 0;
    border-radius: 8px;
    background: #FFFFFF;
    box-shadow: 0px 24px 38px 0px rgba(58, 71, 78, 0.10);
  }
`);var Be={},gt={get exports(){return Be},set exports(e){Be=e}},fe=typeof Reflect=="object"?Reflect:null,Un=fe&&typeof fe.apply=="function"?fe.apply:s(function(n,t,l){return Function.prototype.apply.call(n,t,l)},"ReflectApply"),_e;fe&&typeof fe.ownKeys=="function"?_e=fe.ownKeys:Object.getOwnPropertySymbols?_e=s(function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))},"ReflectOwnKeys"):_e=s(function(n){return Object.getOwnPropertyNames(n)},"ReflectOwnKeys");function vt(e){console&&console.warn&&console.warn(e)}s(vt,"ProcessEmitWarning");var nl=Number.isNaN||s(function(n){return n!==n},"NumberIsNaN");function x(){x.init.call(this)}s(x,"EventEmitter");gt.exports=x;Be.once=xt;x.EventEmitter=x;x.prototype._events=void 0;x.prototype._eventsCount=0;x.prototype._maxListeners=void 0;var zn=10;function fn(e){if(typeof e!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}s(fn,"checkListener");Object.defineProperty(x,"defaultMaxListeners",{enumerable:!0,get:function(){return zn},set:function(e){if(typeof e!="number"||e<0||nl(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");zn=e}});x.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};x.prototype.setMaxListeners=s(function(n){if(typeof n!="number"||n<0||nl(n))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+n+".");return this._maxListeners=n,this},"setMaxListeners");function ll(e){return e._maxListeners===void 0?x.defaultMaxListeners:e._maxListeners}s(ll,"_getMaxListeners");x.prototype.getMaxListeners=s(function(){return ll(this)},"getMaxListeners");x.prototype.emit=s(function(n){for(var t=[],l=1;l<arguments.length;l++)t.push(arguments[l]);var a=n==="error",o=this._events;if(o!==void 0)a=a&&o.error===void 0;else if(!a)return!1;if(a){var r;if(t.length>0&&(r=t[0]),r instanceof Error)throw r;var d=new Error("Unhandled error."+(r?" ("+r.message+")":""));throw d.context=r,d}var m=o[n];if(m===void 0)return!1;if(typeof m=="function")Un(m,this,t);else for(var g=m.length,y=sl(m,g),l=0;l<g;++l)Un(y[l],this,t);return!0},"emit");function tl(e,n,t,l){var a,o,r;if(fn(t),o=e._events,o===void 0?(o=e._events=Object.create(null),e._eventsCount=0):(o.newListener!==void 0&&(e.emit("newListener",n,t.listener?t.listener:t),o=e._events),r=o[n]),r===void 0)r=o[n]=t,++e._eventsCount;else if(typeof r=="function"?r=o[n]=l?[t,r]:[r,t]:l?r.unshift(t):r.push(t),a=ll(e),a>0&&r.length>a&&!r.warned){r.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+r.length+" "+String(n)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=e,d.type=n,d.count=r.length,vt(d)}return e}s(tl,"_addListener");x.prototype.addListener=s(function(n,t){return tl(this,n,t,!1)},"addListener");x.prototype.on=x.prototype.addListener;x.prototype.prependListener=s(function(n,t){return tl(this,n,t,!0)},"prependListener");function qt(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}s(qt,"onceWrapper");function al(e,n,t){var l={fired:!1,wrapFn:void 0,target:e,type:n,listener:t},a=qt.bind(l);return a.listener=t,l.wrapFn=a,a}s(al,"_onceWrap");x.prototype.once=s(function(n,t){return fn(t),this.on(n,al(this,n,t)),this},"once");x.prototype.prependOnceListener=s(function(n,t){return fn(t),this.prependListener(n,al(this,n,t)),this},"prependOnceListener");x.prototype.removeListener=s(function(n,t){var l,a,o,r,d;if(fn(t),a=this._events,a===void 0)return this;if(l=a[n],l===void 0)return this;if(l===t||l.listener===t)--this._eventsCount===0?this._events=Object.create(null):(delete a[n],a.removeListener&&this.emit("removeListener",n,l.listener||t));else if(typeof l!="function"){for(o=-1,r=l.length-1;r>=0;r--)if(l[r]===t||l[r].listener===t){d=l[r].listener,o=r;break}if(o<0)return this;o===0?l.shift():It(l,o),l.length===1&&(a[n]=l[0]),a.removeListener!==void 0&&this.emit("removeListener",n,d||t)}return this},"removeListener");x.prototype.off=x.prototype.removeListener;x.prototype.removeAllListeners=s(function(n){var t,l,a;if(l=this._events,l===void 0)return this;if(l.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):l[n]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete l[n]),this;if(arguments.length===0){var o=Object.keys(l),r;for(a=0;a<o.length;++a)r=o[a],r!=="removeListener"&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(t=l[n],typeof t=="function")this.removeListener(n,t);else if(t!==void 0)for(a=t.length-1;a>=0;a--)this.removeListener(n,t[a]);return this},"removeAllListeners");function rl(e,n,t){var l=e._events;if(l===void 0)return[];var a=l[n];return a===void 0?[]:typeof a=="function"?t?[a.listener||a]:[a]:t?Et(a):sl(a,a.length)}s(rl,"_listeners");x.prototype.listeners=s(function(n){return rl(this,n,!0)},"listeners");x.prototype.rawListeners=s(function(n){return rl(this,n,!1)},"rawListeners");x.listenerCount=function(e,n){return typeof e.listenerCount=="function"?e.listenerCount(n):il.call(e,n)};x.prototype.listenerCount=il;function il(e){var n=this._events;if(n!==void 0){var t=n[e];if(typeof t=="function")return 1;if(t!==void 0)return t.length}return 0}s(il,"listenerCount");x.prototype.eventNames=s(function(){return this._eventsCount>0?_e(this._events):[]},"eventNames");function sl(e,n){for(var t=new Array(n),l=0;l<n;++l)t[l]=e[l];return t}s(sl,"arrayClone");function It(e,n){for(;n+1<e.length;n++)e[n]=e[n+1];e.pop()}s(It,"spliceOne");function Et(e){for(var n=new Array(e.length),t=0;t<n.length;++t)n[t]=e[t].listener||e[t];return n}s(Et,"unwrapListeners");function xt(e,n){return new Promise(function(t,l){function a(r){e.removeListener(n,o),l(r)}s(a,"errorListener");function o(){typeof e.removeListener=="function"&&e.removeListener("error",a),t([].slice.call(arguments))}s(o,"resolver"),ol(e,n,o,{once:!0}),n!=="error"&&wt(e,a,{once:!0})})}s(xt,"once");function wt(e,n,t){typeof e.on=="function"&&ol(e,"error",n,t)}s(wt,"addErrorHandlerIfEventEmitter");function ol(e,n,t,l){if(typeof e.on=="function")l.once?e.once(n,t):e.on(n,t);else if(typeof e.addEventListener=="function")e.addEventListener(n,s(function a(o){l.once&&e.removeEventListener(n,a),t(o)},"wrapListener"));else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e)}s(ol,"eventTargetAgnosticAddListener");const St=20,Ot=.2,Lt=8,Ct=1e3,Pn={all:0,prev:-1},gn=s(e=>({search:"",skip:0,take:e}),"getInitLoadOptions"),Ht=s(({isAutorun:e=!0,fetch:n,pageSize:t=St,propIdName:l})=>{const[a,o]=i.useState(!1),[r,d]=i.useState(""),[m,g]=i.useState([]),y=i.useRef({...Pn}),f=i.useRef({search:r,options:gn(t)}),h=i.useRef(n),V=me(e),v=i.useRef(!0),D=me(t),I=i.useCallback(Yl(async(F,b=!1)=>{try{if(b)f.current.options=gn(D.current);else if(y.current.prev===0)return;const E=await h.current({...f.current.options,search:F??f.current.search});y.current.prev=E.items.length,g(M=>b?E.items:M.concat(E.items)),f.current.options.skip+=D.current}catch{console.error("fetching items failed")}finally{o(!1)}},Ct),[]),A=i.useCallback(async(F,b=!1)=>{o(!0),I(F,b)},[I]),R=i.useCallback(()=>{v.current=!0,y.current={...Pn},f.current={search:"",options:gn(t)},o(!1),g([])},[]);return i.useEffect(()=>{h.current=n},[n]),i.useEffect(()=>{f.current.search=r},[r]),i.useEffect(()=>{const F=y.current.all;if(y.current.all=m.length,m.length<F||F<=Lt)return;const b=document.getElementById(`${l}-popup`);b==null||b.style.setProperty("scroll-behavior","smooth"),b!=null&&(b.scrollTop+=b.clientHeight*Ot,b==null||b.style.setProperty("scroll-behavior","none"))},[m.length,l]),i.useEffect(()=>{if(!V.current&&v.current){v.current=!1;return}A(r,!0)},[A,r]),{isLoading:a,items:m,getItems:A,resetState:R,setSearch:d,search:r}},"useAutocompleteInfiniteList"),vn="action-triggered",Dt=200,Ft=[],Mt=10,Gn='For the "create" blurMode the "createOptionFromInput" option is required. Switched to "clear" mode.',At=10;function Tt({actions:e=Ft,blurMode:n,createOptionFromInput:t,defaultValue:l,disabled:a=!1,disableClearable:o=!1,id:r,isDebug:d=!1,isOpen:m,isMultiselect:g,inputValue:y,fetchHandler:f,filterOptions:h=ot,formatDisplayValue:V=mn,mode:v="search",onChange:D,onChangeInput:I,options:A,pageSize:R,refInput:F,refSelectDisplay:b,value:E}){const[M,yn]=i.useState(m??!1),[B,Q]=i.useState(A??[]),[$,hn]=i.useState(re(A)),[ie,se]=i.useState([]),_=f!=null,oe=Boolean(g??!1),K=i.useRef(new Map([])),qe=i.useRef(!1),Ie=i.useRef(0),[U,z]=i.useState(y??null),[ee,X]=i.useState(y??null),Ee=Boolean(U)||ie.length>0,ne=i.useRef(new Be),ue=i.useRef(null),Mn=i.useRef(null),xe=i.useRef("idle"),An=i.useRef("idle"),de=i.useRef(!1),Il=i.useRef($),Tn=me(oe),El=me(y),ye=me(B),xl=me(v),_n=i.useRef(M),H=i.useCallback((...c)=>{console.debug(`${r} :: `,...c)},[r,d]),we=i.useMemo(()=>t===void 0&&n==="create"?(console.error(Gn),"clear"):n??(o?"select-first":"clear"),[n,t,o]),Se=i.useCallback(c=>{_n.current=c,yn(c)},[]),wl=i.useCallback(async(...c)=>f==null||!_n.current?{items:[]}:await f(...c),[f]),{isLoading:Sl,getItems:le,items:he,resetState:Ol,setSearch:Ll}=Ht({isAutorun:!1,fetch:wl,pageSize:R,propIdName:r}),Nn=i.useCallback(()=>{var c;de.current||(c=F.current)==null||c.focus()},[]),Wn=i.useCallback(()=>{var c;de.current||(c=b.current)==null||c.focus()},[]),Z=i.useCallback(()=>{a||(v==="select"?Wn():v==="search"&&Nn())},[a,v,Wn,Nn]),Oe=i.useCallback(()=>{a||M||(Se(!0),_&&(H("openDropdown :: fired getItems by search :: ",ee),Q([]),le(ee??"",!0)))},[a,ee,he,_,M,Se]),Ve=i.useCallback(()=>{a||!M||Se(!1)},[a,M,Se]),Le=i.useCallback(()=>{a||(K.current=new Map,se([]))},[a]),P=i.useCallback(c=>{H(`sm :: "${xe.current}" ======> "${c}"`),An.current=xe.current,xe.current=c},[]),N=i.useCallback(c=>{H(`sm :: dispatched action "${c}"`),ue.current=c,ne.current.emit(vn)},[]),te=i.useCallback(c=>{Il.current=c,hn(c)},[]),W=i.useCallback(c=>{const q=ye.current,L=Array.from(K.current.values()),S=h(q,c??"",ut(L)),Y=re(S);te(Y)},[h,te]),G=i.useMemo(()=>{function c(q){return D}return s(c,"getOnChangeFn"),c()},[D,oe]),be=i.useCallback((c,q="select-option")=>{const S=(q==="blur-select-first"?re(ye.current):$).find(Y=>bn(Y.value)===c);S!=null&&(Tn.current||(K.current=new Map([[S.id,S]]),G!=null?G(r,S.value,q):se([S]),X(null),z(V(S.value))))},[V,r,$,G,B]),ae=i.useCallback(c=>{setTimeout(c,Dt)},[]),Vn=i.useCallback(()=>{var q;if(v==="select"||oe)return;const c=V((q=ie[0])==null?void 0:q.value)===U;if(we==="clear"){if(c){B.length!==$.length&&ae(()=>{W(null)});return}const L=null;ae(()=>{G!=null?G(r,null,"blur-clear"):(Le(),W(L)),I!==void 0?I==null||I(L,"blur-clear"):(z(L),X(L))});return}if(we==="create"&&!c&&Xn(U)){if(t==null||U==null){console.error(Gn);return}ae(()=>{const L=t(U);ye.current=ye.current.concat([L]),Q(ye.current);const S=re([L])[0];S!=null&&(be(bn(S),"blur-create"),I==null||I(V(S.value),"blur-create"),W(null))});return}if(we==="select-first"&&!c){const L=re(B.slice(0,1))[0];L!=null&&ae(()=>{be(bn(L),"blur-select-first"),I==null||I(V(L.value),"blur-select-first"),W(null)})}},[we,Le,t,ae,U,r,oe,$,v,G,I,ie,be,W,B]),Cl=i.useCallback(c=>K.current.has(c.id),[]),Hl=i.useCallback(c=>{if(c.preventDefault(),a)return;const q=null;X(q),z(q),G!=null?G(r,null,"clear"):(Le(),W(q)),I==null||I(q,"input"),N("clear-click")},[Le,a,r,G,W]),Dl=i.useCallback(c=>{a||N("trigger-click")},[a,N]),Fl=i.useCallback(c=>{H("onFocusContainer :: start")},[]),Ml=i.useCallback(c=>{H("onBlurContainer :: start"),N("container-blur")},[]),Al=i.useCallback(c=>{const q=c.target.value;I!==void 0?I(q,"input",c):(X(q),z(q)),_?(H("hook :: onChangeInput :: ",q),le(q,!0),Q([])):W(q),N("input-change")},[I,le,_,Ol,te,W,Ll]),Tl=i.useCallback(c=>{de.current=!0},[]),_l=i.useCallback(c=>{de.current=!1},[]),Nl=i.useCallback(c=>{N("input-click")},[N]),Wl=i.useCallback(c=>{de.current=!0},[]),Bl=i.useCallback(c=>{de.current=!1},[]),kl=i.useCallback(c=>{a||N("select-display-click")},[a,N]),Rl=i.useCallback(()=>{N("popover-close-requested")},[N]),Ul=i.useCallback(c=>{const q=c.currentTarget;if(!c.currentTarget.classList.contains(In))return;const S=q.classList.contains(Yn),Y=q.getAttribute("id")??"";if(S){const Ce=e.find(Pl=>Pl.id===Y);Ce==null||Ce.onClick(Ce.id)}else be(Y);N("option-click"),v==="search"&&!S&&ae(()=>{W(null)})},[e,ae,N,v,B,be,te]),zl=i.useCallback(c=>{if(!_)return;const{scrollHeight:q,scrollTop:L,clientHeight:S}=c.currentTarget;Math.abs(L-Ie.current)<=At||q-L<=S+Mt&&(Ie.current=L,le(ee??""))},[_,le,ee]);return i.useEffect(()=>{if(_){H(r,"EffectOptions :: fetchedOptions :: ",he,A);const c=he.length===0?A??[]:he;Q(c);return}!_&&A===void 0||Q(A??[])},[_,A,he]),i.useEffect(()=>{H("EffectRawOptions :: rawOptions :: ",B),te(re(B))},[B,te]),i.useEffect(()=>{if(Tn.current)return;H("EffectValue :: defaultValue, value :: ",l,E);const c=E!==void 0?E:qe.current?void 0:l;if(qe.current=!0,c===void 0)return;if(K.current=new Map,c===null){se([]),z("");return}const q=re([c])[0];K.current.set(q.id,q),se([q]),El.current===void 0&&z(V(q.value))},[l,E,V]),i.useEffect(()=>{y!==void 0&&xl.current==="search"&&(H("EffectInputValue :: _inputValue :: ",y),X(y??""),z(y??""),_?(le(y??"",!0),te([])):W(y??""))},[y,_,le,W]),i.useEffect(()=>{const c=s(()=>{const q=Mn.current,L=ue.current,S=xe.current,Y=An.current;switch(H(`sm :: received action :: "${L??"-"}"`),H(`sm :: previous action :: "${q??"-"}"`),H(`sm :: currState :: "${S}"`),H(`sm :: prevState :: "${Y}"`),L){case"trigger-click":{v==="search"&&(["idle","focused-collapsed"].includes(S)?(Oe(),Z(),P("focused-expanded")):S==="focused-expanded"&&(Ve(),Z(),P("focused-collapsed")));break}case"select-display-click":{["idle","focused-collapsed"].includes(S)?(Oe(),Z(),P("focused-expanded")):S==="focused-expanded"&&(Ve(),Z(),P("focused-collapsed"));break}case"input-click":case"input-change":{["idle","focused-collapsed"].includes(S)&&(Oe(),Z(),P("focused-expanded"));break}case"option-click":{Ve(),Z(),P("focused-collapsed");break}case"clear-click":{Z();break}case"popover-close-requested":{Ve(),Vn(),S==="focused-expanded"&&P("idle");break}case"container-blur":{if(M){H('skip action because of: "isDropdownOpen" reason');break}if(q==="trigger-click"){H('skip action because of: "prevUIAction === trigger-click" reason');break}Vn(),P("idle");break}}Mn.current=ue.current,H("sm :: ===============================")},"processAction");return H("sm :: subscribed"),ne.current.on(vn,c),()=>{H("sm :: un-subscribed"),ne.current.off(vn,c)}},[Ve,M,P,Z,Oe,Vn]),{displayValue:y??U,isClearVisible:!o&&Ee,isDropdownOpen:m??M,isLoading:Sl,isOptionSelected:Cl,itemsToRender:$,onBlurContainer:Ml,onBlurInput:_l,onBlurSelectDisplay:Bl,onChangeInput:Al,onClickInput:Nl,onClickListboxItem:Ul,onClickSelectDisplay:kl,onClickTrigger:Dl,onClosePopover:Rl,onFocusContainer:Fl,onFocusInput:Tl,onFocusSelectDisplay:Wl,onMouseDownClear:Hl,onScrollListbox:zl,selectedItems:ie}}s(Tt,"useDropdown");function T({className:e,dataTestId:n,endAdornment:t,label:l,mode:a="search",renderAction:o,renderListbox:r=xn,renderNoOptions:d,renderOption:m,renderSelectDisplay:g=Ln,placeholder:y,startAdornment:f,style:h,...V}){const v=i.useRef(null),D=i.useRef(null),I=i.useRef(null),{displayValue:A,isClearVisible:R,isDropdownOpen:F,isLoading:b,isOptionSelected:E,itemsToRender:M,onBlurContainer:yn,onBlurInput:B,onBlurSelectDisplay:Q,onChangeInput:$,onClickInput:hn,onClickListboxItem:ie,onClickSelectDisplay:se,onClickTrigger:_,onClosePopover:oe,onFocusContainer:K,onFocusInput:qe,onFocusSelectDisplay:Ie,onMouseDownClear:U,onScrollListbox:z}=Tt({...V,mode:a,refRoot:v,refInput:D,refSelectDisplay:I}),{actions:ee,disabled:X,error:Ee,id:ne}=V,ue=t??p(On,{isClearVisible:R,isOpen:F,onClickTrigger:_,onMouseDownClear:U});return C("div",{id:`${ne}-container`,className:k("cf-dropdown-root",e),"data-test-id":n,onBlur:yn,onFocus:K,ref:v,tabIndex:0,style:h,children:[a==="search"&&p(Zn,{autoComplete:"off",disabled:X,endAdornment:ue,error:Ee,id:`${ne}-input`,inputRef:D,label:l,onBlur:B,onChange:$,onClick:hn,onFocus:qe,placeholder:y,startAdornment:f,value:A}),a==="select"&&p(g,{containerRef:I,disabled:X,endAdornment:ue,error:Ee,label:l,onBlur:Q,onClick:se,onFocus:Ie,selectedItems:[],startAdornment:f,value:A}),p(Zl,{className:bt,isOpen:F,isSameWidth:!0,onClose:oe,anchorEl:v,children:p(r,{actions:ee,id:`${ne}-popup`,isLoading:b,isOptionSelected:E,onClickItem:ie,onScroll:z,options:M,renderAction:o,renderNoOptions:d,renderOption:m})})]})}s(T,"Dropdown");try{T.displayName="Dropdown",T.__docgenInfo={description:"",displayName:"Dropdown",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = TOption>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: TOption) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<TOption>) => Element)"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => TOption)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"TOption | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<TOption>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: TOption[], inputValue: string, value: TOption[]) => TOption[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: TOption | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:{value:"search"},description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<TOption | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"TOption[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"TOption | null"}}}}}catch{}function Cn(e){const n=i.useMemo(()=>Xl(T),[]);return p(n,{...e})}s(Cn,"FormFieldHOC");try{Cn.displayName="FormFieldHOC",Cn.__docgenInfo={description:"",displayName:"FormFieldHOC",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => TOption)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"ConditionalValue<TOption[], TOption | null, TIsMultiple>"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<TOption>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: TOption[], inputValue: string, value: TOption[]) => TOption[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: TOption | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"boolean"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<ConditionalValue<TOption[], TOption | null, TIsMultiple>>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"TOption[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = TOption>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: TOption) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<TOption>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"DefaultError"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"ReactNode"}},showError:{defaultValue:null,description:"",name:"showError",required:!1,type:{name:"boolean"}},helper:{defaultValue:null,description:"",name:"helper",required:!1,type:{name:"ReactNode"}},touched:{defaultValue:null,description:"",name:"touched",required:!1,type:{name:"boolean | null"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"DV<TOption, TIsMultiple>"}}}}}catch{}const _t=j(`
  background-color: #FFFFFF;
  cursor: pointer;
  margin: 0px;
  padding: 0px;
  user-select: none;
  display: flex;
  justify-content: space-between;

  font-family: Roboto, sans-serif;
  font-size: 16px;
  font-style: normal;
  font-weight: 400;
  line-height: 150%;
  letter-spacing: 0.15px;
  color: blue;

  &:hover {
    background-color: #FAFAFA;
  }

  .cf-indicator-container .cf-indicator {
    width: 12px;
    height: 12px;
    background-color: green;
    border-radius: 50%;
  }
`);function Hn(e){return C("div",{className:k(_t,"cf-dropdown-option","cf-custom-option"),children:[p("div",{children:mn(e)}),p("div",{className:"cf-indicator-container",children:p("div",{className:"cf-indicator"})})]})}s(Hn,"Option");try{Hn.displayName="Option",Hn.__docgenInfo={description:"",displayName:"Option",props:{}}}catch{}const w=s(()=>Fn(3e3).map(e=>`Item #${e+1}`),"DEFAULT_STRING_OPTIONS");function O(e){return n=>p(T,{...e,...n})}s(O,"DropdownExampleHOC$2");const ke=O({id:"search-example",mode:"search",options:w()}),Re=O({id:"search-with-label-example",label:"Label Example",mode:"search",options:w()}),Ue=O({id:"search-with-error-example",error:!0,label:"Error Example",mode:"search",options:w()}),ze=O({id:"search-with-error-example",disabled:!0,error:!0,label:"Error Example",mode:"search",options:w()}),Pe=O({id:"search-with-start-adornment-example",label:"Start Icon Example (click me)",mode:"search",options:w(),startAdornment:"+"}),Ge=O({id:"select-with-actions-example",actions:[{id:"+ Add Vendor",onClick:()=>{alert('"Add Vendor" action')}},{id:"+ Add Customer",onClick:()=>{alert('"Add Customer" action')}}],label:"Actions Example",mode:"search",options:w()}),je=O({id:"search-with-default-value-example",label:"Default Value Example",mode:"search",defaultValue:w()[2],options:w()}),$e=O({id:"search-with-disable-clearable-example",label:"Non-clearable Example",mode:"search",defaultValue:w()[3],disableClearable:!0,options:w()}),Ke=O({id:"search-with-empty-options-example",label:"Default Value with No Options Example",mode:"search",defaultValue:w()[4],options:[]}),Xe=O({id:"search-blur-clear-example",blurMode:"clear",label:'Blur "clear" Example',mode:"search",options:w()}),Ze=O({id:"search-blur-create-example",blurMode:"create",createOptionFromInput:e=>e,label:'Blur "create" Example',mode:"search",options:w().slice(0,3)}),Ye=O({id:"search-blur-select-first-example",blurMode:"select-first",label:'Blur "select-first" Example',mode:"search",options:w()}),Je=O({id:"select-example",mode:"select",options:w()}),ve=O({id:"select-with-label-example",label:"Label Example",mode:"select",options:w()}),Qe=O({error:!0,id:"select-with-error-example",label:"Error Example",mode:"select",options:w()}),en=O({error:!0,disabled:!0,id:"select-disabled-example",label:"Disabled Example",mode:"select",options:w(),value:w()[0]}),nn=O({id:"select-with-no-options-example",label:"No Items Example",mode:"select",options:[]}),ln=O({id:"select-with-start-adornment-example",label:"Start Icon Example (TBD)",mode:"select",options:w(),startAdornment:p(Ne,{})}),tn=O({id:"select-with-actions-example",actions:[{id:"+ Add Vendor",onClick:()=>{alert('"Add Vendor" action')}},{id:"+ Add Customer",onClick:()=>{alert('"Add Customer" action')}}],label:"Actions Example",mode:"select",options:w()}),an=O({id:"select-with-custom-option-example",label:"Custom Option Example",mode:"select",options:w(),renderOption:Hn}),rn=O({id:"select-with-default-value-example",label:"Default Value Example",mode:"select",defaultValue:w()[2],options:w()}),sn=O({id:"select-with-disable-clearable-example",label:"Non-clearable Example",mode:"select",defaultValue:w()[2],disableClearable:!0,options:w()}),ul=s(()=>C("div",{style:{display:"flex",flexDirection:"column",gap:"20px"},children:[p(ve,{style:{maxWidth:400}}),p("div",{style:{marginTop:250},children:p(tt,{chart:`
        stateDiagram-v2
          [*] --> Idle

          Idle --> FocusedExpanded: click on SelectDisplay
          Idle --> FocusedExpanded: click on Trigger
          FocusedExpanded --> FocusedCollapsed: click on Trigger
          FocusedExpanded --> FocusedCollapsed: click on SelectDisplay
          FocusedExpanded --> FocusedCollapsed: click on Option/Action
          FocusedExpanded --> Idle: click outside

          Idle --> FocusedCollapsed: click on Clear
          FocusedCollapsed --> FocusedExpanded: click on Trigger
          FocusedCollapsed --> Idle: click outside
      `})})]}),"SelectExpandColapse");function dl(){const[e]=i.useState(w()),[n,t]=i.useState(null),[l,a]=i.useState(null);return p(Cn,{id:"form-select-example",error:l,style:{minWidth:400},mode:"select",value:n,options:e,touched:!0,onChange:(o,r)=>{t(r),r===e[2]?a("Ups, this is not allowed"):a(null)}})}s(dl,"FormSelectExample");try{O.displayName="DropdownExampleHOC",O.__docgenInfo={description:"",displayName:"DropdownExampleHOC",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = TOption>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: TOption) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<TOption>) => Element)"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => TOption)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"TOption | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<TOption>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: TOption[], inputValue: string, value: TOption[]) => TOption[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: TOption | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<TOption | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"TOption[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"TOption | null"}}}}}catch{}try{T.displayName="Dropdown",T.__docgenInfo={description:"",displayName:"Dropdown",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = TOption>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: TOption) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<TOption>) => Element)"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => TOption)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"TOption | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<TOption>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: TOption[], inputValue: string, value: TOption[]) => TOption[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: TOption | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:{value:"search"},description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<TOption | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"TOption[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"TOption | null"}}}}}catch{}try{ke.displayName="SearchExample",ke.__docgenInfo={description:"",displayName:"SearchExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Re.displayName="SearchWithLabelExample",Re.__docgenInfo={description:"",displayName:"SearchWithLabelExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Ue.displayName="SearchWithErrorExample",Ue.__docgenInfo={description:"",displayName:"SearchWithErrorExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{ze.displayName="SearchDisabledExample",ze.__docgenInfo={description:"",displayName:"SearchDisabledExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Pe.displayName="SearchWithStartAdornmentExample",Pe.__docgenInfo={description:"",displayName:"SearchWithStartAdornmentExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Ge.displayName="SearchWithActionsExample",Ge.__docgenInfo={description:"",displayName:"SearchWithActionsExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{je.displayName="SearchWithDefaultValueExample",je.__docgenInfo={description:"",displayName:"SearchWithDefaultValueExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{$e.displayName="SearchWithDisableClearableExample",$e.__docgenInfo={description:"",displayName:"SearchWithDisableClearableExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Ke.displayName="SearchWithDefaultValueNoOptionsExample",Ke.__docgenInfo={description:"",displayName:"SearchWithDefaultValueNoOptionsExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Xe.displayName="SearchBlurClearExample",Xe.__docgenInfo={description:"",displayName:"SearchBlurClearExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Ze.displayName="SearchBlurCreateExample",Ze.__docgenInfo={description:"",displayName:"SearchBlurCreateExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Ye.displayName="SearchBlurSelectFirstExample",Ye.__docgenInfo={description:"",displayName:"SearchBlurSelectFirstExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Je.displayName="SelectExample",Je.__docgenInfo={description:"",displayName:"SelectExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{ve.displayName="SelectWithLabelExample",ve.__docgenInfo={description:"",displayName:"SelectWithLabelExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{Qe.displayName="SelectWithErrorExample",Qe.__docgenInfo={description:"",displayName:"SelectWithErrorExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{en.displayName="SelectDisabledExample",en.__docgenInfo={description:"",displayName:"SelectDisabledExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{nn.displayName="SelectWithNoOptionsExample",nn.__docgenInfo={description:"",displayName:"SelectWithNoOptionsExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => never)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<never>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: never[], inputValue: string, value: never[]) => never[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"never[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = never>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: never) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<never>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{ln.displayName="SelectWithStartAdornmentExample",ln.__docgenInfo={description:"",displayName:"SelectWithStartAdornmentExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{tn.displayName="SelectWithActionsExample",tn.__docgenInfo={description:"",displayName:"SelectWithActionsExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{an.displayName="SelectWithCustomOptionExample",an.__docgenInfo={description:"",displayName:"SelectWithCustomOptionExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{rn.displayName="SelectWithDefaultValueExample",rn.__docgenInfo={description:"",displayName:"SelectWithDefaultValueExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{sn.displayName="SelectWithDisableClearableExample",sn.__docgenInfo={description:"",displayName:"SelectWithDisableClearableExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => string)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"string | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<string>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: string[], inputValue: string, value: string[]) => string[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: string | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<string | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"string[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"string | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = string>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: string) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<string>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}const Nt=j(`
  background-color: #FFFFFF;
  margin: 0;
  padding: 12px 16px;
  user-select: none;
  display: flex;
  flex-direction: column;
  gap: 24px;

  font-family: Roboto, sans-serif;
  font-size: 16px;
  font-style: normal;
  font-weight: 400;
  line-height: 150%;
  letter-spacing: 0.15px;

  .cf-actions-row {
    display: flex;
    min-height: 56px;
    gap: 16px;
  }

  .cf-actions-cell {
    display: flex;
    flex-direction: column;
    gap: 16px;
    max-width: fit-content;
  }

  .cf-options-number,
  .cf-selected-option-id,
  .cf-dropdown-modes-select {
    width: 256px;
  }

  .cf-controlled-dropdown {
    width: 512px;
  }
`),jn=[{id:"clear",name:'"clear" mode'},{id:"create",name:'"create" mode'},{id:"select-first",name:'"select-first" mode'}],$n=s(e=>Fn(e).map(n=>({id:n,name:`Item #${n}`})),"getOptions$1");function Wt(e){const[n,t]=i.useState(100),[l,a]=i.useState(null),[o,r]=i.useState(!1),[d,m]=i.useState(!1),[g,y]=i.useState(!1),[f,h]=i.useState($n(100)),[V,v]=i.useState(null),[D,I]=i.useState("clear"),[A,R]=i.useState(""),F=i.useRef(f);return i.useEffect(()=>(s(()=>{F.current=$n(n),h(F.current),a(E=>E!=null&&n>0?Math.min(E,n-1):null)},"runEffect")(),()=>{}),[n]),i.useEffect(()=>(s(()=>{const E=F.current;if(l==null){v(null),R(null);return}if(l<E.length){const M=E[l];v(M),R(M.name)}},"runEffect")(),()=>{}),[l]),C("div",{className:Nt,children:[C("div",{className:"cf-actions-row",children:[C("div",{className:"cf-actions-cell",children:[p(Bn,{autoComplete:"off",blurComplementMode:"min-scale",className:"cf-options-number",isEmptyAllowed:!1,id:"options-number",label:"Options number",min:0,onChange:(b,E)=>{t(E)},value:n}),C("div",{className:"cf-actions-row",children:[C("div",{className:"cf-actions-cell",children:[C("label",{children:[p("input",{type:"checkbox",checked:o,onChange:b=>{r(b.target.checked)}}),p("span",{style:{marginLeft:"4px"},children:"Control isOpen?"})]}),C("label",{children:[p("input",{type:"checkbox",checked:d,onChange:b=>{m(b.target.checked)}}),p("span",{style:{marginLeft:"4px"},children:"Is error?"})]})]}),C("label",{children:[p("input",{type:"checkbox",checked:g,onChange:b=>{y(b.target.checked)}}),p("span",{style:{marginLeft:"4px"},children:"Is opened"})]})]})]}),C("div",{className:"cf-actions-cell",children:[p(Bn,{autoComplete:"off",className:"cf-selected-option-id",id:"selected-option-idx",label:"Selected option (index)",max:n-1,min:0,onChange:(b,E)=>{a(E)},value:l}),e.mode==="search"&&p(T,{className:"cf-dropdown-blur-modes-select",defaultValue:jn[0],id:"dropdown-blur-modes-select",label:"Blur mode",mode:"select",onChange:b=>{I(b)},options:jn})]}),p("div",{className:"cf-actions-cell",children:e.mode==="search"&&p(Zn,{id:"controlled-input-value",onChange:(b,E)=>{R(E)},label:"Dropdown search content",value:A})})]}),p(T,{blurMode:D,className:"cf-controlled-dropdown",createOptionFromInput:b=>({id:Date.now(),name:b}),defaultValue:f[0],error:d,id:"controlled-dropdown",isOpen:o?g:void 0,inputValue:A,label:"Controlled Dropdown Example",mode:e.mode,onChangeInput:(b,E)=>{console.info("controlled-dropdown :: onChangeInput :: ",b,E),R(b)},onChange:(b,E,M)=>{console.info("controlled-dropdown :: onChange :: ",E,M),M==="blur-create"&&E!=null&&(F.current=f.concat([E]),h(F.current)),a(E!=null?F.current.indexOf(E)??null:null)},options:f,value:V})]})}s(Wt,"ControlledDropdown");function pl(e){return n=>p(Wt,{...e,...n})}s(pl,"DropdownExampleHOC$1");const on=pl({mode:"search"}),un=pl({mode:"select"});try{on.displayName="ControlledSearchExample",on.__docgenInfo={description:"",displayName:"ControlledSearchExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => Option)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"Option | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<Option>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: Option[], inputValue: string, value: Option[]) => Option[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: Option | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<Option | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"Option[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"Option | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = Option>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: Option) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<Option>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{un.displayName="ControlledSelectExample",un.__docgenInfo={description:"",displayName:"ControlledSelectExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => Option)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"Option | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<Option>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: Option[], inputValue: string, value: Option[]) => Option[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: Option | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<Option | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"Option[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"Option | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = Option>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: Option) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<Option>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}const Ae=j(`
  background-color: #FFFFFF;
  margin: 0;
  padding: 12px 16px;
  user-select: none;
  display: flex;
  flex-direction: column;
  gap: 24px;
  width: 526px;

  font-family: Roboto, sans-serif;
  font-size: 16px;
  font-style: normal;
  font-weight: 400;
  line-height: 150%;
  letter-spacing: 0.15px;

  .cf-actions-row {
    display: flex;
    min-height: 56px;
    gap: 16px;
  }

  .cf-actions-cell {
    display: flex;
    flex-direction: column;
    gap: 16px;
    max-width: fit-content;
  }

  .cf-options-number,
  .cf-selected-option-id,
  .cf-dropdown-modes-select {
    width: 256px;
  }

  .cf-controlled-dropdown {
    width: 512px;
  }

  p {
    margin: 0px;
    margin-top: 24px;
    padding: 0px;

    span {
      font-weight: 600;
      color: blue;
    }
  }
`),Te=10,Kn=s((e,n,t="Item")=>Fn(e,e+n).map(l=>{const a=`${t.length===0?"Item":t.replace(/#\d*/g,"")} #${l}`;return{id:a,name:a}}),"getOptions");function Bt({mode:e}){const[n,t]=i.useState(null),[l,a]=i.useState(null),[o,r]=i.useState(null),[d,m]=i.useState("Default search"),[g,y]=i.useState({id:"Loaded form value",name:"Loaded form value"}),f=i.useCallback(async({skip:h,take:V,search:v})=>(console.info("loadItems :: skip, take, search :: ",h,V,v),{items:await rt(e==="select"?4e3:0,Kn(h,V,v))}),[e]);return C("div",{children:[p("div",{className:Ae,children:p(T,{className:"cf-async-dropdown",createOptionFromInput:h=>({id:h,name:h}),fetchHandler:f,id:"async-dropdown",label:'Async Dropdown ("create" mode)',mode:e,onChange:(h,V)=>{t(V)},pageSize:Te,value:n})}),p("div",{className:Ae,children:p(T,{className:"cf-async-dropdown-default",fetchHandler:f,id:"async-dropdown-default",label:"Async Dropdown (default options)",mode:e,onChange:(h,V)=>{a(V)},options:Kn(0,5,"Pre-fetched"),pageSize:Te,value:l})}),e==="search"&&C("div",{className:Ae,children:[C("p",{children:["If ",p("span",{children:"inputValue"})," is set (controlled), it will work as a filter for fetcher."]}),p(T,{className:"cf-async-dropdown-controlled-input",fetchHandler:f,id:"async-dropdown-controlled-input",inputValue:d,label:"Async Dropdown (controlled inputValue)",mode:e,onChange:(h,V)=>{console.info(h,"onChange :: ",V),r(V),m((V==null?void 0:V.name)??"")},onChangeInput:h=>{console.info("async-dropdown-controlled-input","onChangeInput :: ",h),m(h)},pageSize:Te,value:o})]}),e==="search"&&C("div",{className:Ae,children:[C("p",{children:["If ",p("span",{children:"value"})," is set (controlled), it will not filter options."]}),p(T,{className:"cf-async-dropdown-controlled-with-initial-value",fetchHandler:f,id:"async-dropdown-controlled-with-initial-value",label:"Async Dropdown (controlled value)",mode:e,onChange:(h,V,v)=>{console.info(h,"onChange :: ",V,v),y(V)},pageSize:Te,value:g})]})]})}s(Bt,"AsyncDropdown");function cl(e){return n=>p(Bt,{...e,...n})}s(cl,"DropdownExampleHOC");const dn=cl({mode:"search"}),pn=cl({mode:"select"});try{dn.displayName="AsyncSearchExample",dn.__docgenInfo={description:"",displayName:"AsyncSearchExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => Option)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"Option | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<Option>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: Option[], inputValue: string, value: Option[]) => Option[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: Option | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<Option | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"Option[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"Option | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = Option>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: Option) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<Option>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}try{pn.displayName="AsyncSelectExample",pn.__docgenInfo={description:"",displayName:"AsyncSelectExample",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"Allows to add a custom button-like options at the very top of the list.\nUse `renderAction` property to customize how they look.",name:"actions",required:!1,type:{name:"Action[]"}},blurMode:{defaultValue:null,description:`Defines a Dropdowns behavior on blur event.
Available modes:
  - 'clean' - erases input value
  - 'select-first' - fills input value with a first available option
  - 'create' - creates a new "virtual" option from the current input's value. Requires \`props.createOptionFromInput\`.

By default, Dropdown works in "clear" mode. But if \`props.desableClearable\` is set -
the "select-first" mode will be selected as default value.`,name:"blurMode",required:!1,type:{name:"enum",value:[{value:'"clear"'},{value:'"create"'},{value:'"select-first"'}]}},createOptionFromInput:{defaultValue:null,description:"Is needed for the `blureMode === 'create'`.\nDropdown needs this to convert Input's string value into a full-fledged option.",name:"createOptionFromInput",required:!1,type:{name:"((inputValue: string) => Option)"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"Option | null"}},disableClearable:{defaultValue:null,description:"",name:"disableClearable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},fetchHandler:{defaultValue:null,description:"Allows to load options from remote source.",name:"fetchHandler",required:!1,type:{name:"FetchHandler<Option>"}},filterOptions:{defaultValue:null,description:"",name:"filterOptions",required:!1,type:{name:"((options: Option[], inputValue: string, value: Option[]) => Option[])"}},formatDisplayValue:{defaultValue:null,description:"",name:"formatDisplayValue",required:!1,type:{name:"((value: Option | null) => string)"}},isDebug:{defaultValue:null,description:"",name:"isDebug",required:!1,type:{name:"boolean"}},isMultiselect:{defaultValue:null,description:"",name:"isMultiselect",required:!1,type:{name:"false"}},isSingleLoad:{defaultValue:null,description:"If `true` - Dropdown will not call `fetchHandler` on scroll and on search actions.\nIt is usually used with `pageSize={SOME_BIG_NUMBER}`, mostly for handling static dictionaries.",name:"isSingleLoad",required:!1,type:{name:"boolean"}},inputValue:{defaultValue:null,description:"",name:"inputValue",required:!1,type:{name:"string | null"}},mode:{defaultValue:null,description:`Supported modes:
 - 'select' - no input, only selection from existing options
 - 'search' - allows user's input`,name:"mode",required:!1,type:{name:"enum",value:[{value:'"search"'},{value:'"select"'}]}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"ChangeEventHandler<Option | null>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLDivElement>"}},onBlurInput:{defaultValue:null,description:"",name:"onBlurInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},ontClickInput:{defaultValue:null,description:"",name:"ontClickInput",required:!1,type:{name:"MouseEventHandler<HTMLInputElement>"}},onFocusInput:{defaultValue:null,description:"",name:"onFocusInput",required:!1,type:{name:"FocusEventHandler<HTMLInputElement>"}},onChangeInput:{defaultValue:null,description:"",name:"onChangeInput",required:!1,type:{name:"InputChangeEventHandler<HTMLInputElement>"}},options:{defaultValue:null,description:"",name:"options",required:!1,type:{name:"Option[]"}},pageSize:{defaultValue:null,description:"Defines how many items should be loaded on each `fetchHandler` call.",name:"pageSize",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"Option | null"}},label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},minListboxWidth:{defaultValue:null,description:`Sets a minimal width for Listbxos component.
If set, the Listbox will not try to align with the input width,
after minimal width will be reached.`,name:"minListboxWidth",required:!1,type:{name:"number"}},placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},renderAction:{defaultValue:null,description:"",name:"renderAction",required:!1,type:{name:"((props: Action) => Element)"}},renderListbox:{defaultValue:null,description:"",name:"renderListbox",required:!1,type:{name:"(<T = Option>(props: ListboxProps<T>) => Element)"}},renderNoOptions:{defaultValue:null,description:"",name:"renderNoOptions",required:!1,type:{name:"string | FC<{}>"}},renderOption:{defaultValue:null,description:"",name:"renderOption",required:!1,type:{name:"((props: Option) => Element)"}},renderSelectDisplay:{defaultValue:null,description:"Used to customise UI of select display (in 'select' mode).",name:"renderSelectDisplay",required:!1,type:{name:"((props: SelectDisplayProps<Option>) => Element)"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}function Dn(){return Dn=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e},Dn.apply(this,arguments)}s(Dn,"_extends");const kt={},Rt="wrapper";function ml({components:e,...n}){return u(Rt,Dn({},kt,n,{components:e,mdxType:"MDXLayout"}),u($l,{title:"Dropdown V2",component:T,mdxType:"Meta"}),u("h1",null,"Dropdown"),u("h2",null,"Uncontrolled Select examples"),u(J,{name:"Select (uncontrolled)",mdxType:"Story"},u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(Je,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectExample"}),u(ve,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithLabelExample"}),u(Qe,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithErrorExample"}),u(en,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectDisabledExample"}),u(nn,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithNoOptionsExample"}),u(ln,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithStartAdornmentExample"}),u(tn,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithActionsExample"}),u(an,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithCustomOptionExample"}),u(rn,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithDefaultValueExample"}),u(sn,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SelectWithDisableClearableExample"}))),u(J,{name:"FormSelect (uncontrolled)",mdxType:"Story"},u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(dl,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"FormSelectExample"}))),u(J,{name:"Select (expand-collapse) showcase",mdxType:"Story"},u(ul,{mdxType:"SelectExpandColapse"})),u("h2",null,"Uncontrolled Search examples"),u(J,{name:"Search (uncontrolled)",mdxType:"Story"},u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(ke,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchExample"}),u(Re,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithLabelExample"}),u(Ue,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithErrorExample"}),u(ze,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchDisabledExample"}),u(Pe,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithStartAdornmentExample"}),u(Ge,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithActionsExample"}),u(je,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithDefaultValueExample"}),u($e,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithDisableClearableExample"}),u(Ke,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchWithDefaultValueNoOptionsExample"}),u(Xe,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchBlurClearExample"}),u(Ze,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchBlurCreateExample"}),u(Ye,{style:{minWidth:400,maxWidth:400,flex:1},mdxType:"SearchBlurSelectFirstExample"}))),u(J,{name:"Select (controlled)",mdxType:"Story"},u(un,{mdxType:"ControlledSelectExample"})),u(J,{name:"Search (controlled)",mdxType:"Story"},u(on,{mdxType:"ControlledSearchExample"})),u(J,{name:"Select (async)",mdxType:"Story"},u(pn,{mdxType:"AsyncSelectExample"})),u(J,{name:"Search (async)",mdxType:"Story"},u(dn,{mdxType:"AsyncSearchExample"})))}s(ml,"MDXContent");ml.isMDXComponent=!0;const fl=s(()=>u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(Je,{style:{minWidth:400,maxWidth:400,flex:1}}),u(ve,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Qe,{style:{minWidth:400,maxWidth:400,flex:1}}),u(en,{style:{minWidth:400,maxWidth:400,flex:1}}),u(nn,{style:{minWidth:400,maxWidth:400,flex:1}}),u(ln,{style:{minWidth:400,maxWidth:400,flex:1}}),u(tn,{style:{minWidth:400,maxWidth:400,flex:1}}),u(an,{style:{minWidth:400,maxWidth:400,flex:1}}),u(rn,{style:{minWidth:400,maxWidth:400,flex:1}}),u(sn,{style:{minWidth:400,maxWidth:400,flex:1}})),"selectUncontrolled");fl.storyName="Select (uncontrolled)";fl.parameters={storySource:{source:`<div style={{
  display: 'flex',
  flexWrap: 'wrap',
  gap: 20,
  maxWidth: 850,
  margin: 0
}}>
    <SelectExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithLabelExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithErrorExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectDisabledExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithNoOptionsExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithStartAdornmentExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithActionsExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithCustomOptionExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithDefaultValueExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SelectWithDisableClearableExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
  </div>`}};const yl=s(()=>u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(dl,{style:{minWidth:400,maxWidth:400,flex:1}})),"formSelectUncontrolled");yl.storyName="FormSelect (uncontrolled)";yl.parameters={storySource:{source:`<div style={{
  display: 'flex',
  flexWrap: 'wrap',
  gap: 20,
  maxWidth: 850,
  margin: 0
}}>
    <FormSelectExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
  </div>`}};const hl=s(()=>u(ul,null),"selectExpandCollapseShowcase");hl.storyName="Select (expand-collapse) showcase";hl.parameters={storySource:{source:"<SelectExpandColapse />"}};const Vl=s(()=>u("div",{style:{display:"flex",flexWrap:"wrap",gap:20,maxWidth:850,margin:0}},u(ke,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Re,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Ue,{style:{minWidth:400,maxWidth:400,flex:1}}),u(ze,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Pe,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Ge,{style:{minWidth:400,maxWidth:400,flex:1}}),u(je,{style:{minWidth:400,maxWidth:400,flex:1}}),u($e,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Ke,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Xe,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Ze,{style:{minWidth:400,maxWidth:400,flex:1}}),u(Ye,{style:{minWidth:400,maxWidth:400,flex:1}})),"searchUncontrolled");Vl.storyName="Search (uncontrolled)";Vl.parameters={storySource:{source:`<div style={{
  display: 'flex',
  flexWrap: 'wrap',
  gap: 20,
  maxWidth: 850,
  margin: 0
}}>
    <SearchExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithLabelExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithErrorExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchDisabledExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithStartAdornmentExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithActionsExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithDefaultValueExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithDisableClearableExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchWithDefaultValueNoOptionsExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchBlurClearExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchBlurCreateExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
    <SearchBlurSelectFirstExample style={{
    minWidth: 400,
    maxWidth: 400,
    flex: 1
  }} />
  </div>`}};const bl=s(()=>u(un,null),"selectControlled");bl.storyName="Select (controlled)";bl.parameters={storySource:{source:"<ControlledSelectExample />"}};const gl=s(()=>u(on,null),"searchControlled");gl.storyName="Search (controlled)";gl.parameters={storySource:{source:"<ControlledSearchExample />"}};const vl=s(()=>u(pn,null),"selectAsync");vl.storyName="Select (async)";vl.parameters={storySource:{source:"<AsyncSelectExample />"}};const ql=s(()=>u(dn,null),"searchAsync");ql.storyName="Search (async)";ql.parameters={storySource:{source:"<AsyncSearchExample />"}};const ge={title:"Dropdown V2",component:T,includeStories:["selectUncontrolled","formSelectUncontrolled","selectExpandCollapseShowcase","searchUncontrolled","selectControlled","searchControlled","selectAsync","searchAsync"]},Ut={"Select (uncontrolled)":"selectUncontrolled","FormSelect (uncontrolled)":"formSelectUncontrolled","Select (expand-collapse) showcase":"selectExpandCollapseShowcase","Search (uncontrolled)":"searchUncontrolled","Select (controlled)":"selectControlled","Search (controlled)":"searchControlled","Select (async)":"selectAsync","Search (async)":"searchAsync"};ge.parameters=ge.parameters||{};ge.parameters.docs={...ge.parameters.docs||{},page:()=>u(jl,{mdxStoryNameToKey:Ut,mdxComponentAnnotations:ge},u(ml,null))};const Ea=["selectUncontrolled","formSelectUncontrolled","selectExpandCollapseShowcase","searchUncontrolled","selectControlled","searchControlled","selectAsync","searchAsync"];export{Ea as __namedExportsOrder,ge as default,yl as formSelectUncontrolled,ql as searchAsync,gl as searchControlled,Vl as searchUncontrolled,vl as selectAsync,bl as selectControlled,hl as selectExpandCollapseShowcase,fl as selectUncontrolled};
//# sourceMappingURL=Dropdown.stories-73c27d61.js.map
