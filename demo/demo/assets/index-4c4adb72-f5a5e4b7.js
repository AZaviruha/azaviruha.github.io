var G=Object.defineProperty;var u=(e,t)=>G(e,"name",{value:t,configurable:!0});import{b as j,a as m,m as O,G as A,l as M}from"./layout-06a9841d.js";import{i as _,u as H,s as V,a as U,b as W,p as D,c as Y,d as q,e as z,f as K,g as L,h as C}from"./edges-b00f0ec2-afddb99d.js";import{l as i,r as E,c as S,i as T}from"./mermaid-a98f434b-6ad3a326.js";import{c as Q}from"./createText-285e50b4-c51484b0.js";var Z=4;function I(e){return j(e,Z)}u(I,"clone");function v(e){var t={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:tt(e),edges:et(e)};return m(e.graph())||(t.value=I(e.graph())),t}u(v,"write");function tt(e){return O(e.nodes(),function(t){var n=e.node(t),r=e.parent(t),s={v:t};return m(n)||(s.value=n),m(r)||(s.parent=r),s})}u(tt,"writeNodes");function et(e){return O(e.edges(),function(t){var n=e.edge(t),r={v:t.v,w:t.w};return m(t.name)||(r.name=t.name),m(n)||(r.value=n),r})}u(et,"writeEdges");let f={},y={},J={};const nt=u(()=>{y={},J={},f={}},"clear$1"),X=u((e,t)=>(i.trace("In isDecendant",t," ",e," = ",y[t].includes(e)),!!y[t].includes(e)),"isDescendant"),it=u((e,t)=>(i.info("Decendants of ",t," is ",y[t]),i.info("Edge is ",e),e.v===t||e.w===t?!1:y[t]?y[t].includes(e.v)||X(e.v,t)||X(e.w,t)||y[t].includes(e.w):(i.debug("Tilt, ",t,",not in decendants"),!1)),"edgeInCluster"),p=u((e,t,n,r)=>{i.warn("Copying children of ",e,"root",r,"data",t.node(e),r);const s=t.children(e)||[];e!==r&&s.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",s),s.forEach(a=>{if(t.children(a).length>0)p(a,t,n,r);else{const h=t.node(a);i.info("cp ",a," to ",r," with parent ",e),n.setNode(a,h),r!==t.parent(a)&&(i.warn("Setting parent",a,t.parent(a)),n.setParent(a,t.parent(a))),e!==r&&a!==e?(i.debug("Setting parent",a,e),n.setParent(a,e)):(i.info("In copy ",e,"root",r,"data",t.node(e),r),i.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));const l=t.edges(a);i.debug("Copying Edges",l),l.forEach(d=>{i.info("Edge",d);const g=t.edge(d.v,d.w,d.name);i.info("Edge data",g,r);try{it(d,r)?(i.info("Copying as ",d.v,d.w,g,d.name),n.setEdge(d.v,d.w,g,d.name),i.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):i.info("Skipping copy of edge ",d.v,"-->",d.w," rootId: ",r," clusterId:",e)}catch(x){i.error(x)}})}i.debug("Removing node",a),t.removeNode(a)})},"copy"),R=u((e,t)=>{const n=t.children(e);let r=[...n];for(const s of n)J[s]=e,r=[...r,...R(s,t)];return r},"extractDescendants"),b=u((e,t)=>{i.trace("Searching",e);const n=t.children(e);if(i.trace("Searching children of id ",e,n),n.length<1)return i.trace("This is a valid node",e),e;for(const r of n){const s=b(r,t);if(s)return i.trace("Found replacement for",e," => ",s),s}},"findNonClusterChild"),N=u(e=>!f[e]||!f[e].externalConnections?e:f[e]?f[e].id:e,"getAnchorId"),st=u((e,t)=>{if(!e||t>10){i.debug("Opting out, no graph ");return}else i.debug("Opting in, graph ");e.nodes().forEach(function(n){e.children(n).length>0&&(i.warn("Cluster identified",n," Replacement id in edges: ",b(n,e)),y[n]=R(n,e),f[n]={id:b(n,e),clusterData:e.node(n)})}),e.nodes().forEach(function(n){const r=e.children(n),s=e.edges();r.length>0?(i.debug("Cluster identified",n,y),s.forEach(a=>{if(a.v!==n&&a.w!==n){const h=X(a.v,n),l=X(a.w,n);h^l&&(i.warn("Edge: ",a," leaves cluster ",n),i.warn("Decendants of XXX ",n,": ",y[n]),f[n].externalConnections=!0)}})):i.debug("Not a cluster ",n,y)}),e.edges().forEach(function(n){const r=e.edge(n);i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let s=n.v,a=n.w;if(i.warn("Fix XXX",f,"ids:",n.v,n.w,"Translating: ",f[n.v]," --- ",f[n.w]),f[n.v]&&f[n.w]&&f[n.v]===f[n.w]){i.warn("Fixing and trixing link to self - removing XXX",n.v,n.w,n.name),i.warn("Fixing and trixing - removing XXX",n.v,n.w,n.name),s=N(n.v),a=N(n.w),e.removeEdge(n.v,n.w,n.name);const h=n.w+"---"+n.v;e.setNode(h,{domId:h,id:h,labelStyle:"",labelText:r.label,padding:0,shape:"labelRect",style:""});const l=JSON.parse(JSON.stringify(r)),d=JSON.parse(JSON.stringify(r));l.label="",l.arrowTypeEnd="none",d.label="",l.fromCluster=n.v,d.toCluster=n.v,e.setEdge(s,h,l,n.name+"-cyclic-special"),e.setEdge(h,a,d,n.name+"-cyclic-special")}else(f[n.v]||f[n.w])&&(i.warn("Fixing and trixing - removing XXX",n.v,n.w,n.name),s=N(n.v),a=N(n.w),e.removeEdge(n.v,n.w,n.name),s!==n.v&&(r.fromCluster=n.v),a!==n.w&&(r.toCluster=n.w),i.warn("Fix Replacing with XXX",s,a,n.name),e.setEdge(s,a,r,n.name))}),i.warn("Adjusted Graph",v(e)),P(e,0),i.trace(f)},"adjustClustersAndEdges"),P=u((e,t)=>{if(i.warn("extractor - ",t,v(e),e.children("D")),t>10){i.error("Bailing out");return}let n=e.nodes(),r=!1;for(const s of n){const a=e.children(s);r=r||a.length>0}if(!r){i.debug("Done, no node has children",e.nodes());return}i.debug("Nodes = ",n,t);for(const s of n)if(i.debug("Extracting node",s,f,f[s]&&!f[s].externalConnections,!e.parent(s),e.node(s),e.children("D")," Depth ",t),!f[s])i.debug("Not a cluster",s,t);else if(!f[s].externalConnections&&e.children(s)&&e.children(s).length>0){i.warn("Cluster without external connections, without a parent and with children",s,t);let h=e.graph().rankdir==="TB"?"LR":"TB";f[s]&&f[s].clusterData&&f[s].clusterData.dir&&(h=f[s].clusterData.dir,i.warn("Fixing dir",f[s].clusterData.dir,h));const l=new A({multigraph:!0,compound:!0}).setGraph({rankdir:h,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});i.warn("Old graph before copy",v(e)),p(s,e,l,s),e.setNode(s,{clusterNode:!0,id:s,clusterData:f[s].clusterData,labelText:f[s].labelText,graph:l}),i.warn("New graph after copy node: (",s,")",v(l)),i.debug("Old graph after copy",v(e))}else i.warn("Cluster ** ",s," **not meeting the criteria !externalConnections:",!f[s].externalConnections," no parent: ",!e.parent(s)," children ",e.children(s)&&e.children(s).length>0,e.children("D"),t),i.debug(f);n=e.nodes(),i.warn("New list of nodes",n);for(const s of n){const a=e.node(s);i.warn(" Now next level",s,a),a.clusterNode&&P(a.graph,t+1)}},"extractor"),F=u((e,t)=>{if(t.length===0)return[];let n=Object.assign(t);return t.forEach(r=>{const s=e.children(r),a=F(e,s);n=[...n,...a]}),n},"sorter"),rt=u(e=>F(e,e.children()),"sortNodesByHierarchy"),at=u((e,t)=>{i.info("Creating subgraph rect for ",t.id,t);const n=e.insert("g").attr("class","cluster"+(t.class?" "+t.class:"")).attr("id",t.id),r=n.insert("rect",":first-child"),s=E(S().flowchart.htmlLabels),a=n.insert("g").attr("class","cluster-label"),h=t.labelType==="markdown"?Q(a,t.labelText,{style:t.labelStyle,useHtmlLabels:s}):a.node().appendChild(L(t.labelText,t.labelStyle,void 0,!0));let l=h.getBBox();if(E(S().flowchart.htmlLabels)){const o=h.children[0],w=T(h);l=o.getBoundingClientRect(),w.attr("width",l.width),w.attr("height",l.height)}const d=0*t.padding,g=d/2,x=t.width<=l.width+d?l.width+d:t.width;t.width<=l.width+d?t.diff=(l.width-t.width)/2-t.padding/2:t.diff=-t.padding/2,i.trace("Data ",t,JSON.stringify(t)),r.attr("style",t.style).attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-x/2).attr("y",t.y-t.height/2-g).attr("width",x).attr("height",t.height+d),s?a.attr("transform","translate("+(t.x-l.width/2)+", "+(t.y-t.height/2)+")"):a.attr("transform","translate("+t.x+", "+(t.y-t.height/2)+")");const c=r.node().getBBox();return t.width=c.width,t.height=c.height,t.intersect=function(o){return C(t,o)},n},"rect"),ct=u((e,t)=>{const n=e.insert("g").attr("class","note-cluster").attr("id",t.id),r=n.insert("rect",":first-child"),s=0*t.padding,a=s/2;r.attr("rx",t.rx).attr("ry",t.ry).attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2-a).attr("width",t.width+s).attr("height",t.height+s).attr("fill","none");const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.intersect=function(l){return C(t,l)},n},"noteGroup"),ot=u((e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),s=n.insert("g").attr("class","cluster-label"),a=n.append("rect"),h=s.node().appendChild(L(t.labelText,t.labelStyle,void 0,!0));let l=h.getBBox();if(E(S().flowchart.htmlLabels)){const o=h.children[0],w=T(h);l=o.getBoundingClientRect(),w.attr("width",l.width),w.attr("height",l.height)}l=h.getBBox();const d=0*t.padding,g=d/2,x=t.width<=l.width+t.padding?l.width+t.padding:t.width;t.width<=l.width+t.padding?t.diff=(l.width+t.padding*0-t.width)/2:t.diff=-t.padding/2,r.attr("class","outer").attr("x",t.x-x/2-g).attr("y",t.y-t.height/2-g).attr("width",x+d).attr("height",t.height+d),a.attr("class","inner").attr("x",t.x-x/2-g).attr("y",t.y-t.height/2-g+l.height-1).attr("width",x+d).attr("height",t.height+d-l.height-3),s.attr("transform","translate("+(t.x-l.width/2)+", "+(t.y-t.height/2-t.padding/3+(E(S().flowchart.htmlLabels)?5:3))+")");const c=r.node().getBBox();return t.height=c.height,t.intersect=function(o){return C(t,o)},n},"roundedWithTitle"),lt=u((e,t)=>{const n=e.insert("g").attr("class",t.classes).attr("id",t.id),r=n.insert("rect",":first-child"),s=0*t.padding,a=s/2;r.attr("class","divider").attr("x",t.x-t.width/2-a).attr("y",t.y-t.height/2).attr("width",t.width+s).attr("height",t.height+s);const h=r.node().getBBox();return t.width=h.width,t.height=h.height,t.diff=-t.padding/2,t.intersect=function(l){return C(t,l)},n},"divider"),ft={rect:at,roundedWithTitle:ot,noteGroup:ct,divider:lt};let $={};const dt=u((e,t)=>{i.trace("Inserting cluster");const n=t.shape||"rect";$[t.id]=ft[n](e,t)},"insertCluster"),ht=u(()=>{$={}},"clear"),k=u(async(e,t,n,r)=>{i.info("Graph in recursive render: XXX",v(t),r);const s=t.graph().rankdir;i.trace("Dir in recursive render - dir:",s);const a=e.insert("g").attr("class","root");t.nodes()?i.info("Recursive render XXX",t.nodes()):i.info("No nodes found for",t),t.edges().length>0&&i.trace("Recursive edges",t.edge(t.edges()[0]));const h=a.insert("g").attr("class","clusters"),l=a.insert("g").attr("class","edgePaths"),d=a.insert("g").attr("class","edgeLabels"),g=a.insert("g").attr("class","nodes");await Promise.all(t.nodes().map(async function(c){const o=t.node(c);if(r!==void 0){const w=JSON.parse(JSON.stringify(r.clusterData));i.info("Setting data for cluster XXX (",c,") ",w,r),t.setNode(r.id,w),t.parent(c)||(i.trace("Setting parent",c,r.id),t.setParent(c,r.id,w))}if(i.info("(Insert) Node XXX"+c+": "+JSON.stringify(t.node(c))),o&&o.clusterNode){i.info("Cluster identified",c,o.width,t.node(c));const w=await k(g,o.graph,n,t.node(c)),B=w.elem;H(o,B),o.diff=w.diff||0,i.info("Node bounds (abc123)",c,o,o.width,o.x,o.y),V(B,o),i.warn("Recursive render complete ",B,o)}else t.children(c).length>0?(i.info("Cluster - the non recursive path XXX",c,o.id,o,t),i.info(b(o.id,t)),f[o.id]={id:b(o.id,t),node:o}):(i.info("Node - the non recursive path",c,o.id,o),await U(g,t.node(c),s))})),t.edges().forEach(function(c){const o=t.edge(c.v,c.w,c.name);i.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(c)),i.info("Edge "+c.v+" -> "+c.w+": ",c," ",JSON.stringify(t.edge(c))),i.info("Fix",f,"ids:",c.v,c.w,"Translateing: ",f[c.v],f[c.w]),W(d,o)}),t.edges().forEach(function(c){i.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(c))}),i.info("#############################################"),i.info("###                Layout                 ###"),i.info("#############################################"),i.info(t),M(t),i.info("Graph after layout:",v(t));let x=0;return rt(t).forEach(function(c){const o=t.node(c);i.info("Position "+c+": "+JSON.stringify(t.node(c))),i.info("Position "+c+": ("+o.x,","+o.y,") width: ",o.width," height: ",o.height),o&&o.clusterNode?D(o):t.children(c).length>0?(dt(h,o),f[o.id].node=o):D(o)}),t.edges().forEach(function(c){const o=t.edge(c);i.info("Edge "+c.v+" -> "+c.w+": "+JSON.stringify(o),o);const w=Y(l,c,o,f,n,t);q(o,w)}),t.nodes().forEach(function(c){const o=t.node(c);i.info(c,o.type,o.diff),o.type==="group"&&(x=o.diff)}),{elem:a,diff:x}},"recursiveRender"),vt=u(async(e,t,n,r,s)=>{_(e,n,r,s),z(),K(),ht(),nt(),i.warn("Graph at first:",v(t)),st(t),i.warn("Graph after:",v(t)),await k(e,t,r)},"render");export{vt as r};
//# sourceMappingURL=index-4c4adb72-f5a5e4b7.js.map
