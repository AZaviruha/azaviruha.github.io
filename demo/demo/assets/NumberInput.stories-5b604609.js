var X=Object.defineProperty;var o=(e,t)=>X(e,"name",{value:t,configurable:!0});import{r as a}from"./index-13f3a07b.js";import{c as v,A as G,M as J,S as Q}from"./Props-42e8e9cb.js";import{j as n,a as p}from"./jsx-runtime-d0e2239a.js";import"./es.promise.resolve-04d58763.js";import"./index-3e51028f.js";import{b as Y,I as ee,F as ne}from"./index-9c0e0d32.js";import{I as te}from"./input-da6de3a7.js";import{f as ae,a as le}from"./numbers2-7b780f3b.js";import{s as re,o as ue}from"./signedNumbersAndDots-31962cac.js";import"./_commonjsHelpers-df0bf62c.js";import"./iframe-1e31e50d.js";import"./preload-helper-d51aff73.js";import"./index-32ac9e7b.js";import"./index-a2fa05d1.js";import"./_commonjs-dynamic-modules-fefbfc1c.js";import"./index-681e4b07-43c39e59.js";import"./index-aa905caf.js";import"./string-d2fe5096.js";import"./ui-6e300fc6.js";import"./index-77fd1cfa.js";import"./_arrayReduce-b962fc90.js";import"./toString-40b958f3.js";import"./isArray-6de4a062.js";import"./isSymbol-3167caec.js";import"./index-50ee27ec.js";const T={integer:0,decimal:2},ie={radix:".",scale:T.integer,thousandsSeparator:","},oe=21,S={complementMode:"max-scale",isEmptyAllowed:!0,scale:T.decimal,signed:!1},w=o((e,t)=>{const{complementMode:l=S.complementMode,isEmptyAllowed:u=S.isEmptyAllowed,scale:y=S.scale,signed:d=S.signed}=t,c=e===""||e==null;if(c&&u)return"";if(l==="none")return(e==null?void 0:e.toString())??"";const m=c?"0":e.toString(),s=d?re:ue;if(y===T.decimal)if(l==="max-scale"){const f={allowNegative:d,mantissa:y};return s(ae(s(m),f))??""}else return parseFloat(s(m)??"").toString();return y===T.integer?le(s(m),{allowNegative:d})??"":""},"formatValueView"),se=o(({complementOnBlur:e="max-scale",complementOnMount:t="max-scale",focusSelectionMode:l="all",initialPlaceholder:u,inputRef:y,isEmptyAllowed:d=!1,onBlur:c,onChange:m,onFocus:s,scale:f,signed:g,value:h,...q})=>{const V=a.useRef(null),C=a.useRef(null),H=a.useRef(!1),N=a.useCallback(r=>{const x=y??C;x!==void 0&&(x.current=r)},[y]),A=a.useMemo(()=>{if(H.current)return(h==null?void 0:h.toString())??"";const r={complementMode:t,isEmptyAllowed:d,signed:g,scale:f};return H.current=!0,w(h??"",r)},[h,t,d,g,f]),i=a.useCallback(r=>{m!=null&&(Y(m)?m(r):m(r.target.id,r.target.value))},[m]),$=a.useCallback(r=>{if(c==null||c(r),r.target==null)return;const x={complementMode:e,isEmptyAllowed:d,scale:f,signed:g},b=w(r.target.value,x);b!==r.target.value&&(r.target.value=b,i(r))},[e,d,c,i,f,g]),Z=a.useCallback(r=>{var b,F,O;s==null||s(r);const x=((b=r.target)==null?void 0:b.value)??"-";l==="all"?(F=r==null?void 0:r.target)==null||F.select():l==="zero"&&Number(x)===0&&((O=r==null?void 0:r.target)==null||O.select())},[l,s]),W=a.useCallback((r,x,b)=>{(b==null?void 0:b.target)!=null&&(i==null||i(b))},[i]);return n(te,{...q,inputRef:N,lazy:A.length===0,mask:Number,normalizeZeros:!1,padFractionalZeros:!1,onAccept:W,onBlur:$,onFocus:Z,ref:V,scale:f,signed:g,value:A})},"NumberMask"),_=o(({maskConfigs:e,...t})=>l=>n(se,{...l,...t,...e}),"NumberMaskHOC");try{_.displayName="NumberMaskHOC",_.__docgenInfo={description:"",displayName:"NumberMaskHOC",props:{placeholder:{defaultValue:null,description:"",name:"placeholder",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"number"}},inputRef:{defaultValue:null,description:"",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},isEmptyAllowed:{defaultValue:{value:"false"},description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},complementOnBlur:{defaultValue:{value:"max-scale"},description:"",name:"complementOnBlur",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},complementOnMount:{defaultValue:{value:"max-scale"},description:"",name:"complementOnMount",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},focusSelectionMode:{defaultValue:{value:"all"},description:"",name:"focusSelectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"zero"'},{value:'"all"'}]}},initialPlaceholder:{defaultValue:null,description:`used only by wrapper components to pass initial placeholder for internal logic
of cleaning up input if only placeholder value is left in it.`,name:"initialPlaceholder",required:!1,type:{name:"string"}},maskConfigs:{defaultValue:null,description:"",name:"maskConfigs",required:!1,type:{name:"NumberMaskConfig"}}}}}catch{}const M=o(({complementOnBlur:e,complementOnMount:t,focusSelectionMode:l,inputRef:u,isEmptyAllowed:y,isSigned:d,maskConfigs:c,maxValue:m,minValue:s,numberMode:f,...g})=>{const h=a.useMemo(()=>{const V={...ie,...c};return{...V,max:m??V.max,min:s??V.min,scale:f==null?V.scale:T[f],signed:d??V.signed}},[c,d,m,s,f]),q=a.useMemo(()=>_({complementOnBlur:e,complementOnMount:t,focusSelectionMode:l,inputRef:u,isEmptyAllowed:y,maskConfigs:h}),[e,t,l,u,y,h]);return n(ee,{...g,InputComponent:q,maxLength:oe,passInitialPlaceholder:!0})},"NumberInput");try{NumberInputPlanB.displayName="NumberInputPlanB",NumberInputPlanB.__docgenInfo={description:"",displayName:"NumberInputPlanB",props:{id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeField<InputValue> | OnChangeEvent<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"masked input value. This component can be only controlled.",name:"value",required:!0,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},maskConfigs:{defaultValue:null,description:"",name:"maskConfigs",required:!1,type:{name:"NumberMaskConfig"}},isSigned:{defaultValue:null,description:"Short-cuts for the `maskConfig`, have higher priority than corresponding props in `maskConfig`.",name:"isSigned",required:!1,type:{name:"boolean"}},maxValue:{defaultValue:null,description:"",name:"maxValue",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"",name:"minValue",required:!1,type:{name:"number"}},numberMode:{defaultValue:null,description:"",name:"numberMode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},complementOnBlur:{defaultValue:null,description:"",name:"complementOnBlur",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},complementOnMount:{defaultValue:null,description:"",name:"complementOnMount",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},focusSelectionMode:{defaultValue:null,description:"",name:"focusSelectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"zero"'},{value:'"all"'}]}}}}}catch{}const I=o(e=>t=>n(M,{...e,...t}),"NumberInputExampleHOC"),R=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"integer.input.example",label:"Mileage",endAdornment:"miles"}),[]);return n(l,{id:"integer.input.example",value:e,onChange:u=>t(u.target.value)})},"IntegerInputExample"),K=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"integer.signed.input.example",isSigned:!0,label:"Mileage",endAdornment:"miles"}),[]);return n(l,{id:"integer.signed.input.example",value:e,onChange:u=>t(u.target.value)})},"IntegerSignedInputExample"),P=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"decimal.input.example",label:"Sell tax amount",numberMode:"decimal",startAdornment:"$"}),[]);return n(l,{id:"decimal.input.example",value:e,onChange:u=>t(u.target.value)})},"DecimalInputExample"),B=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"decimal.signed.input.example",label:"Sell tax amount",numberMode:"decimal",isSigned:!0,startAdornment:"$"}),[]);return n(l,{id:"decimal.signed.input.example",value:e,onChange:u=>t(u.target.value)})},"DecimalSignedInputExample"),D=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"decimal.zero.select.example",isSigned:!0,focusSelectionMode:"zero",label:"Sell tax amount",numberMode:"decimal",startAdornment:"$"}),[]);return n(l,{id:"decimal.zero.select.example",value:e,onChange:u=>t(u.target.value)})},"DecimalZeroSelectExample"),U=o(()=>{const[e,t]=a.useState(""),l=a.useMemo(()=>I({id:"decimal.no.select.example",isSigned:!0,focusSelectionMode:"zero",label:"Sell tax amount",numberMode:"decimal",startAdornment:"$"}),[]);return n(l,{id:"decimal.no.select.example",value:e,onChange:u=>t(u.target.value)})},"DecimalNoSelectExample");try{M.displayName="NumberInput",M.__docgenInfo={description:"",displayName:"NumberInput",props:{id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeField<InputValue> | OnChangeEvent<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"masked input value. This component can be only controlled.",name:"value",required:!0,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},maskConfigs:{defaultValue:null,description:"",name:"maskConfigs",required:!1,type:{name:"NumberMaskConfig"}},isSigned:{defaultValue:null,description:"Short-cuts for the `maskConfig`, have higher priority than corresponding props in `maskConfig`.",name:"isSigned",required:!1,type:{name:"boolean"}},maxValue:{defaultValue:null,description:"",name:"maxValue",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"",name:"minValue",required:!1,type:{name:"number"}},numberMode:{defaultValue:null,description:"",name:"numberMode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},complementOnBlur:{defaultValue:null,description:"",name:"complementOnBlur",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},complementOnMount:{defaultValue:null,description:"",name:"complementOnMount",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},focusSelectionMode:{defaultValue:null,description:"",name:"focusSelectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"zero"'},{value:'"all"'}]}}}}}catch{}try{I.displayName="NumberInputExampleHOC",I.__docgenInfo={description:"",displayName:"NumberInputExampleHOC",props:{id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeField<InputValue> | OnChangeEvent<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},maskConfigs:{defaultValue:null,description:"",name:"maskConfigs",required:!1,type:{name:"NumberMaskConfig"}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},isSigned:{defaultValue:null,description:"Short-cuts for the `maskConfig`, have higher priority than corresponding props in `maskConfig`.",name:"isSigned",required:!1,type:{name:"boolean"}},maxValue:{defaultValue:null,description:"",name:"maxValue",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"",name:"minValue",required:!1,type:{name:"number"}},numberMode:{defaultValue:null,description:"",name:"numberMode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},complementOnBlur:{defaultValue:null,description:"",name:"complementOnBlur",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},complementOnMount:{defaultValue:null,description:"",name:"complementOnMount",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},focusSelectionMode:{defaultValue:null,description:"",name:"focusSelectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"zero"'},{value:'"all"'}]}}}}}catch{}try{R.displayName="IntegerInputExample",R.__docgenInfo={description:"",displayName:"IntegerInputExample",props:{}}}catch{}try{K.displayName="IntegerSignedInputExample",K.__docgenInfo={description:"",displayName:"IntegerSignedInputExample",props:{}}}catch{}try{P.displayName="DecimalInputExample",P.__docgenInfo={description:"",displayName:"DecimalInputExample",props:{}}}catch{}try{B.displayName="DecimalSignedInputExample",B.__docgenInfo={description:"",displayName:"DecimalSignedInputExample",props:{}}}catch{}try{D.displayName="DecimalZeroSelectExample",D.__docgenInfo={description:"",displayName:"DecimalZeroSelectExample",props:{}}}catch{}try{U.displayName="DecimalNoSelectExample",U.__docgenInfo={description:"",displayName:"DecimalNoSelectExample",props:{}}}catch{}const de=ne(M);try{FormNumberInput.displayName="FormNumberInput",FormNumberInput.__docgenInfo={description:"",displayName:"FormNumberInput",props:{type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeField<InputValue> | OnChangeEvent<HTMLInputElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},maskConfigs:{defaultValue:null,description:"",name:"maskConfigs",required:!1,type:{name:"NumberMaskConfig"}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},isSigned:{defaultValue:null,description:"Short-cuts for the `maskConfig`, have higher priority than corresponding props in `maskConfig`.",name:"isSigned",required:!1,type:{name:"boolean"}},maxValue:{defaultValue:null,description:"",name:"maxValue",required:!1,type:{name:"number"}},minValue:{defaultValue:null,description:"",name:"minValue",required:!1,type:{name:"number"}},numberMode:{defaultValue:null,description:"",name:"numberMode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},complementOnBlur:{defaultValue:null,description:"",name:"complementOnBlur",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},complementOnMount:{defaultValue:null,description:"",name:"complementOnMount",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"max-scale"'},{value:'"none"'}]}},focusSelectionMode:{defaultValue:null,description:"",name:"focusSelectionMode",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"zero"'},{value:'"all"'}]}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"DefaultError"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"ReactNode"}},showError:{defaultValue:null,description:"",name:"showError",required:!1,type:{name:"boolean"}},helper:{defaultValue:null,description:"",name:"helper",required:!1,type:{name:"ReactNode"}},touched:{defaultValue:null,description:"",name:"touched",required:!1,type:{name:"boolean | null"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"InputValue"}}}}}catch{}const L=o(()=>{const[e,t]=a.useState("2131"),[l,u]=a.useState(!1),[y,d]=a.useState(!1),[c,m]=a.useState("decimal"),[s,f]=a.useState("all"),[g,h]=a.useState("max-scale"),[q,V]=a.useState("max-scale"),[C,H]=a.useState(!0),[N,A]=a.useState(!0);return p("div",{children:[p("div",{style:{marginBottom:"16px"},children:[n("button",{style:{marginRight:"20px"},onClick:()=>u(i=>!i),children:"Toggle disabled"}),n("button",{style:{marginRight:"20px"},onClick:()=>d(!1),children:"Reset touched"}),n("button",{style:{marginRight:"20px"},onClick:()=>t(42),children:"Set value to 42"}),n("button",{onClick:()=>t(.1),children:"Set value to 0.1"})]}),p("div",{style:{marginBottom:"16px"},children:[p("label",{children:[n("span",{style:{marginRight:"8px"},children:"Number mode:"}),p("select",{onChange:i=>m(i.target.value),value:c,children:[n("option",{value:"decimal",children:"decimal (scale: 2)"}),n("option",{value:"integer",children:"integer (scale: 0)"})]})]}),n("span",{style:{margin:"0px 20px"},children:"|"}),p("label",{children:[n("span",{style:{marginRight:"8px"},children:"Focus mode:"}),p("select",{onChange:i=>f(i.target.value),value:s,children:[n("option",{value:"all",children:"select all"}),n("option",{value:"zero",children:"select zero"}),n("option",{value:"none",children:"select none"})]})]})]}),p("div",{children:[p("label",{children:[n("span",{style:{marginRight:"8px"},children:"Complement on blur:"}),p("select",{onChange:i=>h(i.target.value),value:g,children:[n("option",{value:"max-scale",children:"max-scale"}),n("option",{value:"min-number",children:"min-number"}),n("option",{value:"none",children:"none"})]})]}),n("span",{style:{margin:"0px 20px"},children:"|"}),p("label",{children:[n("span",{style:{marginRight:"8px"},children:"Complement on mount:"}),p("select",{onChange:i=>V(i.target.value),value:q,children:[n("option",{value:"max-scale",children:"max-scale"}),n("option",{value:"min-number",children:"min-number"}),n("option",{value:"none",children:"none"})]})]}),n("span",{style:{margin:"0px 20px"},children:"|"}),p("label",{children:[n("input",{type:"checkbox",checked:N,onChange:i=>A(i.target.checked)}),n("span",{style:{marginLeft:"4px"},children:"Signed?"})]}),n("span",{style:{margin:"0px 20px"},children:"|"}),p("label",{children:[n("input",{type:"checkbox",checked:C,onChange:i=>H(i.target.checked)}),n("span",{style:{marginLeft:"4px"},children:"Allow empty?"})]})]}),n("hr",{style:{margin:"20px 0px"}}),n(de,{complementOnBlur:g,complementOnMount:q,dataTestId:"form-input-sales-tax",disabled:l,error:e==="",errorMessage:"Field is required",focusSelectionMode:s,helper:"Бухгалтеры в Киеве, недорого: link",id:"salesTax",isEmptyAllowed:C,isSigned:N,label:"Sales tax amount",onChange:i=>{t(i.target.value),d(!0)},numberMode:c,startAdornment:"$",touched:y,value:e})]})},"FormNumberInputExample");try{L.displayName="FormNumberInputExample",L.__docgenInfo={description:"",displayName:"FormNumberInputExample",props:{}}}catch{}function k(){return k=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var u in l)Object.prototype.hasOwnProperty.call(l,u)&&(e[u]=l[u])}return e},k.apply(this,arguments)}o(k,"_extends");const me={},pe="wrapper";function z({components:e,...t}){return v(pe,k({},me,t,{components:e,mdxType:"MDXLayout"}),v(J,{title:"NumberInput Plan B",component:M,mdxType:"Meta"}),v("h1",null,"NumberInputPlanB"),v(Q,{name:"Form Input (all features)",mdxType:"Story"},v(L,{mdxType:"FormNumberInputExample"})))}o(z,"MDXContent");z.isMDXComponent=!0;const j=o(()=>v(L,null),"formInputAllFeatures");j.storyName="Form Input (all features)";j.parameters={storySource:{source:"<FormNumberInputExample />"}};const E={title:"NumberInput Plan B",component:M,includeStories:["formInputAllFeatures"]},ce={"Form Input (all features)":"formInputAllFeatures"};E.parameters=E.parameters||{};E.parameters.docs={...E.parameters.docs||{},page:()=>v(G,{mdxStoryNameToKey:ce,mdxComponentAnnotations:E},v(z,null))};const Pe=["formInputAllFeatures"];export{Pe as __namedExportsOrder,E as default,j as formInputAllFeatures};
//# sourceMappingURL=NumberInput.stories-5b604609.js.map
