var U=Object.defineProperty;var d=(t,r)=>U(t,"name",{value:r,configurable:!0});import{r as l,R as j}from"./index-13f3a07b.js";import{c as n,A as G,M as X,S as M}from"./Props-42e8e9cb.js";import{a as u,j as e}from"./jsx-runtime-d0e2239a.js";import"./es.promise.resolve-04d58763.js";import"./index-3e51028f.js";import{G as z}from"./index-f5c91510.js";import{N as c}from"./index-39101f40.js";import{F as $}from"./index-9c0e0d32.js";import"./_commonjsHelpers-df0bf62c.js";import"./iframe-1e31e50d.js";import"./preload-helper-d51aff73.js";import"./index-32ac9e7b.js";import"./index-a2fa05d1.js";import"./_commonjs-dynamic-modules-fefbfc1c.js";import"./index-681e4b07-43c39e59.js";import"./index-aa905caf.js";import"./string-d2fe5096.js";import"./ui-6e300fc6.js";import"./styles-8f60b454.js";import"./signedNumbersAndDots-31962cac.js";import"./index-77fd1cfa.js";import"./_arrayReduce-b962fc90.js";import"./toString-40b958f3.js";import"./isArray-6de4a062.js";import"./isSymbol-3167caec.js";const I=$(c);try{FormNumberInput.displayName="FormNumberInput",FormNumberInput.__docgenInfo={description:"",displayName:"FormNumberInput",props:{type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},mode:{defaultValue:null,description:"mode is used only as a more declarative shortcut for decimalPrecision.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},onChange:{defaultValue:null,description:`DD-NOTE: NEED HELP with types:
I do not want to expose 2 different onChange handlers for numbers and for strings.
If I try to combine like OnChangeField<string> | OnChangeField<number> I end up having it accept only never.
If I use generics I anyway do not solve the issue - I need to pass correct value in runtime.
value can be null so there are cases when I can not distinguish type by value. Generics a re not checable at runtime.

I suggest that if it works well we would be able after all integrations to move to the point where we use
only number | null which would solve our problems. Currently we have numbers as number | string only because
of API inconsistencies.`,name:"onChange",required:!0,type:{name:"OnChangeField<any>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"percent"'},{value:'"price"'},{value:'"financial"'}]}},decimalPrecision:{defaultValue:null,description:"",name:"decimalPrecision",required:!1,type:{name:"number"}},mountComplementMode:{defaultValue:null,description:"",name:"mountComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},blurComplementMode:{defaultValue:null,description:"",name:"blurComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},isNegativeAllowed:{defaultValue:null,description:"",name:"isNegativeAllowed",required:!1,type:{name:"boolean"}},isSelectedOnFocus:{defaultValue:null,description:"",name:"isSelectedOnFocus",required:!1,type:{name:"boolean"}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},isNumberString:{defaultValue:null,description:"",name:"isNumberString",required:!1,type:{name:"boolean"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number | ((val: number) => number)"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number | ((val: number) => number)"}},thousandSeparator:{defaultValue:null,description:"",name:"thousandSeparator",required:!1,type:{name:'"," | " " | null'}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"DefaultError"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"ReactNode"}},showError:{defaultValue:null,description:"",name:"showError",required:!1,type:{name:"boolean"}},helper:{defaultValue:null,description:"",name:"helper",required:!1,type:{name:"ReactNode"}},touched:{defaultValue:null,description:"",name:"touched",required:!1,type:{name:"boolean | null"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"InputValue"}}}}}catch{}const f=d(()=>{const[t,r]=l.useState(null),[o,s]=l.useState("2131"),[m,F]=l.useState(!1),[L,g]=l.useState(!1),[v,H]=l.useState(!1),[T,P]=l.useState(!0),[V,D]=l.useState(!0),[x,k]=l.useState("2"),[E,K]=l.useState(void 0),[q,W]=l.useState(void 0),[C,O]=l.useState("max-scale"),[w,R]=l.useState("max-scale"),B=l.useMemo(()=>v?{onChange:(a,i)=>{console.log("onChange str ",i,typeof i),s(i),g(!0)},value:o}:{onChange:(a,i)=>{console.log("onChange num ",i,typeof i),r(i),g(!0)},value:t},[v,t]);return u("div",{children:[e(z,{}),u("div",{style:{marginBottom:"16px"},children:[e("button",{style:{marginRight:"20px"},onClick:()=>F(a=>!a),children:"Toggle disabled"}),e("button",{style:{marginRight:"20px"},onClick:()=>g(!1),children:"Reset touched"}),e("button",{style:{marginRight:"20px"},onClick:()=>r(42),children:"Set value to 42"}),e("button",{onClick:()=>r(.1),children:"Set value to 0.1"})]}),u("div",{style:{marginBottom:"16px"},children:[u("label",{children:[e("input",{type:"checkbox",checked:V,onChange:a=>D(a.target.checked)}),e("span",{style:{marginLeft:"4px"},children:"Allow negative?"})]}),e("span",{style:{margin:"0px 20px"},children:"|"}),u("label",{children:[u("select",{value:C,onChange:a=>O(a.target.value),children:[e("option",{value:"max-scale",children:"max-scale"}),e("option",{value:"min-scale",children:"min-scale"})]}),e("span",{style:{marginLeft:"4px"},children:"Complement on blur mode"})]}),e("span",{style:{margin:"0px 20px"},children:"|"}),u("label",{children:[u("select",{value:w,onChange:a=>R(a.target.value),children:[e("option",{value:"max-scale",children:"max-scale"}),e("option",{value:"min-scale",children:"min-scale"})]}),e("span",{style:{marginLeft:"4px"},children:"Complement on mount mode"})]}),e("span",{style:{margin:"0px 20px"},children:"|"}),u("label",{children:[e("input",{type:"checkbox",checked:T,onChange:a=>P(a.target.checked)}),e("span",{style:{marginLeft:"4px"},children:"Allow empty?"})]}),e("span",{style:{margin:"0px 20px"},children:"|"}),u("label",{children:[e("input",{type:"checkbox",checked:v,onChange:a=>{const{checked:i}=a.target;H(i),i?s((t==null?void 0:t.toString())??""):r(Number(o))}}),e("span",{style:{marginLeft:"4px"},children:"Is number represented as string?"})]})]}),u("div",{children:[u("label",{children:[e("span",{style:{marginLeft:"4px"},children:"Decimal Precision"}),e("input",{type:"number",value:x,min:0,maxLength:2,onChange:a=>k(a.target.value)})]}),u("label",{children:[e("span",{style:{marginLeft:"4px"},children:"Min value"}),e("input",{type:"number",value:E??"",onChange:a=>K(Number(a.target.value))})]}),u("label",{children:[e("span",{style:{marginLeft:"4px"},children:"Max value"}),e("input",{type:"number",value:q??"",onChange:a=>W(Number(a.target.value))})]})]}),e("hr",{style:{margin:"20px 0px"}}),e(I,{dataTestId:"form-input-sales-tax",disabled:m,error:t==null,errorMessage:"Field is required",helper:"how can i help?",id:"salesTax",isEmptyAllowed:T,isNegativeAllowed:V,blurComplementMode:C,mountComplementMode:w,min:E,max:q,decimalPrecision:x===""?0:Number(x),label:"Sales tax amount",startAdornment:"$",touched:L,...B})]})},"FormNumberInputExample"),h=d(()=>{const[t,r]=l.useState(null),o=l.useCallback((s,m)=>{r(m)},[]);return e(I,{id:"salesTax",value:t,label:"With id, check my data-test-id",onChange:o})},"NumberInputWithIdExample"),y=d(()=>{const[t,r]=l.useState(null),o=l.useCallback((s,m)=>{r(m)},[]);return e(I,{id:"SomeProps.SomeMoreNested.Gotcha",value:t,label:"With nested id, check my data-test-id",onChange:o})},"NumberInputWithNestedIdExample"),b=d(()=>{const[t,r]=l.useState(null),o=l.useCallback((s,m)=>{r(m)},[]);return e(I,{id:"SomeId.Here",dataTestId:"number-input-with-id-and-data-test-id",value:t,label:"With id and dataTestId, check my data-test-id",onChange:o})},"NumberInputWithIdAndDataTestIdExample");try{c.displayName="NumberInput",c.__docgenInfo={description:"",displayName:"NumberInput",props:{decimalPrecision:{defaultValue:null,description:"",name:"decimalPrecision",required:!1,type:{name:"number"}},mountComplementMode:{defaultValue:null,description:"",name:"mountComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},blurComplementMode:{defaultValue:null,description:"",name:"blurComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},isNegativeAllowed:{defaultValue:null,description:"",name:"isNegativeAllowed",required:!1,type:{name:"boolean"}},isSelectedOnFocus:{defaultValue:null,description:"",name:"isSelectedOnFocus",required:!1,type:{name:"boolean"}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},isNumberString:{defaultValue:null,description:"",name:"isNumberString",required:!1,type:{name:"boolean"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number | ((val: number) => number)"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number | ((val: number) => number)"}},mode:{defaultValue:null,description:"mode is used only as a more declarative shortcut for decimalPrecision.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"percent"'},{value:'"price"'},{value:'"financial"'}]}},thousandSeparator:{defaultValue:null,description:"",name:"thousandSeparator",required:!1,type:{name:'"," | " " | null'}},onChange:{defaultValue:null,description:`DD-NOTE: NEED HELP with types:
I do not want to expose 2 different onChange handlers for numbers and for strings.
If I try to combine like OnChangeField<string> | OnChangeField<number> I end up having it accept only never.
If I use generics I anyway do not solve the issue - I need to pass correct value in runtime.
value can be null so there are cases when I can not distinguish type by value. Generics a re not checable at runtime.

I suggest that if it works well we would be able after all integrations to move to the point where we use
only number | null which would solve our problems. Currently we have numbers as number | string only because
of API inconsistencies.`,name:"onChange",required:!0,type:{name:"OnChangeField<any>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{f.displayName="FormNumberInputExample",f.__docgenInfo={description:"",displayName:"FormNumberInputExample",props:{}}}catch{}try{h.displayName="NumberInputWithIdExample",h.__docgenInfo={description:"",displayName:"NumberInputWithIdExample",props:{}}}catch{}try{y.displayName="NumberInputWithNestedIdExample",y.__docgenInfo={description:"",displayName:"NumberInputWithNestedIdExample",props:{}}}catch{}try{b.displayName="NumberInputWithIdAndDataTestIdExample",b.__docgenInfo={description:"",displayName:"NumberInputWithIdAndDataTestIdExample",props:{}}}catch{}function N(){return N=Object.assign?Object.assign.bind():function(t){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var s in o)Object.prototype.hasOwnProperty.call(o,s)&&(t[s]=o[s])}return t},N.apply(this,arguments)}d(N,"_extends");const J={},Q="wrapper";function _({components:t,...r}){return n(Q,N({},J,r,{components:t,mdxType:"MDXLayout"}),n(X,{title:"NumberInput",component:c,mdxType:"Meta"}),n("h1",null,"NumberInput"),n(M,{name:"Form Input (all features)",mdxType:"Story"},n(f,{mdxType:"FormNumberInputExample"})),n(M,{name:"Form NumberInput dataTestId",mdxType:"Story"},n("h1",null,"Form NumberInput without dataTestId"),n("h4",null,"*of course if dataTestId provided it will be used"),n(h,{mdxType:"NumberInputWithIdExample"}),n("br",null),n(y,{mdxType:"NumberInputWithNestedIdExample"}),n("br",null),n(b,{mdxType:"NumberInputWithIdAndDataTestIdExample"})))}d(_,"MDXContent");_.isMDXComponent=!0;const A=d(()=>n(f,null),"formInputAllFeatures");A.storyName="Form Input (all features)";A.parameters={storySource:{source:"<FormNumberInputExample />"}};const S=d(()=>n(j.Fragment,null,n("h1",null,"Form NumberInput without dataTestId"),n("h4",null,"*of course if dataTestId provided it will be used"),n(h,null),n("br",null),n(y,null),n("br",null),n(b,null)),"formNumberInputDataTestId");S.storyName="Form NumberInput dataTestId";S.parameters={storySource:{source:`<h1>Form NumberInput without dataTestId</h1>
<h4>*of course if dataTestId provided it will be used</h4>
<NumberInputWithIdExample />
<br />
<NumberInputWithNestedIdExample />
<br />
<NumberInputWithIdAndDataTestIdExample />`}};const p={title:"NumberInput",component:c,includeStories:["formInputAllFeatures","formNumberInputDataTestId"]},Y={"Form Input (all features)":"formInputAllFeatures","Form NumberInput dataTestId":"formNumberInputDataTestId"};p.parameters=p.parameters||{};p.parameters.docs={...p.parameters.docs||{},page:()=>n(G,{mdxStoryNameToKey:Y,mdxComponentAnnotations:p},n(_,null))};const Ee=["formInputAllFeatures","formNumberInputDataTestId"];export{Ee as __namedExportsOrder,p as default,A as formInputAllFeatures,S as formNumberInputDataTestId};
//# sourceMappingURL=NumberInput.stories-53a86de7.js.map
