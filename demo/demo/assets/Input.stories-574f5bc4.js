var $=Object.defineProperty;var n=(t,a)=>$(t,"name",{value:a,configurable:!0});import{r as o}from"./index-13f3a07b.js";import{c as e,A as X,M as G,S as r}from"./Props-42e8e9cb.js";import{j as u,a as J}from"./jsx-runtime-d0e2239a.js";import"./es.promise.resolve-04d58763.js";import"./index-3e51028f.js";import{I as p,F as Q}from"./index-9c0e0d32.js";import{G as Y}from"./index-f5c91510.js";import"./_commonjsHelpers-df0bf62c.js";import"./iframe-1e31e50d.js";import"./preload-helper-d51aff73.js";import"./index-32ac9e7b.js";import"./index-a2fa05d1.js";import"./_commonjs-dynamic-modules-fefbfc1c.js";import"./index-681e4b07-43c39e59.js";import"./index-aa905caf.js";import"./string-d2fe5096.js";import"./ui-6e300fc6.js";import"./index-77fd1cfa.js";import"./_arrayReduce-b962fc90.js";import"./toString-40b958f3.js";import"./isArray-6de4a062.js";import"./isSymbol-3167caec.js";import"./styles-8f60b454.js";const l=n(t=>a=>u(p,{...t,...a}),"InputExampleHOC"),m=l({id:"default.example"}),c=l({id:"default.with.placeholder.example",placeholder:"your input goes here"}),f=l({id:"input.with.label.example",label:"Email"}),y=l({id:"input.with.default.value.example",label:"Email",defaultValue:"test@gmail.com"}),h=l({id:"input.with.placeholder.and.label.example",label:"Email",placeholder:"your mail here"}),T=l({id:"input.with.start.adornment.and.label.example",label:"Amount",startAdornment:"$",placeholder:"exact amount please"}),b=l({id:"input.only.with.start.adornment.example",startAdornment:"$"}),E=l({id:"input.with.both.adornments.example",label:"Amount",startAdornment:"$",endAdornment:u("a",{href:"https://google.com",rel:"noreferrer",target:"_blank",style:{whiteSpace:"nowrap"},children:"Show more"})}),I=l({id:"input.with.error.example",label:"Amount",startAdornment:"$",error:!0,endAdornment:u("span",{children:"USD"})}),V=l({id:"input.disabled.example",label:"Amount",startAdornment:"$",error:!0,defaultValue:"1902",disabled:!0,endAdornment:u("span",{children:"USD"})}),g=l({id:"input.with.max.length.example",label:"Amount",startAdornment:"$",inputProps:{pattern:"[0-9]+"},maxLength:5,defaultValue:"1902",endAdornment:u("span",{children:"USD"}),onKeyPress:t=>{/[0-9]/.test(t.key)||t.preventDefault()}}),q=l({id:"input.with.no.cyrillic.symbols.preset.example",preset:"withoutCyrillic"}),H=n(()=>{const[t,a]=o.useState(""),i=o.useMemo(()=>l({id:"controlled.input.example",dataTestId:"ssn-test-id",label:"SSN",startAdornment:"@",preset:"withoutCyrillic"}),[]);return u(i,{id:"controlled.input.example",value:t,onChange:d=>a(d.target.value)})},"ControlledInputExample"),L=n(()=>{const t=o.createRef(),a=o.useMemo(()=>l({id:"controlled.by.ref.input.example",dataTestId:"controlled-by-ref-input-example",inputRef:t,label:"SSN",startAdornment:"@"}),[]);return o.useEffect(()=>{setTimeout(()=>{t.current!=null&&(t.current.style.borderBottom="1px dotted green")},2e3)},[]),u(a,{id:"controlled.by.ref.input.example"})},"ControlledByRefInputExample");try{p.displayName="Input",p.__docgenInfo={description:"",displayName:"Input",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{l.displayName="InputExampleHOC",l.__docgenInfo={description:"",displayName:"InputExampleHOC",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{m.displayName="DefaultExample",m.__docgenInfo={description:"",displayName:"DefaultExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{c.displayName="DefaultWithPlaceholderExample",c.__docgenInfo={description:"",displayName:"DefaultWithPlaceholderExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{f.displayName="InputWithLabelExample",f.__docgenInfo={description:"",displayName:"InputWithLabelExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{y.displayName="InputWithDefaultValueExample",y.__docgenInfo={description:"",displayName:"InputWithDefaultValueExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{h.displayName="InputWithPlaceholderAndLabelExample",h.__docgenInfo={description:"",displayName:"InputWithPlaceholderAndLabelExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{T.displayName="InputWithStartAdornmentAndLabelExample",T.__docgenInfo={description:"",displayName:"InputWithStartAdornmentAndLabelExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{b.displayName="InputOnlyWithStartAdornmentExample",b.__docgenInfo={description:"",displayName:"InputOnlyWithStartAdornmentExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{E.displayName="InputWithBothAdornmentsExample",E.__docgenInfo={description:"",displayName:"InputWithBothAdornmentsExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{I.displayName="InputWithErrorExample",I.__docgenInfo={description:"",displayName:"InputWithErrorExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{V.displayName="InputDisabledExample",V.__docgenInfo={description:"",displayName:"InputDisabledExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{g.displayName="InputWithMaxLengthExample",g.__docgenInfo={description:"",displayName:"InputWithMaxLengthExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{q.displayName="InputWithNoCyrillicSymbolsPresetExample",q.__docgenInfo={description:"",displayName:"InputWithNoCyrillicSymbolsPresetExample",props:{preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}try{H.displayName="ControlledInputExample",H.__docgenInfo={description:"",displayName:"ControlledInputExample",props:{}}}catch{}try{L.displayName="ControlledByRefInputExample",L.__docgenInfo={description:"",displayName:"ControlledByRefInputExample",props:{}}}catch{}const Z=Q(p);try{FormInput.displayName="FormInput",FormInput.__docgenInfo={description:"",displayName:"FormInput",props:{type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`OnChangeField -> (field: string, value: string) => void

OnChangeEvent -> (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void`,name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement> | OnChangeField<InputValue>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"withoutCyrillic"'}]}},InputComponent:{defaultValue:null,description:"Component to be rendered instead a basic input",name:"InputComponent",required:!1,type:{name:"ElementType<any>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"RefObject<HTMLInputElement>"}},passInitialPlaceholder:{defaultValue:null,description:`used only by other wrapper components to control edge case placeholder integrations.
Masked Inputs for example needs this to be passed.`,name:"passInitialPlaceholder",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"DefaultError"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"ReactNode"}},showError:{defaultValue:null,description:"",name:"showError",required:!1,type:{name:"boolean"}},helper:{defaultValue:null,description:"",name:"helper",required:!1,type:{name:"ReactNode"}},touched:{defaultValue:null,description:"",name:"touched",required:!1,type:{name:"boolean | null"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"InputValue"}}}}}catch{}const v=n(()=>{const[t,a]=o.useState(10),[i,d]=o.useState(!1),[z,A]=o.useState(!1);return J("div",{children:[u(Y,{}),u("button",{style:{marginRight:"20px"},onClick:()=>d(x=>!x),children:"Toggle disabled"}),u("button",{onClick:()=>A(!1),children:"Reset touched"}),u("hr",{style:{margin:"20px 0px"}}),u(Z,{dataTestId:"form-input-ssn",disabled:i,error:!/^\d+$/g.test(t.toString()),errorMessage:t.toString()===""?"SSN is required":"SSN is incorrect",id:"ssn",helper:"Required. Only numbers",label:"SSN",placeholder:"special security number",startAdornment:"@",touched:z,value:t,onChange:x=>{a(x.target.value),A(!0)}})]})},"FormInputExample");try{v.displayName="FormInputExample",v.__docgenInfo={description:"",displayName:"FormInputExample",props:{}}}catch{}function M(){return M=Object.assign?Object.assign.bind():function(t){for(var a=1;a<arguments.length;a++){var i=arguments[a];for(var d in i)Object.prototype.hasOwnProperty.call(i,d)&&(t[d]=i[d])}return t},M.apply(this,arguments)}n(M,"_extends");const ee={},te="wrapper";function C({components:t,...a}){return e(te,M({},ee,a,{components:t,mdxType:"MDXLayout"}),e(G,{title:"Input",component:p,mdxType:"Meta"}),e("h1",null,"Input"),e("p",null,"Input examples"),e(r,{name:"Default",mdxType:"Story"},e(m,{mdxType:"DefaultExample"})),e(r,{name:"With placehodelr",mdxType:"Story"},e(c,{mdxType:"DefaultWithPlaceholderExample"})),e(r,{name:"With label",mdxType:"Story"},e(f,{mdxType:"InputWithLabelExample"})),e(r,{name:"With label and placeholder",mdxType:"Story"},e(h,{mdxType:"InputWithPlaceholderAndLabelExample"})),e(r,{name:"With default value",mdxType:"Story"},e(y,{mdxType:"InputWithDefaultValueExample"})),e(r,{name:"With start adornment and label",mdxType:"Story"},e(T,{mdxType:"InputWithStartAdornmentAndLabelExample"})),e(r,{name:"With start adornment only",mdxType:"Story"},e(b,{mdxType:"InputOnlyWithStartAdornmentExample"})),e(r,{name:"With both adornments",mdxType:"Story"},e(E,{mdxType:"InputWithBothAdornmentsExample"})),e(r,{name:"With an error",mdxType:"Story"},e(I,{mdxType:"InputWithErrorExample"})),e(r,{name:"Disabled",mdxType:"Story"},e(V,{mdxType:"InputDisabledExample"})),e(r,{name:"With max length",mdxType:"Story"},e(g,{mdxType:"InputWithMaxLengthExample"})),e(r,{name:"Controlled",mdxType:"Story"},e(H,{mdxType:"ControlledInputExample"})),e(r,{name:"Border controlled by ref",mdxType:"Story"},e(L,{mdxType:"ControlledByRefInputExample"})),e(r,{name:"Form Input",mdxType:"Story"},e(v,{mdxType:"FormInputExample"})),e(r,{name:"No cyrillic symbols preset",mdxType:"Story"},e(q,{mdxType:"InputWithNoCyrillicSymbolsPresetExample"})))}n(C,"MDXContent");C.isMDXComponent=!0;const w=n(()=>e(m,null),"defaultStory");w.storyName="Default";w.parameters={storySource:{source:"<DefaultExample />"}};const P=n(()=>e(c,null),"withPlacehodelr");P.storyName="With placehodelr";P.parameters={storySource:{source:"<DefaultWithPlaceholderExample />"}};const _=n(()=>e(f,null),"withLabel");_.storyName="With label";_.parameters={storySource:{source:"<InputWithLabelExample />"}};const N=n(()=>e(h,null),"withLabelAndPlaceholder");N.storyName="With label and placeholder";N.parameters={storySource:{source:"<InputWithPlaceholderAndLabelExample />"}};const K=n(()=>e(y,null),"withDefaultValue");K.storyName="With default value";K.parameters={storySource:{source:"<InputWithDefaultValueExample />"}};const F=n(()=>e(T,null),"withStartAdornmentAndLabel");F.storyName="With start adornment and label";F.parameters={storySource:{source:"<InputWithStartAdornmentAndLabelExample />"}};const S=n(()=>e(b,null),"withStartAdornmentOnly");S.storyName="With start adornment only";S.parameters={storySource:{source:"<InputOnlyWithStartAdornmentExample />"}};const O=n(()=>e(E,null),"withBothAdornments");O.storyName="With both adornments";O.parameters={storySource:{source:"<InputWithBothAdornmentsExample />"}};const W=n(()=>e(I,null),"withAnError");W.storyName="With an error";W.parameters={storySource:{source:"<InputWithErrorExample />"}};const R=n(()=>e(V,null),"disabled");R.storyName="Disabled";R.parameters={storySource:{source:"<InputDisabledExample />"}};const D=n(()=>e(g,null),"withMaxLength");D.storyName="With max length";D.parameters={storySource:{source:"<InputWithMaxLengthExample />"}};const B=n(()=>e(H,null),"controlled");B.storyName="Controlled";B.parameters={storySource:{source:"<ControlledInputExample />"}};const U=n(()=>e(L,null),"borderControlledByRef");U.storyName="Border controlled by ref";U.parameters={storySource:{source:"<ControlledByRefInputExample />"}};const k=n(()=>e(v,null),"formInput");k.storyName="Form Input";k.parameters={storySource:{source:"<FormInputExample />"}};const j=n(()=>e(q,null),"noCyrillicSymbolsPreset");j.storyName="No cyrillic symbols preset";j.parameters={storySource:{source:"<InputWithNoCyrillicSymbolsPresetExample />"}};const s={title:"Input",component:p,includeStories:["defaultStory","withPlacehodelr","withLabel","withLabelAndPlaceholder","withDefaultValue","withStartAdornmentAndLabel","withStartAdornmentOnly","withBothAdornments","withAnError","disabled","withMaxLength","controlled","borderControlledByRef","formInput","noCyrillicSymbolsPreset"]},ne={Default:"defaultStory","With placehodelr":"withPlacehodelr","With label":"withLabel","With label and placeholder":"withLabelAndPlaceholder","With default value":"withDefaultValue","With start adornment and label":"withStartAdornmentAndLabel","With start adornment only":"withStartAdornmentOnly","With both adornments":"withBothAdornments","With an error":"withAnError",Disabled:"disabled","With max length":"withMaxLength",Controlled:"controlled","Border controlled by ref":"borderControlledByRef","Form Input":"formInput","No cyrillic symbols preset":"noCyrillicSymbolsPreset"};s.parameters=s.parameters||{};s.parameters.docs={...s.parameters.docs||{},page:()=>e(X,{mdxStoryNameToKey:ne,mdxComponentAnnotations:s},e(C,null))};const xe=["defaultStory","withPlacehodelr","withLabel","withLabelAndPlaceholder","withDefaultValue","withStartAdornmentAndLabel","withStartAdornmentOnly","withBothAdornments","withAnError","disabled","withMaxLength","controlled","borderControlledByRef","formInput","noCyrillicSymbolsPreset"];export{xe as __namedExportsOrder,U as borderControlledByRef,B as controlled,s as default,w as defaultStory,R as disabled,k as formInput,j as noCyrillicSymbolsPreset,W as withAnError,O as withBothAdornments,K as withDefaultValue,_ as withLabel,N as withLabelAndPlaceholder,D as withMaxLength,P as withPlacehodelr,F as withStartAdornmentAndLabel,S as withStartAdornmentOnly};
//# sourceMappingURL=Input.stories-574f5bc4.js.map
