{"version":3,"file":"TextArea.stories-e3f09bac.js","sources":["../../src/UI/TextArea/utils.ts","../../src/UI/TextArea/styles.ts","../../src/UI/TextArea/index.tsx","../../src/UI/TextArea/__examples__/index.tsx","../../src/UI/TextArea/FormTextArea.tsx","../../src/UI/TextArea/__examples__/FormTextArea.tsx","../../src/UI/TextArea/TextArea.stories.mdx"],"sourcesContent":["export const getTextareaBoxHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = getComputedStyle(textarea)\n  const paddingTop = parseFloat(computedStyle.paddingTop)\n  const paddingBottom = parseFloat(computedStyle.paddingBottom)\n  const borderTop = parseFloat(computedStyle.borderTopWidth)\n  const borderBottom = parseFloat(computedStyle.borderBottomWidth)\n  return paddingTop + paddingBottom + borderTop + borderBottom\n}\n","import { css } from '@emotion/css'\n\nexport const LINE_HEIGHT = 24\n\nexport default css(`\n  &.cf-input-container {\n    min-height: var(--cf-input-height);\n    height: auto;\n\n    /*\n    * used so that fixed overlay would be positioned relative to the container\n    * instead of viewport. This way we counter nested relative containers of the overlay. \n    */\n    transform: rotate(0deg);\n\n    .cf-input {\n      line-height: ${LINE_HEIGHT}px;\n    }\n\n    .cf-label-overlay {\n      position: fixed;\n      left: 0px;\n      right: 0px;\n      top: 0px;\n      z-index: 1;\n      background: #FAFAFA;\n      height: 20px;\n      border-radius: 12px 12px 0px 0px;\n    }\n\n    textarea {\n      height: auto;\n    }\n  }\n`)\n","import { FC, useCallback, createRef, useMemo, useRef } from 'react'\nimport { cnx } from '@/utils/ui'\nimport Input from '../Input'\nimport type { BaseInputProps, TextAreaProps } from './types' // AZ-NOTE: do not replace relative import of types\nimport { getTextareaBoxHeight } from './utils'\nimport CLASS_NAME, { LINE_HEIGHT } from './styles'\n\nconst MIN_ROWS = 3\n\nconst TextArea: FC<TextAreaProps> = ({\n  className,\n  maxLength: _maxLength,\n  rows = MIN_ROWS,\n  maxRows,\n  textAreaRef: _textAreaRef,\n  ...rest\n}) => {\n  const textAreaRef = _textAreaRef ?? createRef<HTMLTextAreaElement>()\n  const boxHeightRef = useRef(0)\n\n  const onTextareaInput = useCallback(() => {\n    const txtArea = textAreaRef.current\n    if (txtArea == null) {\n      return\n    }\n\n    /**\n     * to have precise height for rows we need to subtract vertical paddings and borders.\n     * we calculate it only once assuming styles are not changing dynamicly.\n     * Though if they do nothing there is nothing critical -> user would see wihhout scroll\n     * not precisely @maxRows amount of rows.\n     */\n    if (boxHeightRef.current === 0) {\n      boxHeightRef.current = getTextareaBoxHeight(txtArea)\n    }\n\n    const maxHeight = LINE_HEIGHT * (maxRows ?? 0) + boxHeightRef.current\n\n    /**\n     * first we need to reset height and only then set to current height\n     * to adjust height dynamicly.\n     */\n\n    txtArea.style.height = 'auto'\n\n    if (maxHeight > boxHeightRef.current && txtArea.scrollHeight > maxHeight) {\n      txtArea.style.overflow = 'scroll'\n      txtArea.style.height = `${maxHeight}px`\n    } else {\n      txtArea.style.overflow = 'hidden'\n      txtArea.style.height = `${txtArea.scrollHeight}px`\n    }\n  }, [maxRows])\n\n  const InputComponent = useMemo(() => {\n    return ({ value, ...otherProps }: BaseInputProps) => (\n      <>\n        <textarea\n          {...otherProps}\n          value={value === null ? '' : value}\n          onInput={onTextareaInput}\n          ref={textAreaRef}\n          rows={rows}\n          maxLength={_maxLength}\n        />\n        <div className='cf-label-overlay' />\n      </>\n    )\n  }, [onTextareaInput, rows])\n\n  return (\n    <Input\n      {...rest}\n      className={cnx(className, CLASS_NAME)}\n      InputComponent={InputComponent}\n    />\n  )\n}\n\nexport default TextArea\n","import TextArea from '../'\nimport type { TextAreaProps } from '../types'\n\nexport { TextArea }\n\nexport const TextAreaExampleHOC = (hocProps: TextAreaProps) =>\n  (props: TextAreaProps) => (<TextArea {...hocProps} {...props} />)\n\nexport const DefaultTextareaExample = TextAreaExampleHOC({\n  id: 'default.textarea.example',\n  label: 'Description'\n})\n\nexport const MaxRowsTextareaExample = TextAreaExampleHOC({\n  id: 'max.rows.textarea.example',\n  label: 'Description',\n  maxRows: 7\n})\n\nexport const WithAdornmentsTextareaExample = TextAreaExampleHOC({\n  id: 'with.adornments.textarea.example',\n  label: 'Description',\n  startAdornment: '>>',\n  placeholder: 'description',\n  endAdornment: <span>Show more</span>\n})\n","import type { FC } from 'react'\nimport TextArea from '@UI/TextArea'\nimport FormFieldHOC from '@UI/FormFieldHOC'\n\nimport type { TextAreaProps } from './types' // AZ-NOTE: do not replace relative import of types\nimport type { FormFieldProps, FormCompatible } from '../FormFieldHOC'\n\nexport default FormFieldHOC<FormCompatible<TextAreaProps>>(TextArea as FC<FormFieldProps>)\n","import { ChangeEvent, FC, useState } from 'react'\nimport FormTextArea from '../FormTextArea'\n\nexport const FormTextAreaExample: FC = () => {\n  const [value, setValue] = useState('')\n  const [disabled, setDisabled] = useState(false)\n  const [touched, setTouched] = useState(false)\n\n  return (\n    <div>\n      <button\n        style={{ marginRight: '20px' }}\n        onClick={() => setDisabled(prev => !prev)}\n      >\n        Toggle disabled\n      </button>\n      <button onClick={() => setTouched(false)}>Reset touched</button>\n      <hr style={{ margin: '20px 0px' }} />\n      <FormTextArea\n        dataTestId='form-input-ssn'\n        disabled={disabled}\n        error={!/^\\d+$/g.test(value)}\n        errorMessage={value === '' ? 'SSN is required' : 'SSN is incorrect'}\n        id='ssn'\n        helper='Required. Only numbers'\n        label='SSN'\n        startAdornment='@'\n        touched={touched}\n        value={value}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setValue(e.target.value)\n          setTouched(true)\n        }}\n      />\n    </div>\n  )\n}\n","import { Meta, Story } from '@storybook/addon-docs'\nimport {\n  TextArea,\n  DefaultTextareaExample,\n  MaxRowsTextareaExample,\n  WithAdornmentsTextareaExample\n} from './__examples__'\nimport { FormTextAreaExample } from './__examples__/FormTextArea'\n\n<Meta title='TextArea' component={TextArea} />\n\n# TextArea\n\nInTextAreaput examples\n\n<Story name='Default'>\n  <DefaultTextareaExample />\n</Story>\n\n<Story name='Max visible rows'>\n  <MaxRowsTextareaExample />\n</Story>\n\n<Story name='With adornments'>\n  <WithAdornmentsTextareaExample />\n</Story>\n\n<Story name='Form TextArea'>\n  <FormTextAreaExample />\n</Story>"],"names":["getTextareaBoxHeight","__name","textarea","computedStyle","paddingTop","paddingBottom","borderTop","borderBottom","LINE_HEIGHT","CLASS_NAME","css","MIN_ROWS","TextArea","className","_maxLength","maxRows","_textAreaRef","textAreaRef","createRef","boxHeightRef","useRef","onTextareaInput","useCallback","txtArea","maxHeight","InputComponent","useMemo","value","otherProps","_jsx","rows","Input","rest","TextAreaExampleHOC","hocProps","props","DefaultTextareaExample","MaxRowsTextareaExample","WithAdornmentsTextareaExample","FormTextArea$1","FormFieldHOC","FormTextAreaExample","setValue","useState","disabled","setDisabled","touched","setTouched","_jsxs","prev","FormTextArea","e","layoutProps","MDXLayout","MDXContent","components","mdx","Meta","Story","isMDXComponent","defaultStory","storyName","parameters","storySource","source","maxVisibleRows","withAdornments","formTextArea","componentMeta","title","component","includeStories","mdxStoryNameToKey","docs","page","AddContext","__namedExportsOrder"],"mappings":"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"}