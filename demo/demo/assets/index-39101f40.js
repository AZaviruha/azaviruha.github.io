var X=Object.defineProperty;var d=(e,l)=>X(e,"name",{value:l,configurable:!0});import{r as m}from"./index-13f3a07b.js";import{o as Y,s as J}from"./signedNumbersAndDots-31962cac.js";import{I as Q}from"./index-9c0e0d32.js";import{j as ee}from"./jsx-runtime-d0e2239a.js";const D=/[^0-9.-]/g,$=d(e=>e==="-"?"-0":e===""?"0":e,"complementMinusOrEmpty"),te=d(e=>{if(e==null||e===""||e==="-")return"";const[l="",i=""]=e.toString().split(".");return i===""?l:`${$(l)}.${i.replace(/0+$/,"")}`},"trimDecimalZeros"),ne=d((e,l=0)=>{if(l<1)return e.toString();const[i="",o=""]=e.toString().split(".");e=`${$(i)}.${o.slice(0,l)}`;const p=Math.max(0,l-o.length);return`${e}${"0".repeat(p)}`},"padZeros"),re=d((e,l)=>{if(l<1)return-1;if(l>e.length)return e.length-1;let i=0;for(let o=0;o<e.length;o++)if(!D.test(e[o])&&(i++,i===l))return o;return-1},"findNthNumCharIndex"),q=d(e=>e==null||e==="","isEmptyString"),le=d(e=>q(e)||isNaN(Number(e)),"isInvalidNumberString"),ae=d(e=>e.replace(/^0+(?=\d)/,""),"trimEndingZeros"),ue=d(e=>e.replace(/^(-)?0*(?=\d)/,"$1"),"trimStartingZeros"),ie=d((e,l)=>{const i=e.split(".")[1]??"",o=e.includes(".")?".":"",p=i.slice(0,l);return`${o}${p}`},"getDecimalPartTrimmedWithDot"),k=d((e,l,i)=>(l==="min-scale"?te(e):ne(e,l==="max-scale"?i:0)).replace(/\.$/,""),"applyComplement"),oe={percent:{startAdornment:"%",isNegativeAllowed:!1,min:0,max:100,isEmptyAllowed:!1,mode:"decimal"},price:{startAdornment:"$",isNegativeAllowed:!1,min:0,isEmptyAllowed:!1,mode:"decimal"},financial:{startAdornment:"$",isEmptyAllowed:!0,mode:"decimal",blurComplementMode:"min-scale",mountComplementMode:"min-scale"}},se={blurComplementMode:"max-scale",mountComplementMode:"max-scale"},de={isNegativeAllowed:!0,isEmptyAllowed:!0,isNumberString:!1,isSelectedOnFocus:!1,mode:"integer",thousandSeparator:","},me={...se,...de},ce=21,x="-",F={integer:0,decimal:2},pe=["Insert"],O=d(({preset:e,...l})=>{const{blurComplementMode:i,mountComplementMode:o,isEmptyAllowed:p,isNumberString:H,isSelectedOnFocus:R,mode:K,min:g,max:b,isNegativeAllowed:B,decimalPrecision:U,onFocus:C,onChange:_,onBlur:v,thousandSeparator:c,value:M,preset:fe,...W}={...me,...e!=null?oe[e]:void 0,...l},y=U??(K==="integer"?F.integer:F.decimal),I=(g??0)<0?!0:B,s=m.useRef(null),T=m.useRef({chars:0,edge:"end"}),V=m.useRef(null),S=m.useRef(!1),w=m.useCallback((n,t)=>{if((n===""||n==null)&&t==null)return"";if(n===x&&I)return x;const a=(n??"").toString();let r=c!=null?a.replace(new RegExp(c,"g"),""):a;if(isNaN(Number(r)))return V.current??"";if(p&&q(r))return"";I||(r=Y(r)??""),r=ae(r);const u=Number(r);g!=null&&(typeof g=="number"?u<g:u<g(u))&&(r=`${typeof g=="number"?g:g(u)}`),b!=null&&(typeof b=="number"?u>b:u>b(u))&&(r=`${typeof b=="number"?b:b(u)}`);const f=ue(r.split(".")[0]??"");let h="";y>0&&r.includes(".")&&(h=ie(r,y));let N=`${c!=null?f.replace(/\B(?=(\d{3})+(?!\d))/g,c):f}${h}`;return t!=null&&(N=k(N,t,y)),N},[I,p,y,g,b,c]),P=m.useRef(w),Z=m.useCallback(n=>{const t=s.current;if(t==null)return;let a=n.target.value.replace(D,"");if(a==="."){t.value="0.",t.setSelectionRange(2,2);return}a=P.current(a);const{chars:r,edge:u}=T.current;let f=0;u==="end"?f=Math.max(0,a.length-r):f=re(a,r)+1,t.value=a,t.setSelectionRange(f,f);const h=J(a)??"",E=H?h:le(h)?null:Number(h);S.current=!0,_(n.target.getAttribute("id")??"",E)},[_,H]),G=m.useCallback(n=>{if(s.current==null)return;const t=s.current.value,a=s.current.selectionStart??0,r=s.current.selectionEnd??0;if(pe.includes(n.key)){n.preventDefault();return}if(n.key===x&&!I){n.preventDefault();return}n.key==="."&&y<1&&n.preventDefault();const u=Math.max(0,a-1),f=n.key==="Backspace",h=n.key==="Delete"||n.key==="Del",E=r===a;if(f&&t[u]===c&&E){n.preventDefault(),s.current.setSelectionRange(u,u);return}if(h&&t[a]===c&&E){n.preventDefault(),s.current.setSelectionRange(a+1,a+1);return}if(h)T.current={chars:t.slice(0,a).replace(D,"").length,edge:"start"};else{const N=Math.max(0,u-1);let A=f&&t[N]===x&&t[r]===c?1:0;n.key==="."&&(A+=t[r]===c?2:t[u]===c?1:0);const L=t.indexOf(".");L>-1&&r>L&&/\d/.test(n.key)&&E&&(A+=1),T.current={chars:Math.max(t.length-r-A,0),edge:"end"}}V.current=t},[I,y,c]),j=m.useCallback(n=>{if(s.current==null)return;S.current=!1;let t=s.current.value;if(p&&q(t)){V.current=t,v==null||v(n);return}t=q(t)?"0":t,t.startsWith(".")&&(t=`0${t}`),t=k(t,i,y),V.current=t,n.target.value=t,s.current.value=t,v==null||v(n)},[v,i,y,p]),z=m.useCallback(n=>{var t;C==null||C(n),R&&((t=n==null?void 0:n.target)==null||t.select())},[C,R]);return m.useEffect(()=>{P.current=w},[w]),m.useEffect(()=>{if(s.current!=null){if(S.current){S.current=!1;return}s.current.value=P.current(M,o),V.current=s.current.value}},[M,y,o]),ee(Q,{inputRef:s,type:"text",defaultValue:w(M,o),onChange:Z,onFocus:z,onKeyDown:G,onBlur:j,maxLength:ce,...W})},"NumberInput");try{O.displayName="NumberInput",O.__docgenInfo={description:"",displayName:"NumberInput",props:{decimalPrecision:{defaultValue:null,description:"",name:"decimalPrecision",required:!1,type:{name:"number"}},mountComplementMode:{defaultValue:null,description:"",name:"mountComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},blurComplementMode:{defaultValue:null,description:"",name:"blurComplementMode",required:!1,type:{name:"enum",value:[{value:'"min-scale"'},{value:'"max-scale"'}]}},isNegativeAllowed:{defaultValue:null,description:"",name:"isNegativeAllowed",required:!1,type:{name:"boolean"}},isSelectedOnFocus:{defaultValue:null,description:"",name:"isSelectedOnFocus",required:!1,type:{name:"boolean"}},isEmptyAllowed:{defaultValue:null,description:"",name:"isEmptyAllowed",required:!1,type:{name:"boolean"}},isNumberString:{defaultValue:null,description:"",name:"isNumberString",required:!1,type:{name:"boolean"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"number | ((val: number) => number)"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"number | ((val: number) => number)"}},mode:{defaultValue:null,description:"mode is used only as a more declarative shortcut for decimalPrecision.",name:"mode",required:!1,type:{name:"enum",value:[{value:'"integer"'},{value:'"decimal"'}]}},preset:{defaultValue:null,description:"",name:"preset",required:!1,type:{name:"enum",value:[{value:'"percent"'},{value:'"price"'},{value:'"financial"'}]}},thousandSeparator:{defaultValue:null,description:"",name:"thousandSeparator",required:!1,type:{name:'"," | " " | null'}},onChange:{defaultValue:null,description:`DD-NOTE: NEED HELP with types:
I do not want to expose 2 different onChange handlers for numbers and for strings.
If I try to combine like OnChangeField<string> | OnChangeField<number> I end up having it accept only never.
If I use generics I anyway do not solve the issue - I need to pass correct value in runtime.
value can be null so there are cases when I can not distinguish type by value. Generics a re not checable at runtime.

I suggest that if it works well we would be able after all integrations to move to the point where we use
only number | null which would solve our problems. Currently we have numbers as number | string only because
of API inconsistencies.`,name:"onChange",required:!0,type:{name:"OnChangeField<any>"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}}}}}catch{}export{O as N};
//# sourceMappingURL=index-39101f40.js.map
