var _=Object.defineProperty;var l=(e,t)=>_(e,"name",{value:t,configurable:!0});import{r as d}from"./index-13f3a07b.js";import{c as n,A as R,M as F,S as T}from"./Props-42e8e9cb.js";import{a as A,F as N,j as o}from"./jsx-runtime-d0e2239a.js";import"./es.promise.resolve-04d58763.js";import"./index-3e51028f.js";import{c as K,b as S}from"./ui-6e300fc6.js";import{I as P,F as D}from"./index-9c0e0d32.js";import"./_commonjsHelpers-df0bf62c.js";import"./iframe-1e31e50d.js";import"./preload-helper-d51aff73.js";import"./index-32ac9e7b.js";import"./index-a2fa05d1.js";import"./_commonjs-dynamic-modules-fefbfc1c.js";import"./index-681e4b07-43c39e59.js";import"./index-aa905caf.js";import"./string-d2fe5096.js";import"./index-77fd1cfa.js";import"./_arrayReduce-b962fc90.js";import"./toString-40b958f3.js";import"./isArray-6de4a062.js";import"./isSymbol-3167caec.js";const U=l(e=>{const t=getComputedStyle(e),r=parseFloat(t.paddingTop),u=parseFloat(t.paddingBottom),p=parseFloat(t.borderTopWidth),s=parseFloat(t.borderBottomWidth);return r+u+p+s},"getTextareaBoxHeight"),H=24,B=K(`
  &.cf-input-container {
    min-height: var(--cf-input-height);
    height: auto;

    /*
    * used so that fixed overlay would be positioned relative to the container
    * instead of viewport. This way we counter nested relative containers of the overlay. 
    */
    transform: rotate(0deg);

    .cf-input {
      line-height: ${H}px;
    }

    .cf-label-overlay {
      position: fixed;
      left: 0px;
      right: 0px;
      top: 0px;
      z-index: 1;
      background: #FAFAFA;
      height: 20px;
      border-radius: 12px 12px 0px 0px;
    }

    textarea {
      height: auto;
    }
  }
`),O=3,i=l(({className:e,maxLength:t,rows:r=O,maxRows:u,textAreaRef:p,...s})=>{const m=p??d.createRef(),h=d.useRef(0),q=d.useCallback(()=>{const a=m.current;if(a==null)return;h.current===0&&(h.current=U(a));const f=H*(u??0)+h.current;a.style.height="auto",f>h.current&&a.scrollHeight>f?(a.style.overflow="scroll",a.style.height=`${f}px`):(a.style.overflow="hidden",a.style.height=`${a.scrollHeight}px`)},[u]),C=d.useMemo(()=>({value:a,...f})=>A(N,{children:[o("textarea",{...f,value:a===null?"":a,onInput:q,ref:m,rows:r,maxLength:t}),o("div",{className:"cf-label-overlay"})]}),[q,r]);return o(P,{...s,className:S(e,B),InputComponent:C})},"TextArea");try{i.displayName="TextArea",i.__docgenInfo={description:"",displayName:"TextArea",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:{value:"3"},description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}const y=l(e=>t=>o(i,{...e,...t}),"TextAreaExampleHOC"),x=y({id:"default.textarea.example",label:"Description"}),b=y({id:"max.rows.textarea.example",label:"Description",maxRows:7}),V=y({id:"with.adornments.textarea.example",label:"Description",startAdornment:">>",placeholder:"description",endAdornment:o("span",{children:"Show more"})});try{i.displayName="TextArea",i.__docgenInfo={description:"",displayName:"TextArea",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:{value:"3"},description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}try{y.displayName="TextAreaExampleHOC",y.__docgenInfo={description:"",displayName:"TextAreaExampleHOC",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:null,description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}try{x.displayName="DefaultTextareaExample",x.__docgenInfo={description:"",displayName:"DefaultTextareaExample",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:null,description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}try{b.displayName="MaxRowsTextareaExample",b.__docgenInfo={description:"",displayName:"MaxRowsTextareaExample",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:null,description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}try{V.displayName="WithAdornmentsTextareaExample",V.__docgenInfo={description:"",displayName:"WithAdornmentsTextareaExample",props:{textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:null,description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},error:{defaultValue:null,description:"Indicate an error.",name:"error",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!0,type:{name:"string"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"InputValue"}}}}}catch{}const W=D(i);try{FormTextArea.displayName="FormTextArea",FormTextArea.__docgenInfo={description:"",displayName:"FormTextArea",props:{type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type]",name:"type",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"className to override styles",name:"className",required:!1,type:{name:"string"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},dataTestId:{defaultValue:null,description:"test id attribute",name:"dataTestId",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"MouseEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},defaultValue:{defaultValue:null,description:"The default `input` element value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If `true`, the `input` element will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"OnChangeEvent<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},label:{defaultValue:null,description:"input label",name:"label",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the input before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyPress:{defaultValue:null,description:"",name:"onKeyPress",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},maxLength:{defaultValue:null,description:"max length of symbols which can be typed",name:"maxLength",required:!1,type:{name:"number"}},autoComplete:{defaultValue:null,description:"",name:"autoComplete",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element will be focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},textAreaRef:{defaultValue:null,description:"Pass a ref to the `textarea` element.",name:"textAreaRef",required:!1,type:{name:"RefObject<HTMLTextAreaElement>"}},rows:{defaultValue:null,description:"controls starting height of the textarea by the specific amount of rows",name:"rows",required:!1,type:{name:"number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display after which textarea stops growing",name:"maxRows",required:!1,type:{name:"number"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"",name:"error",required:!1,type:{name:"DefaultError"}},errorMessage:{defaultValue:null,description:"",name:"errorMessage",required:!1,type:{name:"ReactNode"}},showError:{defaultValue:null,description:"",name:"showError",required:!1,type:{name:"boolean"}},helper:{defaultValue:null,description:"",name:"helper",required:!1,type:{name:"ReactNode"}},touched:{defaultValue:null,description:"",name:"touched",required:!1,type:{name:"boolean | null"}},value:{defaultValue:null,description:"",name:"value",required:!0,type:{name:"DefaultValue"}}}}}catch{}const E=l(()=>{const[e,t]=d.useState(""),[r,u]=d.useState(!1),[p,s]=d.useState(!1);return A("div",{children:[o("button",{style:{marginRight:"20px"},onClick:()=>u(m=>!m),children:"Toggle disabled"}),o("button",{onClick:()=>s(!1),children:"Reset touched"}),o("hr",{style:{margin:"20px 0px"}}),o(W,{dataTestId:"form-input-ssn",disabled:r,error:!/^\d+$/g.test(e),errorMessage:e===""?"SSN is required":"SSN is incorrect",id:"ssn",helper:"Required. Only numbers",label:"SSN",startAdornment:"@",touched:p,value:e,onChange:m=>{t(m.target.value),s(!0)}})]})},"FormTextAreaExample");try{E.displayName="FormTextAreaExample",E.__docgenInfo={description:"",displayName:"FormTextAreaExample",props:{}}}catch{}function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var u in r)Object.prototype.hasOwnProperty.call(r,u)&&(e[u]=r[u])}return e},g.apply(this,arguments)}l(g,"_extends");const k={},j="wrapper";function M({components:e,...t}){return n(j,g({},k,t,{components:e,mdxType:"MDXLayout"}),n(F,{title:"TextArea",component:i,mdxType:"Meta"}),n("h1",null,"TextArea"),n("p",null,"InTextAreaput examples"),n(T,{name:"Default",mdxType:"Story"},n(x,{mdxType:"DefaultTextareaExample"})),n(T,{name:"Max visible rows",mdxType:"Story"},n(b,{mdxType:"MaxRowsTextareaExample"})),n(T,{name:"With adornments",mdxType:"Story"},n(V,{mdxType:"WithAdornmentsTextareaExample"})),n(T,{name:"Form TextArea",mdxType:"Story"},n(E,{mdxType:"FormTextAreaExample"})))}l(M,"MDXContent");M.isMDXComponent=!0;const L=l(()=>n(x,null),"defaultStory");L.storyName="Default";L.parameters={storySource:{source:"<DefaultTextareaExample />"}};const I=l(()=>n(b,null),"maxVisibleRows");I.storyName="Max visible rows";I.parameters={storySource:{source:"<MaxRowsTextareaExample />"}};const v=l(()=>n(V,null),"withAdornments");v.storyName="With adornments";v.parameters={storySource:{source:"<WithAdornmentsTextareaExample />"}};const w=l(()=>n(E,null),"formTextArea");w.storyName="Form TextArea";w.parameters={storySource:{source:"<FormTextAreaExample />"}};const c={title:"TextArea",component:i,includeStories:["defaultStory","maxVisibleRows","withAdornments","formTextArea"]},z={Default:"defaultStory","Max visible rows":"maxVisibleRows","With adornments":"withAdornments","Form TextArea":"formTextArea"};c.parameters=c.parameters||{};c.parameters.docs={...c.parameters.docs||{},page:()=>n(R,{mdxStoryNameToKey:z,mdxComponentAnnotations:c},n(M,null))};const ye=["defaultStory","maxVisibleRows","withAdornments","formTextArea"];export{ye as __namedExportsOrder,c as default,L as defaultStory,w as formTextArea,I as maxVisibleRows,v as withAdornments};
//# sourceMappingURL=TextArea.stories-e3f09bac.js.map
