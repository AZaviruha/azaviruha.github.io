{"version":3,"file":"NumberInput.stories-5b604609.js","sources":["../../src/UI/NumberInputPlanB/constants.ts","../../src/UI/NumberInputPlanB/utils.ts","../../src/UI/NumberInputPlanB/components/NumberMaskHOC.tsx","../../src/UI/NumberInputPlanB/index.tsx","../../src/UI/NumberInputPlanB/__examples__/index.tsx","../../src/UI/NumberInputPlanB/components/FormNumberInput.tsx","../../src/UI/NumberInputPlanB/__examples__/FormNumberInput.tsx","../../src/UI/NumberInputPlanB/NumberInput.stories.mdx"],"sourcesContent":["import type { NumberModes, NumberMaskConfig } from './types'\n\nexport const SCALES: Record<NumberModes, number> = {\n  integer: 0,\n  decimal: 2\n}\n\nexport const DEFAULT_NUMBER_CONFIGS: NumberMaskConfig = {\n  radix: '.',\n  scale: SCALES.integer,\n  thousandsSeparator: ','\n}\n\n/**\n * https://esdiscuss.org/topic/numberformat-maxsignificantdigits-limit\n */\nexport const MAGIC_NUMBER = 21\n","import { formatDecimal, formatInteger } from '@utils/formatters/numbers2'\nimport signedNumbersAndDots from '@utils/formatters/signedNumbersAndDots'\nimport onlyNumbersAndDots from '@utils/formatters/onlyNumbersAndDots'\nimport type { ComplementModes } from './types'\n\nimport { SCALES } from './constants'\n\nexport interface ValueFormatterConfig {\n  complementMode?: ComplementModes\n  isEmptyAllowed?: boolean\n  scale?: number\n  signed?: boolean\n}\n\nconst DEFAULT_CONFIG: Required<ValueFormatterConfig> = {\n  complementMode: 'max-scale',\n  isEmptyAllowed: true,\n  scale: SCALES.decimal,\n  signed: false\n}\n\n/**\n * See '../__tests__/utils.ts' for examples.\n * See description of `ComplementModes` type for a high-level description\n * of how complement modes work.\n */\nexport const formatValueView = (\n  _value: number | string | null | undefined,\n  config: ValueFormatterConfig\n): string => {\n  const {\n    complementMode = DEFAULT_CONFIG.complementMode,\n    isEmptyAllowed = DEFAULT_CONFIG.isEmptyAllowed,\n    scale = DEFAULT_CONFIG.scale,\n    signed: isSigned = DEFAULT_CONFIG.signed\n  } = config\n\n  const isEmptyValue = (_value === '') || (_value == null)\n  if (isEmptyValue && isEmptyAllowed) {\n    return ''\n  }\n\n  if (complementMode === 'none') {\n    return _value?.toString() ?? ''\n  }\n\n  const value = isEmptyValue ? '0' : _value.toString()\n\n  /**\n   * AZ-NOTE: it's safe to use replacers with \"dots\" for integers, since\n   * formatter for integer will remove any possible dots.\n   */\n  const replacer = isSigned ? signedNumbersAndDots : onlyNumbersAndDots\n\n  if (scale === SCALES.decimal) {\n    if (complementMode === 'max-scale') {\n      const conf = { allowNegative: isSigned, mantissa: scale }\n      return replacer(formatDecimal(replacer(value), conf)) ?? ''\n    } else {\n      return parseFloat(replacer(value) ?? '').toString()\n    }\n  }\n\n  if (scale === SCALES.integer) {\n    return formatInteger(replacer(value), { allowNegative: isSigned }) ?? ''\n  }\n\n  return ''\n}\n","import { useCallback, useMemo, useRef } from 'react'\nimport type { ChangeEvent, FC, FocusEvent } from 'react'\nimport { IMaskInput } from 'react-imask'\n\nimport { isOnChangeByEvent } from '@UI/Input/utils'\nimport { formatValueView } from '@UI/NumberInputPlanB/utils'\nimport type { NumberMaskProps, NumberHOCProps, NumberHOCPropKeys } from '../types'\n\nconst NumberMask: FC<NumberMaskProps> = ({\n  complementOnBlur = 'max-scale',\n  complementOnMount = 'max-scale',\n  focusSelectionMode = 'all',\n  initialPlaceholder,\n  inputRef: _inputRef,\n  isEmptyAllowed = false,\n  onBlur: _onBlur,\n  onChange: _onChange,\n  onFocus: _onFocus,\n  scale,\n  signed,\n  value: _value,\n  ...rest\n}) => {\n  const refMask = useRef(null)\n  const defaultInputRef = useRef<HTMLInputElement>(null)\n  const refIsFormatted = useRef(false)\n\n  const refInput = useCallback((elem: HTMLInputElement): void => {\n    const ref = _inputRef ?? defaultInputRef\n    if (ref !== undefined) {\n      (ref.current as any) = elem\n    }\n  }, [_inputRef])\n\n  const value = useMemo(() => {\n    if (refIsFormatted.current) {\n      return _value?.toString() ?? ''\n    }\n\n    const formatterConfigMount = {\n      complementMode: complementOnMount,\n      isEmptyAllowed,\n      signed,\n      scale\n    }\n\n    refIsFormatted.current = true\n    return formatValueView(_value ?? '', formatterConfigMount)\n  }, [\n    _value,\n    complementOnMount,\n    isEmptyAllowed,\n    signed,\n    scale\n  ])\n\n  // ========================================== //\n  //                   HANDLERS                 //\n  // ========================================== //\n\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (_onChange == null) {\n      return\n    }\n\n    if (isOnChangeByEvent(_onChange)) {\n      _onChange(e)\n    } else {\n      _onChange(e.target.id, e.target.value)\n    }\n  }, [_onChange])\n\n  const onBlur = useCallback((evt: FocusEvent<HTMLInputElement>) => {\n    _onBlur?.(evt)\n\n    if (evt.target == null) {\n      return\n    }\n\n    const formatterConfigBlur = { complementMode: complementOnBlur, isEmptyAllowed, scale, signed }\n    const formattedValue = formatValueView(evt.target.value, formatterConfigBlur)\n\n    if (formattedValue !== evt.target.value) {\n      evt.target.value = formattedValue\n      onChange(evt)\n    }\n  }, [\n    complementOnBlur,\n    isEmptyAllowed,\n    _onBlur,\n    onChange,\n    scale,\n    signed\n  ])\n\n  const onFocus = useCallback((evt: FocusEvent<HTMLInputElement>) => {\n    _onFocus?.(evt)\n    const value = evt.target?.value ?? '-' // '-' is to prevent selection of empty string\n\n    if (focusSelectionMode === 'all') {\n      evt?.target?.select()\n    } else if ((focusSelectionMode === 'zero') && (Number(value) === 0)) {\n      evt?.target?.select()\n    }\n  }, [focusSelectionMode, _onFocus])\n\n  const onAccept = useCallback((_, __, _evt?: InputEvent) => {\n    if (_evt?.target != null) {\n      onChange?.(_evt as any as ChangeEvent<HTMLInputElement>)\n    }\n  }, [onChange])\n\n  // ========================================== //\n\n  return (\n    <IMaskInput\n      {...rest}\n      inputRef={refInput}\n      lazy={value.length === 0}\n      mask={Number}\n      normalizeZeros={false}\n      padFractionalZeros={false}\n      onAccept={onAccept}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      ref={refMask}\n      scale={scale}\n      signed={signed}\n      value={value}\n    />\n  )\n}\n\nconst NumberMaskHOC = ({ maskConfigs, ...otherHocProps }: NumberHOCProps) => {\n  return (props: Omit<NumberMaskProps, NumberHOCPropKeys>) => {\n    return (\n      <NumberMask\n        {...props}\n        {...otherHocProps}\n        {...maskConfigs}\n      />\n    )\n  }\n}\n\nexport default NumberMaskHOC\n","import { useMemo } from 'react'\nimport type { FC } from 'react'\n\nimport Input from '@UI/Input'\n\nimport type { NumberInputPropsPlanB, NumberMaskConfig } from './types'\nimport { DEFAULT_NUMBER_CONFIGS, MAGIC_NUMBER, SCALES } from './constants'\nimport NumberMaskHOC from './components/NumberMaskHOC'\n\nconst NumberInput: FC<NumberInputPropsPlanB> = ({\n  complementOnBlur,\n  complementOnMount,\n  focusSelectionMode,\n  inputRef,\n  isEmptyAllowed,\n  isSigned,\n  maskConfigs: _maskConfigs,\n  maxValue,\n  minValue,\n  numberMode,\n  ...inputProps\n}) => {\n  const maskConfigs: NumberMaskConfig = useMemo(() => {\n    const mergedConfig = {\n      ...DEFAULT_NUMBER_CONFIGS,\n      ..._maskConfigs\n    }\n\n    return {\n      ...mergedConfig,\n      max: maxValue ?? mergedConfig.max,\n      min: minValue ?? mergedConfig.min,\n      scale: numberMode == null ? mergedConfig.scale : SCALES[numberMode],\n      signed: isSigned ?? mergedConfig.signed\n    }\n  }, [\n    _maskConfigs,\n    isSigned,\n    maxValue,\n    minValue,\n    numberMode\n  ])\n\n  const InputComponent = useMemo(() => {\n    return NumberMaskHOC({\n      complementOnBlur,\n      complementOnMount,\n      focusSelectionMode,\n      inputRef,\n      isEmptyAllowed,\n      maskConfigs\n    })\n  }, [\n    complementOnBlur,\n    complementOnMount,\n    focusSelectionMode,\n    inputRef,\n    isEmptyAllowed,\n    maskConfigs\n  ])\n\n  return (\n    <Input\n      {...inputProps}\n      InputComponent={InputComponent}\n      maxLength={MAGIC_NUMBER}\n      passInitialPlaceholder\n    />\n  )\n}\n\nexport default NumberInput\n","import { \n  type ChangeEvent,\n  type FC,\n  useMemo, \n  useState\n} from 'react'\nimport NumberInput from '../'\nimport type { NumberInputPropsPlanB } from '../types'\n\nexport { NumberInput }\n\nexport const NumberInputExampleHOC = (hocProps: Omit<NumberInputPropsPlanB, 'value'>) =>\n  (props: NumberInputPropsPlanB) => (<NumberInput {...hocProps} {...props} />)\n\nexport const IntegerInputExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'integer.input.example',\n    label: 'Mileage',\n    endAdornment: 'miles',\n  }), [])\n\n  return <Input id='integer.input.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n\nexport const IntegerSignedInputExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'integer.signed.input.example',\n    isSigned: true,\n    label: 'Mileage',\n    endAdornment: 'miles',\n  }), [])\n\n  return <Input id='integer.signed.input.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n\nexport const DecimalInputExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'decimal.input.example',\n    label: 'Sell tax amount',\n    numberMode: 'decimal',\n    startAdornment: '$',\n  }), [])\n\n  return <Input id='decimal.input.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n\nexport const DecimalSignedInputExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'decimal.signed.input.example',\n    label: 'Sell tax amount',\n    numberMode: 'decimal',\n    isSigned: true,\n    startAdornment: '$',\n  }), [])\n\n  return <Input id='decimal.signed.input.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n\nexport const DecimalZeroSelectExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'decimal.zero.select.example',\n    isSigned: true,\n    focusSelectionMode: 'zero',\n    label: 'Sell tax amount',\n    numberMode: 'decimal',\n    startAdornment: '$',\n  }), [])\n\n  return <Input id='decimal.zero.select.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n\nexport const DecimalNoSelectExample: FC = () => {\n  const [value, setValue] = useState('')\n\n  const Input = useMemo(() => NumberInputExampleHOC({\n    id: 'decimal.no.select.example',\n    isSigned: true,\n    focusSelectionMode: 'zero',\n    label: 'Sell tax amount',\n    numberMode: 'decimal',\n    startAdornment: '$',\n  }), [])\n\n  return <Input id='decimal.no.select.example' value={value} onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)} />\n}\n","import type { FC } from 'react'\n\nimport FormFieldHOC from '@UI/FormFieldHOC'\nimport NumberInput from '@UI/NumberInputPlanB'\n\nimport type { InputValue } from '../../Input/types' // AZ-NOTE: do not replace relative import of types\nimport type { FormCompatible, FormFieldProps } from '../../FormFieldHOC'\nimport type { NumberInputPropsPlanB } from '../types'\n\nexport default FormFieldHOC<FormCompatible<NumberInputPropsPlanB, InputValue>, InputValue>(NumberInput as FC<FormFieldProps<InputValue>>)\n","import { type ChangeEvent, type FC, useState } from 'react'\nimport FormNumberInput from '../components/FormNumberInput'\n\nimport type { InputValue } from '@UI/Input/types'\nimport type { ComplementModes, FocusSelectionModes, NumberModes } from '../types'\n\nexport const FormNumberInputExample: FC = () => {\n  const [value, setValue] = useState < InputValue>('2131')\n  const [disabled, setDisabled] = useState(false)\n  const [touched, setTouched] = useState(false)\n  const [numberMode, setNumberMode] = useState<NumberModes>('decimal')\n  const [focusMode, setFocusMode] = useState<FocusSelectionModes>('all')\n  const [complementOnBlur, setComplementOnBlur] = useState<ComplementModes>('max-scale')\n  const [complementOnMount, setComplementOnMount] = useState<ComplementModes>('max-scale')\n  const [isEmptyAllowed, setEmptyAllowed] = useState(true)\n  const [isSigned, setSigned] = useState(true)\n\n  return (\n    <div>\n      <div style={{ marginBottom: '16px' }}>\n        <button\n          style={{ marginRight: '20px' }}\n          onClick={() => setDisabled(prev => !prev)}\n        >\n          Toggle disabled\n        </button>\n\n        <button\n          style={{ marginRight: '20px' }}\n          onClick={() => setTouched(false)}\n        >\n          Reset touched\n        </button>\n\n        <button\n          style={{ marginRight: '20px' }}\n          onClick={() => setValue(42)}\n        >\n          Set value to 42\n        </button>\n\n        <button onClick={() => setValue(0.1)}>Set value to 0.1</button>\n      </div>\n\n      <div style={{ marginBottom: '16px' }}>\n        <label>\n          <span style={{ marginRight: '8px' }}>Number mode:</span>\n          <select\n            onChange={(evt) => setNumberMode(evt.target.value as NumberModes)}\n            value={numberMode}\n          >\n            <option value='decimal'>decimal (scale: 2)</option>\n            <option value='integer'>integer (scale: 0)</option>\n          </select>\n        </label>\n\n        <span style={{ margin: '0px 20px' }}>|</span>\n\n        <label>\n          <span style={{ marginRight: '8px' }}>Focus mode:</span>\n          <select\n            onChange={(evt) => setFocusMode(evt.target.value as FocusSelectionModes)}\n            value={focusMode}\n          >\n            <option value='all'>select all</option>\n            <option value='zero'>select zero</option>\n            <option value='none'>select none</option>\n          </select>\n        </label>\n      </div>\n\n      <div>\n        <label>\n          <span style={{ marginRight: '8px' }}>Complement on blur:</span>\n          <select\n            onChange={(evt) => setComplementOnBlur(evt.target.value as ComplementModes)}\n            value={complementOnBlur}\n          >\n            <option value='max-scale'>max-scale</option>\n            <option value='min-number'>min-number</option>\n            <option value='none'>none</option>\n          </select>\n        </label>\n\n        <span style={{ margin: '0px 20px' }}>|</span>\n\n        <label>\n          <span style={{ marginRight: '8px' }}>Complement on mount:</span>\n          <select\n            onChange={(evt) => setComplementOnMount(evt.target.value as ComplementModes)}\n            value={complementOnMount}\n          >\n            <option value='max-scale'>max-scale</option>\n            <option value='min-number'>min-number</option>\n            <option value='none'>none</option>\n          </select>\n        </label>\n\n        <span style={{ margin: '0px 20px' }}>|</span>\n\n        <label>\n          <input\n            type='checkbox'\n            checked={isSigned}\n            onChange={(evt) => setSigned(evt.target.checked)}\n          />\n          <span style={{ marginLeft: '4px' }}>Signed?</span>\n        </label>\n\n        <span style={{ margin: '0px 20px' }}>|</span>\n\n        <label>\n          <input\n            type='checkbox'\n            checked={isEmptyAllowed}\n            onChange={(evt) => setEmptyAllowed(evt.target.checked)}\n          />\n          <span style={{ marginLeft: '4px' }}>Allow empty?</span>\n        </label>\n      </div>\n\n      <hr style={{ margin: '20px 0px' }} />\n\n      <FormNumberInput\n        complementOnBlur={complementOnBlur}\n        complementOnMount={complementOnMount}\n        dataTestId='form-input-sales-tax'\n        disabled={disabled}\n        error={value === ''}\n        errorMessage='Field is required'\n        focusSelectionMode={focusMode}\n        helper='Бухгалтеры в Киеве, недорого: link'\n        id='salesTax'\n        isEmptyAllowed={isEmptyAllowed}\n        isSigned={isSigned}\n        label='Sales tax amount'\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          setValue(e.target.value)\n          setTouched(true)\n        }}\n        numberMode={numberMode}\n        startAdornment='$'\n        touched={touched}\n        value={value}\n      />\n    </div>\n  )\n}\n","import { Meta, Story } from '@storybook/addon-docs'\nimport {\n  NumberInput,\n} from './__examples__'\n\nimport { FormNumberInputExample } from './__examples__/FormNumberInput'\n\n<Meta title='NumberInput Plan B' component={NumberInput} />\n\n# NumberInputPlanB\n\n<Story name='Form Input (all features)'>\n  <FormNumberInputExample />\n</Story>\n"],"names":["SCALES","DEFAULT_NUMBER_CONFIGS","MAGIC_NUMBER","DEFAULT_CONFIG","formatValueView","__name","_value","config","complementMode","isEmptyAllowed","scale","isSigned","isEmptyValue","value","replacer","signedNumbersAndDots","onlyNumbersAndDots","conf","formatDecimal","formatInteger","NumberMask","complementOnBlur","complementOnMount","focusSelectionMode","initialPlaceholder","_inputRef","_onBlur","_onChange","_onFocus","signed","refMask","useRef","defaultInputRef","refIsFormatted","refInput","useCallback","elem","ref","useMemo","formatterConfigMount","onChange","e","isOnChangeByEvent","onBlur","evt","formatterConfigBlur","formattedValue","onFocus","value2","_a","onAccept","_","__","_evt","_jsx","IMaskInput","rest","Number","NumberMaskHOC","maskConfigs","props","otherHocProps","NumberInput","inputRef","_maskConfigs","maxValue","minValue","numberMode","mergedConfig","max","min","InputComponent","Input","inputProps","NumberInputExampleHOC","hocProps","IntegerInputExample","setValue","useState","IntegerSignedInputExample","DecimalInputExample","DecimalSignedInputExample","DecimalZeroSelectExample","DecimalNoSelectExample","FormNumberInput$1","FormFieldHOC","FormNumberInputExample","disabled","setDisabled","touched","setTouched","setNumberMode","focusMode","setFocusMode","setComplementOnBlur","setComplementOnMount","setEmptyAllowed","setSigned","_jsxs","prev","FormNumberInput","layoutProps","MDXLayout","MDXContent","components","mdx","Meta","Story","isMDXComponent","formInputAllFeatures","storyName","parameters","storySource","source","componentMeta","title","component","includeStories","mdxStoryNameToKey","docs","page","AddContext","__namedExportsOrder"],"mappings":"kgCAEO,MAAMA,EAAsC,CACjD,QAAS,EACT,QAAS,CACX,EAEaC,GAA2C,CACtD,MAAO,IACP,MAAOD,EAAO,QACd,mBAAoB,GACtB,EAKaE,GAAe,GCFtBC,EAAiD,CACrD,eAAgB,YAChB,eAAgB,GAChB,MAAOH,EAAO,QACd,OAAQ,EACV,EAOaI,EAAkBC,EAAA,CAC7BC,EACAC,IACW,CACL,KAAA,CACJ,eAAAC,EAAiBL,EAAe,eAChC,eAAAM,EAAiBN,EAAe,eAChC,MAAAO,EAAQP,EAAe,MACvB,OAAQQ,EAAWR,EAAe,MAChC,EAAAI,EAEEK,EAAgBN,IAAW,IAAQA,GAAU,KACnD,GAAIM,GAAgBH,EACX,MAAA,GAGT,GAAID,IAAmB,OACd,OAAAF,GAAA,YAAAA,EAAQ,aAAc,GAG/B,MAAMO,EAAQD,EAAe,IAAMN,EAAO,SAAS,EAM7CQ,EAAWH,EAAWI,GAAuBC,GAE/C,GAAAN,IAAUV,EAAO,QACnB,GAAIQ,IAAmB,YAAa,CAClC,MAAMS,EAAO,CAAE,cAAeN,EAAU,SAAUD,CAAM,EACxD,OAAOI,EAASI,GAAcJ,EAASD,CAAK,EAAGI,CAAI,CAAC,GAAK,EAAA,KAEzD,QAAO,WAAWH,EAASD,CAAK,GAAK,EAAE,EAAE,WAIzC,OAAAH,IAAUV,EAAO,QACZmB,GAAcL,EAASD,CAAK,EAAG,CAAE,cAAeF,CAAA,CAAU,GAAK,GAGjE,EACT,EA1C+B,mBClB/BS,GAAAf,EAAA,CAAA,CAAyC,iBAAAgB,EAAA,YACpB,kBAAAC,EAAA,YACC,mBAAAC,EAAA,MACC,mBAAAC,EACrBA,SAAAA,EACUC,eAAAA,EAAAA,GACO,OAAAC,EACTA,SAAAA,EACEC,QAAAA,EACDC,MAAAA,EACTlB,OAAAA,EACAmB,MAAAA,EACOvB,GAAAA,CAET,IAAA,CACE,MAAAwB,EAAAC,SAAA,IAAA,EACAC,EAAAD,SAAA,IAAA,EACAE,EAAAF,SAAA,EAAA,EAEAG,EAAAC,cAAAC,GAAA,CACE,MAAAC,EAAAZ,GAAAO,EACAK,IAAA,SACEA,EAAA,QAAAD,EACF,EAAA,CAAAX,CAAA,CAAA,EAGFZ,EAAAyB,EAAAA,QAAA,IAAA,CACE,GAAAL,EAAA,QACE,OAAA3B,GAAA,YAAAA,EAAA,aAAA,GAGF,MAAAiC,EAAA,CAA6B,eAAAjB,EACXA,eAAAA,EAChBb,OAAAA,EACAoB,MAAAA,CACAnB,EAGFuB,OAAAA,EAAAA,QAAAA,GACA7B,EAAAE,GAAA,GAAAiC,CAAA,CAAyD,EAAA,CAAAjC,EAAAgB,EAAAb,EAAAoB,EAAAnB,CAAA,CAAA,EAa3D8B,EAAAL,cAAAM,GAAA,CACEd,GAAA,OAIAe,EAAAf,CAAA,EACEA,EAAAA,CAAAA,EAEAA,EAAAA,EAAAA,OAAAA,GAAAA,EAAAA,OAAAA,KAAAA,EACF,EAAA,CAAAA,CAAA,CAAA,EAGFgB,EAAAR,cAAAS,GAAA,CAGE,GAFAlB,GAAAA,MAAAA,EAAAA,GAEAkB,EAAA,QAAA,KACE,OAGF,MAAAC,EAAA,CAA4B,eAAAxB,EAAkBA,eAAAA,EAAkBZ,MAAAA,EAAgBC,OAAAA,CAAOmB,EACvFiB,EAAA1C,EAAAwC,EAAA,OAAA,MAAAC,CAAA,EAEAC,IAAAF,EAAA,OAAA,QACEA,EAAAA,OAAAA,MAAAA,EACAJ,EAAAA,CAAAA,EACF,EAAA,CAAAnB,EAAAZ,EAAAiB,EAAAc,EAAA9B,EAAAmB,CAAA,CAAA,EAUFkB,EAAAZ,cAAAS,GAAA,WACEhB,GAAAA,MAAAA,EAAAA,GACA,MAAAoB,IAAAC,EAAAL,EAAA,SAAA,YAAAK,EAAA,QAAA,IAEA1B,IAAA,OACEqB,EAAAA,GAAAA,YAAAA,EAAAA,SAAAA,MAAAA,EAAAA,SAAqBrB,IAAA,QAAA,OAAAyB,CAAA,IAAA,KAErBJ,EAAAA,GAAAA,YAAAA,EAAAA,SAAAA,MAAAA,EAAAA,SACF,EAAA,CAAArB,EAAAK,CAAA,CAAA,EAGFsB,EAAAf,EAAA,YAAA,CAAAgB,EAAAC,EAAAC,IAAA,EACEA,GAAA,YAAAA,EAAA,SAAA,OACEb,GAAAA,MAAAA,EAAAA,GACF,EAAA,CAAAA,CAAA,CAAA,EAKF,OAAAc,EAAAC,GAAA,CACa,GAAAC,EACLA,SAAAA,EACMtB,KAAAA,EAAAA,SAAAA,EACa,KAAA,OACjBuB,eAAAA,GACU,mBAAA,GACI,SAAAP,EACpB,OAAAP,EACA,QAAAI,EACA,IAAAjB,EACKA,MAAAA,EACL,OAAAD,EACA,MAAAhB,CACA,CAAA,CAGN,EA3HA,cA6HA6C,EAAArD,EAAA,CAAA,CAAuB,YAAAsD,EAAEA,GAAAA,CAA8C,IACrEC,GACEN,EAAAlC,GAAA,CACa,GAAAwC,EACLA,GAAAA,EACAC,GAAAA,CACAF,CAAAA,EANZ;iPC5HA,MAAAG,EAAAzD,EAAA,CAAA,CAAgD,iBAAAgB,EAC9CA,kBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAwC,eAAAA,EACAtD,SAAAA,EACAE,YAAAA,EACaqD,SAAAA,EACbC,SAAAA,EACAC,WAAAA,EACAC,GAAAA,CAEF,IAAA,CACE,MAAAR,EAAArB,EAAAA,QAAA,IAAA,CACE,MAAA8B,EAAA,CAAqB,GAAAnE,GAChBA,GAAAA,CACA+D,EAGL,MAAA,CAAO,GAAAI,EACFA,IAAAA,GAAAA,EAAAA,IAC2BC,IAAAA,GAAAA,EAAAA,IACAC,MAAAA,GAAAA,KAAAA,EAAAA,MAAAA,EAAAA,CAAAA,EACoC,OAAA3D,GAAAyD,EAAA,MACjCvC,CACnC,EAAA,CAAAmC,EAAArD,EAAAsD,EAAAC,EAAAC,CAAA,CAAA,EASFI,EAAAjC,EAAAA,QAAA,IACEoB,EAAA,CAAqB,iBAAArC,EACnBA,kBAAAA,EACAC,mBAAAA,EACAC,SAAAA,EACAwC,eAAAA,EACAtD,YAAAA,CACAkD,CAAAA,EACD,CAAAtC,EAAAC,EAAAC,EAAAwC,EAAAtD,EAAAkD,CAAA,CAAA,EAUH,OAAAL,EAAAkB,GAAA,CACQ,GAAAC,EACAA,eAAAA,EACJ,UAAAvE,GACWA,uBAAAA,EACW,CAAA,CAG5B,EA5DA,4uJCEO,MAAAwE,EAAArE,EAAAsE,GAAAf,GAAAN,EAAAQ,EAAA,CAC0C,GAAAa,EAAKA,GAAAA,CAAmB,CAAA,EADlE,yBAGAC,EAAAvE,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,wBAC5C,MAAA,UACG,aAAA,OACO,CAAA,EAAA,CAAA,CAAA,EAGhB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,wBAAI,MAAA3D,EAAwB,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CAChI,EAVO,uBAYAsC,EAAA1E,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,+BAC5C,SAAA,GACM,MAAA,UACH,aAAA,OACO,CAAA,EAAA,CAAA,CAAA,EAGhB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,+BAAI,MAAA3D,EAA+B,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CACvI,EAXO,6BAaAuC,EAAA3E,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,wBAC5C,MAAA,kBACG,WAAA,UACK,eAAA,GACI,CAAA,EAAA,CAAA,CAAA,EAGlB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,wBAAI,MAAA3D,EAAwB,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CAChI,EAXO,uBAaAwC,EAAA5E,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,+BAC5C,MAAA,kBACG,WAAA,UACK,SAAA,GACF,eAAA,GACM,CAAA,EAAA,CAAA,CAAA,EAGlB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,+BAAI,MAAA3D,EAA+B,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CACvI,EAZO,6BAcAyC,EAAA7E,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,8BAC5C,SAAA,GACM,mBAAA,OACU,MAAA,kBACb,WAAA,UACK,eAAA,GACI,CAAA,EAAA,CAAA,CAAA,EAGlB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,8BAAI,MAAA3D,EAA8B,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CACtI,EAbO,4BAeA0C,EAAA9E,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEAN,EAAAlC,UAAA,IAAAoC,EAAA,CAAkD,GAAA,4BAC5C,SAAA,GACM,mBAAA,OACU,MAAA,kBACb,WAAA,UACK,eAAA,GACI,CAAA,EAAA,CAAA,CAAA,EAGlB,OAAApB,EAAAkB,EAAA,CAAa,GAAA,4BAAI,MAAA3D,EAA4B,SAAA4B,GAAAoC,EAAApC,EAAA,OAAA,KAAA,CAAqF,CAAA,CACpI,EAbO,ugUCxEP,MAAA2C,GAAAC,GAAAvB,CAAA,6/JCHO,MAAAwB,EAAAjF,EAAA,IAAA,CACL,KAAA,CAAAQ,EAAAgE,CAAA,EAAAC,EAAA,SAAA,MAAA,EACA,CAAAS,EAAAC,CAAA,EAAAV,EAAA,SAAA,EAAA,EACA,CAAAW,EAAAC,CAAA,EAAAZ,EAAA,SAAA,EAAA,EACA,CAAAX,EAAAwB,CAAA,EAAAb,EAAA,SAAA,SAAA,EACA,CAAAc,EAAAC,CAAA,EAAAf,EAAA,SAAA,KAAA,EACA,CAAAzD,EAAAyE,CAAA,EAAAhB,EAAA,SAAA,WAAA,EACA,CAAAxD,EAAAyE,CAAA,EAAAjB,EAAA,SAAA,WAAA,EACA,CAAArE,EAAAuF,CAAA,EAAAlB,EAAA,SAAA,EAAA,EACA,CAAAnE,EAAAsF,CAAA,EAAAnB,EAAA,SAAA,EAAA,EAEA,OAAAoB,EAAA,MAAA,CACE,SAAA,CAAAA,EAAA,MAAA,CACE,MAAA,CAAY,aAAA,MAAgB,EAAO,SAAA,CAAA5C,EAAA,SAAA,CACjC,MAAA,CACS,YAAA,MAAe,EAAO,QAAA,IAAAkC,EAAAW,GAAA,CAAAA,CAAA,EACW,SAAA,iBACzC,CAAA,EAAA7C,EAAA,SAAA,CAID,MAAA,CACS,YAAA,MAAe,EAAO,QAAA,IAAAoC,EAAA,EAAA,EACE,SAAA,eAChC,CAAA,EAAApC,EAAA,SAAA,CAID,MAAA,CACS,YAAA,MAAe,EAAO,QAAA,IAAAuB,EAAA,EAAA,EACH,SAAA,iBAC3B,CAAA,EAAAvB,EAAA,SAAA,CAID,QAAA,IAAAuB,EAAA,EAAA,EAAmC,SAAA,kBAAG,CAAA,CAAA,CAAyB,CAAA,EAAAqB,EAAA,MAAA,CAGjE,MAAA,CAAY,aAAA,MAAgB,EAAO,SAAA,CAAAA,EAAA,QAAA,CACjC,SAAA,CAAA5C,EAAA,OAAA,CACE,MAAA,CAAa,YAAA,KAAe,EAAM,SAAA,cAAG,CAAA,EAAA4C,EAAA,SAAA,CACrC,SAAAtD,GAAA+C,EAAA/C,EAAA,OAAA,KAAA,EACoE,MAAAuB,EAC3DA,SAAAA,CAAAA,EAAAA,SAAAA,CAEP,MAAA,UAAc,SAAA,oBAAU,CAAA,EAAAb,EAAA,SAAA,CACxB,MAAA,UAAc,SAAA,oBAAU,CAAA,CAAA,CAA2B,CAAA,CAAA,CAC5C,CAAA,EAAAA,EAAA,OAAA,CAGX,MAAA,CAAa,OAAA,UAAU,EAAW,SAAA,GAAG,CAAA,EAAA4C,EAAA,QAAA,CAErC,SAAA,CAAA5C,EAAA,OAAA,CACE,MAAA,CAAa,YAAA,KAAe,EAAM,SAAA,aAAG,CAAA,EAAA4C,EAAA,SAAA,CACrC,SAAAtD,GAAAiD,EAAAjD,EAAA,OAAA,KAAA,EAC2E,MAAAgD,EAClEA,SAAAA,CAAAA,EAAAA,SAAAA,CAEP,MAAA,MAAc,SAAA,YAAM,CAAA,EAAAtC,EAAA,SAAA,CACpB,MAAA,OAAc,SAAA,aAAO,CAAA,EAAAA,EAAA,SAAA,CACrB,MAAA,OAAc,SAAA,aAAO,CAAA,CAAA,CAAoB,CAAA,CAAA,CAClC,CAAA,CAAA,CACH,CAAA,EAAA4C,EAAA,MAAA,CAGV,SAAA,CAAAA,EAAA,QAAA,CACE,SAAA,CAAA5C,EAAA,OAAA,CACE,MAAA,CAAa,YAAA,KAAe,EAAM,SAAA,qBAAG,CAAA,EAAA4C,EAAA,SAAA,CACrC,SAAAtD,GAAAkD,EAAAlD,EAAA,OAAA,KAAA,EAC8E,MAAAvB,EACrEA,SAAAA,CAAAA,EAAAA,SAAAA,CAEP,MAAA,YAAc,SAAA,WAAY,CAAA,EAAAiC,EAAA,SAAA,CAC1B,MAAA,aAAc,SAAA,YAAa,CAAA,EAAAA,EAAA,SAAA,CAC3B,MAAA,OAAc,SAAA,MAAO,CAAA,CAAA,CAAa,CAAA,CAAA,CAC3B,CAAA,EAAAA,EAAA,OAAA,CAGX,MAAA,CAAa,OAAA,UAAU,EAAW,SAAA,GAAG,CAAA,EAAA4C,EAAA,QAAA,CAErC,SAAA,CAAA5C,EAAA,OAAA,CACE,MAAA,CAAa,YAAA,KAAe,EAAM,SAAA,sBAAG,CAAA,EAAA4C,EAAA,SAAA,CACrC,SAAAtD,GAAAmD,EAAAnD,EAAA,OAAA,KAAA,EAC+E,MAAAtB,EACtEA,SAAAA,CAAAA,EAAAA,SAAAA,CAEP,MAAA,YAAc,SAAA,WAAY,CAAA,EAAAgC,EAAA,SAAA,CAC1B,MAAA,aAAc,SAAA,YAAa,CAAA,EAAAA,EAAA,SAAA,CAC3B,MAAA,OAAc,SAAA,MAAO,CAAA,CAAA,CAAa,CAAA,CAAA,CAC3B,CAAA,EAAAA,EAAA,OAAA,CAGX,MAAA,CAAa,OAAA,UAAU,EAAW,SAAA,GAAG,CAAA,EAAA4C,EAAA,QAAA,CAErC,SAAA,CAAA5C,EAAA,QAAA,CACE,KAAA,WACO,QAAA3C,EACIA,SAAAA,GAAAA,EAAAA,EAAAA,OAAAA,OAAAA,CACsC,CAAA,EAAA2C,EAAA,OAAA,CAEjD,MAAA,CAAa,WAAA,KAAc,EAAM,SAAA,SAAG,CAAA,CAAA,CAAc,CAAA,EAAAA,EAAA,OAAA,CAGpD,MAAA,CAAa,OAAA,UAAU,EAAW,SAAA,GAAG,CAAA,EAAA4C,EAAA,QAAA,CAErC,SAAA,CAAA5C,EAAA,QAAA,CACE,KAAA,WACO,QAAA7C,EACIA,SAAAA,GAAAA,EAAAA,EAAAA,OAAAA,OAAAA,CAC4C,CAAA,EAAA6C,EAAA,OAAA,CAEvD,MAAA,CAAa,WAAA,KAAc,EAAM,SAAA,cAAG,CAAA,CAAA,CAAmB,CAAA,CAAA,CACjD,CAAA,EAAAA,EAAA,KAAA,CAGV,MAAA,CAAW,OAAA,UAAU,CAAW,CAAA,EAAAA,EAAA8C,GAAA,CAEhB,iBAAA/E,EACd,kBAAAC,EACA,WAAA,uBACW,SAAAiE,EACX,MAAA1E,IAAA,GACiB,aAAA,oBACJ,mBAAA+E,EACOA,OAAAA,qCACb,GAAA,WACJ,eAAAnF,EACH,SAAAE,EACA,MAAA,mBACM,SAAA8B,GAAA,CAEJoC,EAAAA,EAAAA,OAAAA,KAAAA,EACAa,EAAAA,EAAAA,CAAe,EACjB,WAAAvB,EACA,eAAA,IACe,QAAAsB,EACf,MAAA5E,CACA,CAAA,CAAA,CACA,CAAA,CAGR,EA7IO,8YCSP,MAAMwF,GAAc,CAAA,EAGdC,GAAY,UAClB,SAASC,EAAW,CAClBC,WAAAA,EACA,GAAG5C,CACL,EAAG,CACD,OAAO6C,EAACH,GAAcD,EAAAA,CAAAA,EAAAA,GAAiBzC,EAAK,CAAE,WAAY4C,EAAY,QAAQ,WAAW,CAAA,EAGvFC,EAACC,EAAI,CAAC,MAAM,qBAAqB,UAAW5C,EAAa,QAAQ,MAAM,CAAA,EACvE2C,EAAM,KAAA,KAAA,kBAAiB,EACvBA,EAACE,EAAK,CAAC,KAAK,4BAA4B,QAAQ,OAAO,EACzDF,EAACnB,EAAsB,CAAC,QAAQ,wBAAwB,CAAA,CAAG,CACjD,CAEZ,CAbSiB,EAAAA,EAAAA,cAgBTA,EAAWK,eAAiB,SAEfC,EAAuBxG,EAAA,IAC1BoG,EAACnB,EACF,IAAA,EAF2B,wBAGpCuB,EAAqBC,UAAY,4BACjCD,EAAqBE,WAAa,CAAEC,YAAa,CAAEC,OAAQ,4BAA6B,CAAE,EAE1F,MAAMC,EAAgB,CAAEC,MAAO,qBAAsBC,UAAWtD,EAAauD,eAAgB,CAAC,sBAAsB,CAAI,EAElHC,GAAoB,CAAC,4BAA4B,sBAAsB,EAE7EJ,EAAcH,WAAaG,EAAcH,YAAc,GACvDG,EAAcH,WAAWQ,KAAO,CAC9B,GAAIL,EAAcH,WAAWQ,MAAQ,GACrCC,KAAM,IAAMf,EAACgB,EAAU,CAAC,kBAAmBH,GAAmB,wBAAyBJ,GAAeT,EAACF,EAAa,IAAA,CAAA,CACtH,EAE4B,MAAAmB,GAAA,CAAA,sBAAA"}